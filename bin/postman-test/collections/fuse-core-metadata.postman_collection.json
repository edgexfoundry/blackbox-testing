{
  "id": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
  "name": "fuse-core-metadata",
  "description": null,
  "order": [],
  "folders": [
    {
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 602432177,
      "id": "2fc58258-1ef4-28b4-bddc-c7bae2270db4",
      "name": "addressable",
      "description": "Folder for addressable",
      "order": [
        "418c9998-a158-8e11-ddb1-cf23d00785fe",
        "405fc7af-b8e7-d431-c5ec-cdc85263b127",
        "df6cb924-a2ef-8fa1-ea01-f9f18bee7907",
        "1181ecba-98bc-49e8-5bb5-fa1bf2d493e6",
        "b3a2a44c-9213-235d-c826-6e0e551424df",
        "e93a1d10-1d0a-3e4b-4e37-b6c57c2a0854",
        "ae41a838-c800-1e47-a388-7cc461356519",
        "617ce718-f721-75c1-a2eb-635fd9a477ce",
        "0a64efee-2f1f-fb54-030e-692966752134",
        "9888c392-1eb2-124a-203e-d3ac04c66b50",
        "fdb03f25-85b1-e96d-3f9d-83ae3a44c572"
      ]
    },
    {
      "id": "89288841-4790-4920-9dbf-f06fb0b44570",
      "name": "addressable_error_4xx",
      "description": "Folder for addressable",
      "order": [
        "6ed8338b-ff1c-3bfd-722c-de21b95f23a5",
        "1691a46e-92e8-10a6-c4cc-a169872f7a5d",
        "3589cec9-a6c6-2cbf-4880-34cf4c31bf05"
      ],
      "owner": "1042075",
      "lastUpdatedBy": "1046529",
      "lastRevision": 611933668
    },
    {
      "id": "6e14e34e-25bc-7114-b720-a39ce47fcf52",
      "name": "addressable_error_5xx",
      "description": "Folder for addressable",
      "order": [
        "9aa8de3b-9f31-81be-cfa0-8c0b6adb8c38",
        "4b194702-656c-3d27-6bf7-9450713220f2",
        "f09a20d2-ad80-cc7c-2660-09c0fd63e184",
        "a2ca01d6-42db-2983-9622-67c118585729",
        "23be52b1-9ed2-271c-a076-8b4333ac6aa1",
        "40a3501c-5c56-96ed-b371-6c471e251a86",
        "07ea5e55-646d-f803-cdfa-d384c9165a02",
        "7f8b57f4-8a29-4bc4-011f-aa054793c0f1",
        "33ab13db-6f4c-bdfd-8f77-b61a13f7a825",
        "efcf700d-ad86-0993-544b-eef74269f376",
        "43265df8-70af-460d-9c43-652259dd1346"
      ],
      "owner": "1042075",
      "lastUpdatedBy": "1046529",
      "lastRevision": 611934660
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 602432178,
      "id": "5990dfa5-4f89-e065-1f47-183e673f9dbd",
      "name": "command",
      "description": "Folder for command",
      "order": [
        "1303339c-da43-28fc-c054-a75ed34d0721",
        "50506456-b70c-0ac2-ddb8-9805ed252db8",
        "364eb618-dd40-c398-d82e-ad9302a3e3cb",
        "63f3a315-ec85-2c03-fc5c-a3a32777ac27",
        "ad9db6d2-29ff-f7de-40f1-11bfebf00601",
        "1b578b09-3b63-bcca-6b22-888c11a1bebf"
      ]
    },
    {
      "id": "093bf479-db55-a54e-f469-eb5bd2acf918",
      "name": "command_error_4xx",
      "description": "Folder for command",
      "order": [
        "26aec855-342b-aceb-fa16-e6801dba0631",
        "429b735b-81b9-ef8b-924e-b4be3fc3761b",
        "f034c965-b1e4-98d4-3b28-16a439b47ae2"
      ],
      "owner": "1042075",
      "lastUpdatedBy": "1046529",
      "lastRevision": 615619074
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1020082",
      "lastRevision": 614589955,
      "id": "bcc1e7ab-8475-500b-f0a5-cf51b7e97172",
      "name": "command_error_503",
      "description": "Folder for command",
      "order": [
        "a2c58dc3-3765-de9a-6dd7-66f3f6a249b0",
        "62aa804a-b71e-eaa2-2da9-e0d5a879bbaa",
        "adfc72d1-0ced-42df-d360-ab1d9a9c8d03",
        "721db23d-e80e-8ed6-4cd0-a058085d020b",
        "947588c8-3e83-0128-34d7-a3cd33a02757",
        "b40154a1-b0d3-b98e-d27b-3234d2798c9a"
      ]
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 602432169,
      "id": "1977af90-d6e1-0afa-4e8a-7e518269e1de",
      "name": "device",
      "description": "Folder for device",
      "order": [
        "91ff77b3-8914-7f86-954a-84e1c7c0790e",
        "0ef85fde-e982-fc3b-c397-9a46a3e3a7fb",
        "fcf07d56-a48a-91c7-3ac6-8d2f945d54cd",
        "a6e7f896-025e-fcc8-4e96-0dffd33128e7",
        "f75c7cc8-91fd-0b0a-a276-15bd31e8e7ab",
        "5b34a814-c9af-b16f-cf2e-ca94bc978a9d",
        "b15869f2-e2c6-b239-68e1-c7b6b10e1ef5",
        "7bfc36cc-75c4-414b-b0a0-b6b676cbbf7e",
        "dcd282ea-794c-0aac-bf47-9d71c12d7aa6",
        "4c7913bc-f7d2-eda9-98cb-6a9ca111f8a2",
        "4deb0161-331e-2b45-83b6-681b41d6ea98",
        "6f6ca8f2-e2a3-2284-2b12-773b693346b7",
        "8993629e-b9bd-9857-727b-fcc30d48aa7a",
        "a0132910-30ea-0bd8-3445-56e8d611b936",
        "94186544-43f6-9390-da92-ff54ea3980bc",
        "f938897a-b2fc-f61a-0c69-4ed394142e47",
        "753fa7cd-4857-0d8c-2e0f-e82cd7931309",
        "df2d3892-7822-fa2c-a7f4-27abfbaf0a1b",
        "fed89397-fafe-75be-d0b1-32721266d9b5",
        "0ed5d96b-b20e-91d4-d214-e4b643ff307e",
        "5cd94895-0791-fa46-b028-e60ac4c2d6a5",
        "8f079a0f-73cb-6d9c-e0e3-d1b1bdec5d18"
      ]
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1044936",
      "lastRevision": 611368225,
      "id": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "name": "device_error_4xx",
      "description": "Folder for device API's with 4xx status",
      "order": [
        "52524687-1df5-e1f7-950a-a0edf088e09f",
        "f701ded0-76a3-5a8d-fa24-15b24a0debc5",
        "9ab51cfe-94ab-d4b0-03d0-c13c01a70b1a",
        "4fc904fa-3f20-96ac-7eed-4eccdbfb6cb2",
        "9f5eea23-10df-6687-95c6-f1b163514de3",
        "7b129ecd-ddda-25c5-f333-238a9d862b36",
        "2446cd73-a930-368f-6fa7-6ab69b4eebd6",
        "23563b7a-72db-32e4-0baa-87a7d16bd5bc",
        "7c53f74a-5df5-b1ba-09b6-93e3e7382c44",
        "68b9e9ea-7a96-c539-0681-63a2e8b20200",
        "4fcf9756-7426-7882-9571-dc1893f1574e",
        "e6f4bc25-88f8-24c5-3e5e-7308345cf6f3",
        "5a90a271-c99b-9f4e-cdc4-572251644ab9",
        "ad50b5bd-ea6e-55d9-5e39-7c631e8a3a9f",
        "b0fb5f01-cf39-ae28-7a34-684771e3afa7",
        "17a2f092-fd40-bb8c-7547-7e1d1d023ac9",
        "8ea5402c-aa63-e232-6288-7828d84745d1",
        "813b8501-c57f-b144-4bbf-b4cfb837fa73"
      ]
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1046531",
      "lastRevision": 603709909,
      "id": "ae7fe7c5-a4a7-a985-6272-a79f9b671e5f",
      "name": "deviceprofile",
      "description": "Folder for deviceprofile",
      "order": [
        "6a975457-bd66-84a2-908b-ee0deb8af39e",
        "e2c9cb51-d012-8e27-085b-baa871e20375",
        "31cca9f7-f45b-8000-6071-e50320f12998",
        "731c02c2-1393-2e44-68ad-e5493e460f9e",
        "4194664b-113d-7c96-f05e-fed0ef661262",
        "bef9ab89-64d2-68eb-bc0b-80a774ff67cb",
        "2cbe3c96-bf83-27c2-7fbe-1b072bfc78c8",
        "3873da8f-b48b-cf94-a9e2-0c87daa86041",
        "9f83d0c2-3f55-d39e-bddb-207cb68cb5df",
        "99b659bf-a788-dac4-8bdb-9b3b2e98c966",
        "92d3ee80-b4be-f911-407d-5927c4b57c27",
        "7f661474-620a-17e1-aba2-9ac141d2d0b6",
        "11e4d33b-8113-3403-ba19-d60a61f58a99",
        "c9d07e12-96c6-63a4-9b95-1ec0ee44fe1f",
        "1a11e9ae-03ef-4afc-215d-d897640f5408"
      ]
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1046531",
      "lastRevision": 603711773,
      "id": "aba3f537-ed42-b43c-bc73-0cdc3511fc74",
      "name": "deviceprofile_error_4xx",
      "description": "",
      "order": [
        "c92a7218-a733-0724-a578-e5f6b2a152f9",
        "5c13fd49-4d33-7e41-a999-47f441b5262c",
        "89804d11-29c7-a6c6-6d96-68f7439521db",
        "a5c6ba4b-0c39-a348-de9c-fd7f8695933e",
        "c3f640eb-3102-4486-f14d-a939862a88aa",
        "54d59ad9-b7c4-1150-d1ec-bc7f2bc68990",
        "b9042f3d-9a78-6fdd-53be-0ba314482851"
      ]
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1046531",
      "lastRevision": 603736115,
      "id": "31938785-a6c9-c5a6-7f36-a394e497afe2",
      "name": "devicereport",
      "description": "Folder for devicereport",
      "order": [
        "6b423938-507b-7171-d982-a3931fd2a5ce",
        "50718f18-0e06-9faa-bb74-448068ed4fb6",
        "8b3b028d-755b-9730-c9b9-5e5f48511602",
        "67820ee6-9caf-7f15-f0e7-e48af4150ac9",
        "97d87997-251e-aec7-c0d8-8c485b870ea6",
        "55a6f32e-7a02-3067-1620-e0c3e2b705e2",
        "fed3e2b5-5699-6564-ace5-023f4c66b9cd",
        "13d89e6d-499e-e67b-5ac5-79cc09437a61",
        "3f7a1fa6-48b8-d083-d6bb-a0075696bd05"
      ]
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1046531",
      "lastRevision": 603711777,
      "id": "5b884982-5afb-a3b2-95ce-895479ea4706",
      "name": "devicereport_error_4xx",
      "description": "",
      "order": [
        "3ebdc704-efbf-ffd3-4d6e-664d48a1bdad",
        "0f7e7d86-9b9d-e567-7ec3-317a08d729eb",
        "b6834afc-e265-90db-9155-cca3d33ad1be",
        "bdc2dcdf-3d26-9e7c-bb3f-f14d47d5b17f",
        "2cfca44a-2100-57d2-66e2-c3277f09be31"
      ]
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1046529",
      "lastRevision": 615026521,
      "id": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "deviceservice",
      "description": "Folder for deviceservice",
      "order": [
        "49f4a9ca-4524-bc2e-82c9-5c234d058f7f",
        "2befa6b4-40b7-a749-20f1-52e90e68db84",
        "77c2a8d6-30e6-1547-9bf6-4d8e51ecd0be",
        "bc2d62c3-f58f-b89d-8504-7282e4740158",
        "e2aae16a-15e7-d146-161a-d4bfaa26badb",
        "d2ade79a-da21-ffe5-ce68-6716883d5492",
        "5ae9f986-f496-6119-d208-8a26fa1c4609",
        "6837e8e6-137f-5aa5-1643-fbba0c0b73fb",
        "7b2a87f4-44ba-8953-c692-648338ebd2a1",
        "96d68de6-0653-90b4-6715-30d555e2c08b",
        "d55a7da4-0f2a-229d-d1a2-69216bda1098",
        "4eab3604-7b0b-e4b2-4083-b3c215386b45",
        "3f6e0938-2765-1007-2d15-c7e99faaf494",
        "705d3b44-3380-1422-536b-199a73ec9343",
        "748abea6-c624-4226-c776-ca84e89eed19",
        "8f1fdbf6-c422-5378-4dc1-0265bf838d33",
        "d4ed6ba5-46a2-36a8-1332-06cda1418441",
        "e9f63265-45eb-d93f-deb8-5e80f57a16fc",
        "11b7c3c9-fbf3-beeb-b81a-be5c023be4a9",
        "9b5c271e-1d0e-e172-8b91-007ec3b884dc",
        "a0f682b6-7d8b-c9b6-9f9a-a7c4ff9965e6"
      ]
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1046529",
      "lastRevision": 614705009,
      "id": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "deviceservice_error_4xx",
      "description": "",
      "order": [
        "8d253ce2-62bb-4e3b-f7fa-f334fada82d9",
        "ea25619c-a29e-e22d-7450-09918e4370fe",
        "e4345ad2-254e-e09c-32dc-4d71dc93bd79",
        "c908b809-a7b5-4d2a-ce93-9a46b3d90c41",
        "73d6a92a-2a36-e287-0f95-4dd82a30e326",
        "cefdeeb2-9cbc-ebff-9c33-f475b8e80d3e",
        "c05c6bbc-7a10-ea9f-509c-8902163dec74",
        "8057ab3f-d022-5a0b-8d0b-3267a833eeb3",
        "14b6c482-0ffe-396b-02fe-339d8f3f9aed",
        "51977bae-46b4-b5c4-e5be-1991c9027d0e",
        "6551af81-a030-e534-a3a5-a67557c528e0",
        "4b917faf-609d-ec32-4076-74d5624c42f1",
        "d38520af-9d83-b2e4-0763-005d7f5b5640",
        "a78bffd4-b4c1-224f-6f69-4869e20cf7b3",
        "d144ef55-9017-b371-0b80-960af606533c",
        "3ca87e23-a391-0b42-08e0-d201ca2111cc",
        "a98ddb68-5c92-a93a-37f4-8d5875495544"
      ]
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1046529",
      "lastRevision": 611960239,
      "id": "7392c419-fcb9-b088-140b-75e7f1e9765b",
      "name": "deviceservice_error_5xx",
      "description": "",
      "order": []
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 602432168,
      "id": "34eb3374-e267-8069-2167-a7960fa4be93",
      "name": "ping",
      "description": "Folder for ping",
      "order": [
        "6903205a-9f90-f8c6-34f9-1d6f0e4507bf"
      ]
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 602432176,
      "id": "8f54b2e6-ea42-e593-179c-0c31a98d6bf0",
      "name": "provisionwatcher",
      "description": "Folder for provisionwatcher",
      "order": [
        "7768f36e-ce1d-c16e-69f8-8dc772a9a19f",
        "0bddb36d-ea19-9e1a-4b93-d6a98768d9be",
        "a8e425df-6e49-63c9-f4b5-bf3903d0b7fc",
        "f75470b5-2fd1-d0d0-a687-b17425a84f02",
        "89385bcc-5f68-87f1-69cd-a97cd8633b2a",
        "2394d1df-319b-ec57-6507-9407a0cd4ecf",
        "a32f0de0-6325-bbb7-cde8-1d54cabe19b5",
        "c18dbfa8-7f6f-506c-3977-5142062b7ed5",
        "bf389cf4-5d73-c498-2305-a03c4b6a8fa1",
        "d1ed2959-53ff-dcf2-3317-7aab8588b22f",
        "8eeeaf49-6eb0-dfd9-a3b1-f9a30312826a",
        "06643ad9-a100-3e30-04eb-70162ece8f5a"
      ]
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 602432176,
      "id": "e15d127b-e39a-6e4c-4b8e-d72b97e8f932",
      "name": "provisionwatcher_error_4xx",
      "description": "Folder for provisionwatcher_error_4xx",
      "order": [
        "4045a5bf-a52c-ba69-97fe-f6e9000fac10",
        "77bc8198-a47b-dd81-ae78-07f11b0b2fb8",
        "815d9a82-62ad-f57f-007c-b24e05dd1efd",
        "8f1f061e-637a-6608-facf-07399798c569",
        "723f6405-dfe4-8598-eccb-f0d514df3832",
        "fc9ee6d0-9416-20bb-e370-aeb2188f1c43",
        "7dea1e16-74bb-a1cb-6530-5537bc575ab5",
        "38e53871-2868-b399-f66e-ff51b3b31995"
      ],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 602432175,
      "id": "d36c6c87-c62c-4cc3-844f-8910694685c9",
      "name": "schedule",
      "description": "Folder for schedule",
      "order": [
        "9e9385f5-b8e6-7bae-eba2-ada2286fe977",
        "e641f628-f488-8628-d876-6b9c2095dba1",
        "6e2467e4-1a45-443b-7a94-365debaf2e26",
        "792bdf2c-0e3d-099c-ccf3-850e3866446f",
        "d136bc07-ee90-159a-a5ce-9875ade3f37b",
        "70b0ce9c-8e08-7047-cf95-0ee9573a5b06",
        "d8935a34-35ed-12a7-bc98-9e712e70bfb7"
      ]
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 602432175,
      "id": "3bf4dc11-b055-2ed7-2ffb-1261983e3a8b",
      "name": "schedule_error_4xx",
      "description": "Folder for schedule_error_4xx",
      "order": [
        "729914e9-c80b-727b-8db3-1ac9aa3092ca",
        "0bb9b519-f7d9-21d1-9b3e-f72d4ef32157"
      ],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 602432174,
      "id": "5e88d57f-9093-8be6-289a-b4a9e1c92c11",
      "name": "scheduleevent",
      "description": "Folder for scheduleevent",
      "order": [
        "de484504-fcdf-b4ce-4a15-c4c438995de0",
        "a5d2c60f-6210-b95d-2ef0-fe1fb83b9143",
        "ef7923f4-6cba-9dd0-cd49-56c8326abd6c",
        "fa46e230-957a-d4a6-ec73-45ea4799acfa",
        "c31e3a7a-b21a-b342-435b-046b3a82b113",
        "58422913-f072-8848-8116-a0f2777f3ed9",
        "781ee22e-e4cf-292b-b16d-1629ec6eb15c"
      ]
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1046529",
      "lastRevision": 624844715,
      "id": "b9f10304-4f98-3922-e747-f5e603e57c2e",
      "name": "scheduleevent_error_4xx",
      "description": "Folder for scheduleevent_error_4xx",
      "order": [
        "db8c2279-f2d3-8003-6ed5-f9ffd87a9256",
        "d04e383b-2bea-109f-3235-80e04b6a95c0",
        "23285082-e17d-c343-ac60-05b5c97e4a5f",
        "253d49d3-e5c7-0e76-9823-2ec7824ddc53",
        "03448a8c-75a1-4c98-3ff7-128418834cf8",
        "4ccfd035-0ff0-b238-7323-f91107d15033",
        "affa017a-a7c3-ba94-6349-73ba86a461b9",
        "1e4e5161-e835-03ab-d65b-cf9752f1f286"
      ],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    }
  ],
  "timestamp": 0,
  "owner": "1042075",
  "public": false,
  "published": false,
  "requests": [
    {
      "id": "03448a8c-75a1-4c98-3ff7-128418834cf8",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/scheduleevent",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /scheduleevent - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 409\"] = responseCode.code === 409;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475844532494,
      "name": "258 http://localhost:48081/api/v1/scheduleevent",
      "description": "Update the ScheduleEvent identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if an attempt to change the name is made when the schedule event is still being referenced by device reports. NotFoundException (HTTP 404) if no schedule is found for the identifier provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{\"id\":\"57f72b79e4b060e27309e453\",\"name\":\"namegettingchanges\"}"
    },
    {
      "id": "06643ad9-a100-3e30-04eb-70162ece8f5a",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/provisionwatcher",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case: /provisionwatcher - POST\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for text/plain.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n    }\n    \n    //Validate the body for Id\n    tests[\"Does body contains Id\"] = responseBody.length === 24;\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475823859220,
      "name": "304 http://localhost:48081/api/v1/provisionwatcher",
      "description": "Add a new ProvisionWatcher - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.  Returns DataValidationException (HTTP 409) if profile service are unknown",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{  \n   \"name\":\"bacnet2 watcher\",\n   \"origin\":1471806386919,\n   \"identifiers\":{  \n      \"MAC\":\"00-05-1B-A1-99-99\",\n      \"HTTP\":\"10.0.0.1\"\n   },\n   \"profile\":{  \n      \"name\":\"variable speed motor profile\"\n   },\n   \"service\":{  \n      \"name\":\"home variable speed motor device service\"\n   }\n}"
    },
    {
      "folder": "6e14e34e-25bc-7114-b720-a39ce47fcf52",
      "id": "07ea5e55-646d-f803-cdfa-d384c9165a02",
      "name": "http://localhost:48081/api/v1/addressable/publisher/:publisher",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return Addressable objects with given publisher. List may be empty if none are associated to the publisher. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {
        "publisher": "{{publisher}}"
      },
      "url": "http://localhost:48081/api/v1/addressable/publisher/:publisher",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "0a64efee-2f1f-fb54-030e-692966752134",
      "folder": "2fc58258-1ef4-28b4-bddc-c7bae2270db4",
      "name": "336 http://localhost:48081/api/v1/addressable",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return all addressable objects sorted by database generated id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /addressable - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualAddressableData;\n    try{\n        //Parse json response\n        actualAddressableData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualAddressableData !== null) {\n        //Test response schema\n        //tests[\"Is Valid Response Schema\"] = tv4.validate(actualAddressableData, data.objectSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = actualAddressableData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "0bb9b519-f7d9-21d1-9b3e-f72d4ef32157",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/schedule",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case: /schedule - POST\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Verify the http status code for 200.\ntests[\"Status code is 409\"] = responseCode.code === 409;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475826343055,
      "name": "273 http://localhost:48081/api/v1/schedule",
      "description": "Add a new Schedule - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the cron expression string is not properly formatted.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{\"origin\":1471806386919,\"name\":\"daily noon\",\"cron\":\"0 0 12 * * :\"} \r\n"
    },
    {
      "id": "0bddb36d-ea19-9e1a-4b93-d6a98768d9be",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/{{provisionWatcherGetRequestId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher/:id - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        //Test body parameters\n        var actualProvisionWatcherData;\n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualProvisionWatcherData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualProvisionWatcherData.length !== 0) {\n                tests[\"Is valid response schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherObjectSchema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"ProvisionWatcher is empty.\");\n                tests[\"Is ProvisionWatcher empty\"] = actualProvisionWatcherData.length === 0;\n            }\n        }\n    }\n}\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475823737534,
      "name": "283 http://localhost:48081/api/v1/provisionwatcher/:id",
      "description": "Fetch a specific provision watcher by database generated id. May return null if no provision watcher matches on id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "0ed5d96b-b20e-91d4-d214-e4b643ff307e",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/device",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /api/v1/device - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualDeviceData;\n    try{\n        //Parse json response\n        actualDeviceData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualDeviceData.length !== 0 ) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData,data.schema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Device list and expected list length doesnt match\");\n        tests[\"Is actual and expected Device list matching\"] = actualDeviceData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476274743620,
      "name": "62 http://localhost:48081/api/v1/device",
      "description": "Return all devices sorted by id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "0ef85fde-e982-fc3b-c397-9a46a3e3a7fb",
      "folder": "1977af90-d6e1-0afa-4e8a-7e518269e1de",
      "name": "05 http://localhost:48081/api/v1/device/name/:name/opstate/{opState}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the op status time of the device by unique name of the device. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the name provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/name/{{getDeviceName}}/opstate/{{updateOpState}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/name/:name/opstate/{opState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Device updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "0f7e7d86-9b9d-e567-7ec3-317a08d729eb",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/devicereport",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "PUT",
      "data": null,
      "dataMode": "params",
      "tests": null,
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476359750472,
      "name": "185 http://localhost:48081/api/v1/devicereport",
      "description": "Add a new DeviceReport - name must be unique. Referenced objects (device, schedule event) are all referenced in the new DeviceReport by name and must already be persisted. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if any referenced object cannot be found by its provided name.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "folder": "2fc58258-1ef4-28b4-bddc-c7bae2270db4",
      "id": "1181ecba-98bc-49e8-5bb5-fa1bf2d493e6",
      "name": "318 http://localhost:48081/api/v1/addressable/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the Addressable designated by unique name identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided name is found.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable/name/{{addressableDelRequestName}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /addressable/name/:name - DEL\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//If request success with response code is 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test Response time\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var actualAddressableData = JSON.parse(responseBody);\n    if(actualAddressableData.length !== 0){\n        tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "id": "11b7c3c9-fbf3-beeb-b81a-be5c023be4a9",
      "name": "355 http://localhost:48081/api/v1/deviceservice",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n  \"origin\":1471806386920,\r\n  \"name\":\"home thermostat deviceservice\",\r\n  \"description\":\"manage homethermostats\",\r\n  \"labels\":[\r\n    \"hvac\",\"thermostat\"\r\n    ],\r\n  \"adminState\":\"UNLOCKED\",\r\n  \"operatingState\":\"ENABLED\",\r\n  \"addressable\":{\r\n    \"name\":\"hvac thermo address\"\r\n    }\r\n}",
      "descriptionFormat": null,
      "description": "Update the DeviceServcie identified by the id or name stored in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"DeviceService updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "11e4d33b-8113-3403-ba19-d60a61f58a99",
      "folder": "ae7fe7c5-a4a7-a985-6272-a79f9b671e5f",
      "name": "160 http://localhost:48081/api/v1/deviceprofile",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\n    \"id\": \"57f4995be4b060e268aeb085\",\n    \"description\": \"Test DeviceProfile after PUT\",\n    \"commands\": [\n      {\n        \"id\": \"57f4995be4b060e268aeb084\",\n        \"get\": {\n          \"response\": {\n            \"errorDescription\": \"Integer Value\",\n            \"expectedValues\": \"temperature\"\n          }\n        },\n        \"put\": {\n          \"response\": {\n            \"errorDescription\": \"Integer Value\",\n            \"expectedValues\": \"temperature\"\n          }\n        }\n      }\n    ]\n}",
      "descriptionFormat": "html",
      "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceprofile",
      "preRequestScript": null,
      "tests": " /**\n * Test Case:  /deviceprofile - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n\n  tests[\"Status code is 200\"] = responseCode.code === 200;\n  if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Body has True\"] = responseBody === \"true\";\n        }\n  }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "1303339c-da43-28fc-c054-a75ed34d0721",
      "folder": "5990dfa5-4f89-e065-1f47-183e673f9dbd",
      "name": "339 http://localhost:48081/api/v1/command/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the Command designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Command is found with the provided id. DataValidationException (HTTP 409) if the Command is still associated to a Device Profile.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/command/id/{{commandDelRequestId}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /command/id/:id - DEL\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//If request success with response code is 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test Response time\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var actualCommandData = JSON.parse(responseBody);\n    if(actualCommandData !== 0){\n        tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "13d89e6d-499e-e67b-5ac5-79cc09437a61",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/devicereport/{{DeviceReportId}}",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "GET",
      "data": null,
      "dataMode": "params",
      "tests": null,
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476359830418,
      "name": "174 http://localhost:48081/api/v1/devicereport/{DeviceReportId}",
      "description": "Fetch a specific DeviceReport by database generated id. May return null if no report with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "14b6c482-0ffe-396b-02fe-339d8f3f9aed",
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "223 http://localhost:48081/api/v1/deviceservice/:id/lastconnected/{time}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the last connected time of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceByIdInvalidLastConnTime}}/lastconnected/{{updateByInvalidIdLastConnTime}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/:id/lastconnected/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n   }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "89288841-4790-4920-9dbf-f06fb0b44570",
      "id": "1691a46e-92e8-10a6-c4cc-a169872f7a5d",
      "name": "319 http://localhost:48081/api/v1/addressable/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the Addressable designated by unique name identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided name is found.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable/name/{{invalidAddressableGetName}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /addressable/name/:name - 404 Error - DEL \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "id": "17a2f092-fd40-bb8c-7547-7e1d1d023ac9",
      "name": "55_404 http://localhost:48081/api/v1/device/addressable/:addressableId",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all devices associated to the Addressable with the specified addressable database generated identifier. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the id provided.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/addressable/57e5fbfde4b060e2d487f244",
      "preRequestScript": "",
      "tests": "  /**\n     * Test Case: /api/v1/device/addressable/:addressableId - GET\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 404){\n        tests[\"Status code is 404\"] = responseCode.code === 404;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the value descriptor cannot be located by the identifier.\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "1a11e9ae-03ef-4afc-215d-d897640f5408",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/deviceprofile/upload",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": null,
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476359409017,
      "name": "146 http://localhost:48081/api/v1/deviceprofile/upload",
      "description": "Add a new DeviceProfile (and associated Command objects) via YAML profile file - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile. Returns ClientException (HTTP 400) if the YAML file is empty.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "rawModeData": "name: \"yaml thermostat profile\"\ndescription: \"BACnet Honeywell thermostats\"\nmanufacturer: \"Honeywell\"\nmodel: \"ABC123\"\nlabels: \n  - \"bacnet\"\n  - \"thermostat\"\n  - \"Honeywell\"\n  \ncommands:\n  - name: \"cooling point\"\n    get:\n        path: \"/cooling\"\n        responses:\n          - code: \"200\"\n            description: \"not a float\"\n            expectedValues: \n              - \"temperature\"\n    put:\n        path: \"/cooling\" \n        responses:\n          - code: \"200\"\n            description: \"not a float\"\n            expectedValues: \n              - \"temperature\"\n        parameters:\n          - name: \"coolingpoint\"\n            value: \"cooling\"\n          \n"
    },
    {
      "id": "1b578b09-3b63-bcca-6b22-888c11a1bebf",
      "folder": "5990dfa5-4f89-e065-1f47-183e673f9dbd",
      "name": "346 http://localhost:48081/api/v1/command",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{  \r\n   \"origin\":1471806386919,\r\n   \"name\":\"coolingpoint\",\r\n   \"get\":{  \r\n      \"path\":\"/cooling\",\r\n      \"response\":{  \r\n         \"code\":\"200\",\r\n         \"errorDescription\":\"not afloat\",\r\n         \"expectedValues\":\"temperature\"\r\n      }\r\n   },\r\n   \"put\":{  \r\n      \"path\":\"/cooling\"\r\n   }\r\n}\r\n",
      "descriptionFormat": "html",
      "description": "Add a new Command. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/command",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /command - POST\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time \ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n    }\n    //Test body value\n    tests[\"Is Body Conatins Id\"] = responseBody.length === 24;\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "1e4e5161-e835-03ab-d65b-cf9752f1f286",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/scheduleevent",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /scheduleevent - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475832415007,
      "name": "259 http://localhost:48081/api/v1/scheduleevent",
      "description": "Update the ScheduleEvent identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if an attempt to change the name is made when the schedule event is still being referenced by device reports. NotFoundException (HTTP 404) if no schedule is found for the identifier provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{\"id\":\"57bb5837555e5218873e5a23\",\"name\":\"namegettingchanges\",\"action\":\"http://localhost:48089/settemp\"}"
    },
    {
      "id": "23285082-e17d-c343-ac60-05b5c97e4a5f",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/scheduleevent/name/{{invalidScheduleEventName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /scheduleevent/name/:name - 404 Error - DEL\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476353371494,
      "name": "246 http://localhost:48081/api/v1/scheduleevent/name/:name",
      "description": "Remove the ScheduleEvent designated by name. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no ScheduleEvent is found with the provided name. DataValidationException (HTTP 409) if an attempt to delete a schedule event still being referenced by device reports.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "folder": "b9f10304-4f98-3922-e747-f5e603e57c2e"
    },
    {
      "id": "23563b7a-72db-32e4-0baa-87a7d16bd5bc",
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "name": "27_404 http://localhost:48081/api/v1/device/:id/adminstate/{adminState}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the admin state of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/{{InvalidId}}/adminstate/{{adminState}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/:id/adminState/{adminState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "2394d1df-319b-ec57-6507-9407a0cd4ecf",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/profilename/{{provisionWatcherGetByProfileRequestName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher/profilename/:profilename - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        //Test body parameters\n        var actualProvisionWatcherData;\n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualProvisionWatcherData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualProvisionWatcherData.length !== 0) {\n                tests[\"Is valid response schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherSchema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"ProvisionWatcher is empty.\");\n                tests[\"Is ProvisionWatcher empty\"] = actualProvisionWatcherData.length === 0;\n            }\n        }\n    }\n}\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475823789481,
      "name": "293 http://localhost:48081/api/v1/provisionwatcher/profilename/:profilename",
      "description": "Find all provision watchers associated to the DeviceProfile with the specified profile name. List may be empty if no provision watcher match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the name provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "folder": "6e14e34e-25bc-7114-b720-a39ce47fcf52",
      "id": "23be52b1-9ed2-271c-a076-8b4333ac6aa1",
      "name": "http://localhost:48081/api/v1/addressable/topic/:topic",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return Addressable objects with given topic. List may be empty if none are associated to the topic. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {
        "topic": "{{topic}}"
      },
      "url": "http://localhost:48081/api/v1/addressable/topic/:topic",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "2446cd73-a930-368f-6fa7-6ab69b4eebd6",
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "name": "24_404 http://localhost:48081/api/v1/device/:id/opstate/{opState}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the op state of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/{{InvalidId}}/opstate/{{opState}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/:id/opState/{opState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "253d49d3-e5c7-0e76-9823-2ec7824ddc53",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/scheduleevent/name/{{invalidScheduleEventName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/**\n * Test Case:  /api/v1/scheduleevent/name/:name - DELETE\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Failed to Dlete ScheduleEvent\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "time": 1476353371494,
      "name": "247 http://localhost:48081/api/v1/scheduleevent/name/:name",
      "description": "Remove the ScheduleEvent designated by name. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no ScheduleEvent is found with the provided name. DataValidationException (HTTP 409) if an attempt to delete a schedule event still being referenced by device reports.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "folder": "b9f10304-4f98-3922-e747-f5e603e57c2e"
    },
    {
      "id": "26aec855-342b-aceb-fa16-e6801dba0631",
      "folder": "093bf479-db55-a54e-f469-eb5bd2acf918",
      "name": "340 http://localhost:48081/api/v1/command/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the Command designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Command is found with the provided id. DataValidationException (HTTP 409) if the Command is still associated to a Device Profile.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/command/id/{{commandDelRequestIderr}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /command - 409 Error - DEL \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 409\ntests[\"Status code is 409\"] = responseCode.code === 409;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "2befa6b4-40b7-a749-20f1-52e90e68db84",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "189 http://localhost:48081/api/v1/deviceservice/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the DeviceService designated by database generated id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/id/{{deleteDeviceServiceById}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/id/:id - DELETE\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Record Deleted\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Request Object Deleted\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "2cbe3c96-bf83-27c2-7fbe-1b072bfc78c8",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/deviceprofile/{{dpById}}",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "GET",
      "data": null,
      "dataMode": "params",
      "tests": "/**\n * Test Case:  /deviceprofile/manufacturer/{{dpByManufacturerName}} - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var responseDeviceProfileData;\n    try{\n        //Parse json response\n        responseDeviceProfileData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(responseDeviceProfileData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(responseDeviceProfileData, data.deviceProfileSchemaObject);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = responseDeviceProfileData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476876069197,
      "name": "144 http://localhost:48081/api/v1/deviceprofile/{DeviceProfileId}",
      "description": "Fetch a specific profile by database generated id. May return null if no profile with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "2cfca44a-2100-57d2-66e2-c3277f09be31",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/devicereport",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "GET",
      "data": null,
      "dataMode": "params",
      "tests": null,
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476359766189,
      "name": "188 http://localhost:48081/api/v1/devicereport",
      "description": "Add a new DeviceReport - name must be unique. Referenced objects (device, schedule event) are all referenced in the new DeviceReport by name and must already be persisted. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if any referenced object cannot be found by its provided name.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "6e14e34e-25bc-7114-b720-a39ce47fcf52",
      "id": "33ab13db-6f4c-bdfd-8f77-b61a13f7a825",
      "name": "http://localhost:48081/api/v1/addressable",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return all addressable objects sorted by database generated id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "http://localhost:48081/api/v1/addressable",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "3589cec9-a6c6-2cbf-4880-34cf4c31bf05",
      "folder": "89288841-4790-4920-9dbf-f06fb0b44570",
      "name": "334 http://localhost:48081/api/v1/addressable",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n    \"id\": \"aaaaaaaaa123aaaaaaaaaaaa\",\r\n    \"created\": 1475556860463,\r\n    \"modified\": 1475556860463,\r\n    \"origin\": 1471806386924,\r\n    \"name\": \"gasmeter\",\r\n    \"protocol\": \"HTTP\",\r\n    \"address\": \"172.17.0.6\",\r\n    \"port\": 48093,\r\n    \"path\": \"/gasmeter\",\r\n    \"publisher\": \"DELLPUB\",\r\n    \"user\": \"test\",\r\n    \"password\": \"test123\",\r\n    \"topic\": \"kWhData\"\r\n}",
      "descriptionFormat": "html",
      "description": "Update the Addressable identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided id is found.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /addressable - 404 Error - PUT \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "364eb618-dd40-c398-d82e-ad9302a3e3cb",
      "folder": "5990dfa5-4f89-e065-1f47-183e673f9dbd",
      "name": "344 http://localhost:48081/api/v1/command/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return Command objects with given name. Name is not unique for all of Fuse but is unique per any associated Device Profile. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/command/name/{{commandGetRequestName}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /command/name/:name - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualCommandData;\n    try{\n        //Parse json response\n        actualCommandData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualCommandData !== null) {\n        //Test response schema\n       // tests[\"Is Valid Response Schema\"] = tv4.validate(actualCommandData, data.objectSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = actualCommandData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "3873da8f-b48b-cf94-a9e2-0c87daa86041",
      "folder": "ae7fe7c5-a4a7-a985-6272-a79f9b671e5f",
      "name": "149 http://localhost:48081/api/v1/deviceprofile/yaml/name/{DeviceProfileName}",
      "dataMode": "params",
      "data": null,
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return, in yaml form, the DeviceProfiles matching given name (profile names should be unique). May be null if no profiles matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceprofile/yaml/name/{{dpByName}}",
      "preRequestScript": null,
      "tests": "    /**\n     * Test Case:  /deviceprofile/yaml/name/{{dpByName}} - GET\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the device Profile cannot be located by the identifier.\n        tests[\"contains commands\"] = responseBody.has(\"commands\");\n        tests[\"contains objects\"] = responseBody.has(\"objects\");\n        tests[\"contains description\"] = responseBody.has(\"description\");\n        tests[\"contains labels\"] = responseBody.has(\"labels\");\n        tests[\"contains manufacturer\"] = responseBody.has(\"manufacturer\");\n        tests[\"contains model\"] = responseBody.has(\"model\");\n        tests[\"contains name\"] = responseBody.has(\"DeviceProfileGetByName\");\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "38e53871-2868-b399-f66e-ff51b3b31995",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/provisionwatcher",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /provisionwatcher - 409 Error - POST \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n//Verify the http status code for 200.\ntests[\"Status code is 409\"] = responseCode.code === 409;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475826154767,
      "name": "306 http://localhost:48081/api/v1/provisionwatcher",
      "description": "Add a new ProvisionWatcher - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.  Returns DataValidationException (HTTP 409) if profile service are unknown",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{  \n   \"name\":\"bacnet2 watcher\",\n   \"origin\":1471806386919,\n   \"identifiers\":{  \n      \"MAC\":\"00-05-1B-A1-99-99\",\n      \"HTTP\":\"10.0.0.1\"\n   },\n   \"profile\":{  \n      \"name\":\"variable speed motor not found\"\n   },\n   \"service\":{  \n      \"name\":\"home variable speed motor not found\"\n   }\n}"
    },
    {
      "id": "3ca87e23-a391-0b42-08e0-d201ca2111cc",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/deviceservice/{{getDeviceServiceByIdNotExist}}",
      "pathVariables": {},
      "preRequestScript": "",
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "name": "360 http://localhost:48081/api/v1/deviceservice/:id",
      "description": "Fetch a specific device service by database generated id. May return null if no service with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "descriptionFormat": "html",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/:id - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\n         }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "rawModeData": null
    },
    {
      "id": "3ebdc704-efbf-ffd3-4d6e-664d48a1bdad",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/devicereport",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "POST",
      "data": null,
      "dataMode": "params",
      "tests": null,
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476359743529,
      "name": "182 http://localhost:48081/api/v1/devicereport",
      "description": "Add a new DeviceReport - name must be unique. Referenced objects (device, schedule event) are all referenced in the new DeviceReport by name and must already be persisted. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if any referenced object cannot be found by its provided name.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "3f6e0938-2765-1007-2d15-c7e99faaf494",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "224 http://localhost:48081/api/v1/deviceservice/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Fetch a specific device service by database generated id. May return null if no service with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/{{getDeviceServiceById}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/:id - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n       tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var deviceService;\n        try{\n            //Parse json response\n            deviceService = JSON.parse(responseBody);\n        }catch(e) {\n            console.log(\"Exception while parsing json response\");\n        }\n        if(responseBody !== null){\n            tests[\"Is Valid Response Schema\"] = tv4.validate(deviceService, data.ObjectSchema);\n        } else {\n            tests[\"DeviceService list empty\"] = deviceService.length === 0\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "3f7a1fa6-48b8-d083-d6bb-a0075696bd05",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/devicereport/devicename/{{DeviceName}}",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "GET",
      "data": null,
      "dataMode": "params",
      "tests": null,
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476359837573,
      "name": "176 http://localhost:48081/api/v1/devicereport/devicename/{DeviceName}",
      "description": "Return DeviceReports with associated device matching given name (device names should be unique). May be an empty list if no device matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "4045a5bf-a52c-ba69-97fe-f6e9000fac10",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/id/{{invalidProvisionWatcherId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher/id/:id - 404 Error - DEL \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475823965628,
      "name": "281 http://localhost:48081/api/v1/provisionwatcher/id/:id",
      "description": "Remove the ProvisionWatcher designated by the database generated id for the ProvisionWatcher. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no provision watcher with the provided id is found.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "folder": "2fc58258-1ef4-28b4-bddc-c7bae2270db4",
      "id": "405fc7af-b8e7-d431-c5ec-cdc85263b127",
      "name": "316 http://localhost:48081/api/v1/addressable/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Fetch a specific addressable by database generated id. May return null if no addressable matches on id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable/{{addressableGetRequestId}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /addressable/:id - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualAddressableData;\n    try{\n        //Parse json response\n        actualAddressableData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualAddressableData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualAddressableData, data.objectSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = actualAddressableData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "6e14e34e-25bc-7114-b720-a39ce47fcf52",
      "id": "40a3501c-5c56-96ed-b371-6c471e251a86",
      "name": "http://localhost:48081/api/v1/addressable/port/:port",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return Addressable objects with given port. List may be empty if none are associated to the port. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {
        "port": "{{port}}"
      },
      "url": "http://localhost:48081/api/v1/addressable/port/:port",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "2fc58258-1ef4-28b4-bddc-c7bae2270db4",
      "id": "418c9998-a158-8e11-ddb1-cf23d00785fe",
      "name": "313 http://localhost:48081/api/v1/addressable/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the Addressable designated by the database generated id for the Addressable. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided id is found.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable/id/{{addressableDelRequestId}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /addressable/id/:id - DEL\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//If request success with response code is 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test Response time\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var actualAddressableData = JSON.parse(responseBody);\n    if(actualAddressableData.length !== 0){\n        tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "4194664b-113d-7c96-f05e-fed0ef661262",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/deviceprofile/name/{{dpByName}}",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "GET",
      "data": null,
      "dataMode": "params",
      "tests": "/**\n * Test Case:  /deviceprofile/manufacturer/{{dpByManufacturerName}} - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var responseDeviceProfileData;\n    try{\n        //Parse json response\n        responseDeviceProfileData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(responseDeviceProfileData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(responseDeviceProfileData, data.deviceProfileSchemaObject);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = responseDeviceProfileData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476876175365,
      "name": "138 http://localhost:48081/api/v1/deviceprofile/name/{profileName}",
      "description": "Return the DeviceProfile matching given name (profile names should be unique). May be null if no profiles matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "429b735b-81b9-ef8b-924e-b4be3fc3761b",
      "folder": "093bf479-db55-a54e-f469-eb5bd2acf918",
      "name": "349 http://localhost:48081/api/v1/command",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\n    \"id\": \"aaaaaaaa123aaaaaaaaaabbf\",\n    \"name\": \"current\",\n    \"put\": {\n      \"path\": \"/current\"\n    }\n}",
      "descriptionFormat": "html",
      "description": "Update the Command identified by the database generated id in the object provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Command is found with the provided id. DataValidationException (HTTP 409) if the name is updated and it is not unique for the Device Profile.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/command",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /command - 404 Error - PUT \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "6e14e34e-25bc-7114-b720-a39ce47fcf52",
      "id": "43265df8-70af-460d-9c43-652259dd1346",
      "name": "http://localhost:48081/api/v1/addressable",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\"origin\":1471806386921,\r\n\"name\":\"hvac thermo address\",\r\n\"protocol\":\"HTTP\",\r\n\"address\":\"172.17.0.1\",\r\n\"port\":48089,\r\n\"path\":\"/livingroomthermostat\",\r\n\"publisher\":\"none\",\r\n\"user\":\"none\",\r\n\"password\":\"none\",\r\n\"topic\":\"none\"}",
      "descriptionFormat": "html",
      "description": "Add a new Addressable - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "49f4a9ca-4524-bc2e-82c9-5c234d058f7f",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "195 http://localhost:48081/api/v1/deviceservice/name/:name/opstate/{opState}",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "",
      "descriptionFormat": "html",
      "description": "Update the op status time of the device service by unique name of the device service. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/name/{{updateDeviceServiceOpStateByName}}/opstate/{{updateOpStateByName}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/name/:name/opstate/{opState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"DeviceService updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "6e14e34e-25bc-7114-b720-a39ce47fcf52",
      "id": "4b194702-656c-3d27-6bf7-9450713220f2",
      "name": "http://localhost:48081/api/v1/addressable/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Fetch a specific addressable by database generated id. May return null if no addressable matches on id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {
        "id": "{{id}}"
      },
      "url": "http://localhost:48081/api/v1/addressable/:id",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "4b917faf-609d-ec32-4076-74d5624c42f1",
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "228 http://localhost:48081/api/v1/deviceservice/addressable/:addressableId",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all device servicess associated to the Addressable with the specified addressable database generated identifier. List may be empty if no device service match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the id provided.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/addressable/{{getDevcieServiceByInvalideAddressableID}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/addressable/:addressableId - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n         //Test body parameters\n       }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "4c7913bc-f7d2-eda9-98cb-6a9ca111f8a2",
      "folder": "1977af90-d6e1-0afa-4e8a-7e518269e1de",
      "name": "28 http://localhost:48081/api/v1/device/:id/lastreported/{time}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the last reported time of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/{{getDeviceId}}/lastreported/{{time}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/:id/adminstate/{adminState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Device updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "4ccfd035-0ff0-b238-7323-f91107d15033",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/scheduleevent",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case: /scheduleevent - POST\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Verify the http status code for 404.\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nvar contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\ntests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n    }\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475832398580,
      "name": "254 http://localhost:48081/api/v1/scheduleevent",
      "description": "Add a new ScheduleEvent - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if the event's associated schedule is not found (referenced by name). DataValidationException (HTTP 409) if the schedule was not provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{\r\n\"origin\":1471806386919,\r\n\"name\":\"temperature collection\",\r\n\"action\":\"http://localhost:48089/gettemp\",\r\n\"actionParameters\":\"{\\\"devid\\\":\\\"57f375abe4b060e2bff6c515\\\"}\",\r\n\"schedule\":\"unassociatedschedule\"\r\n}"
    },
    {
      "id": "4deb0161-331e-2b45-83b6-681b41d6ea98",
      "folder": "1977af90-d6e1-0afa-4e8a-7e518269e1de",
      "name": "31 http://localhost:48081/api/v1/device/:id/lastconnected/{time}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the last connected time of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/{{getDeviceId}}/lastconnected/{{time}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/:id/lastconnected/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Device updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "4eab3604-7b0b-e4b2-4083-b3c215386b45",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "192 http://localhost:48081/api/v1/deviceservice/addressablename/:addressablename",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all device serices associated to the Addressable with the specified addressable name. List may be empty if no device services match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the name provided.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/addressablename/{{getDeviceServiceByAddressableName}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/addressablename/:addressablename - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n    \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n         tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n         //Test body parameters\n        var deviceService;\n        try{\n            //Parse json response\n            deviceService = JSON.parse(responseBody);\n        }catch(e) {\n            console.log(\"Exception while parsing json response\");\n        }\n        \n        if(responseBody.length >= 0) {\n         tests[\"Is Valid Response Schema\"] = tv4.validate(deviceService, data.schema);\n            console.log(\"Validation failed: \", tv4.error);\n        } else {\n            //Shows message when event list is empty\n            console.log(\"DeviceService List Empty\");\n            tests[\"DeviceService list empty\"] = deviceService.length === 0\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "4fc904fa-3f20-96ac-7eed-4eccdbfb6cb2",
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "name": "13_404 http://localhost:48081/api/v1/device/name/:name/lastreported/{time}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the last reported time of the device by unique name of the device. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the name provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/name/{{invalidDeviceName}}/lastreported/{{time}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/name/:name/lastreported/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "id": "4fcf9756-7426-7882-9571-dc1893f1574e",
      "name": "40_404 http://localhost:48081/api/v1/device/profile/:profileId",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all devices associated to the DeviceProfile with the specified profile database generated identifier. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the id provided.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/profile/89643567",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case: /api/v1/device/profile/:profileId - GET\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "50506456-b70c-0ac2-ddb8-9805ed252db8",
      "folder": "5990dfa5-4f89-e065-1f47-183e673f9dbd",
      "name": "342 http://localhost:48081/api/v1/command/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Fetch a specific command by database generated id. May return null if no commands with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/command/{{commandGetRequestId}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /command/:id - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualCommandData;\n    try{\n        //Parse json response\n        actualCommandData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualCommandData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualCommandData, data.objectSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = actualCommandData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "50718f18-0e06-9faa-bb74-448068ed4fb6",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/devicereport",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": null,
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476359623795,
      "name": "180 http://localhost:48081/api/v1/devicereport",
      "description": "Add a new DeviceReport - name must be unique. Referenced objects (device, schedule event) are all referenced in the new DeviceReport by name and must already be persisted. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if any referenced object cannot be found by its provided name.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{\r\n  \"origin\":1471806386919,\r\n  \"name\":\"livingroom collection report\",\r\n  \"device\":\"TestDeviceLinkToProfile\",\r\n  \"event\":\"temperature collection\",\r\n  \"expected\":[\"temperature\"]\r\n}"
    },
    {
      "id": "51977bae-46b4-b5c4-e5be-1991c9027d0e",
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "191 http://localhost:48081/api/v1/deviceservice/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the DeviceService designated by database generated id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/id/{{deleteDevcieServiceByInvalidId}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/id/:id - DELETE\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n */\n \n    tests[\"Record Deleted\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        }\n    ",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "id": "52524687-1df5-e1f7-950a-a0edf088e09f",
      "name": "04_404 http://localhost:48081/api/v1/device/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the Device designated by database generated id. This does not remove associated objects (addressable, service, profile, etc.). Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/id/57e5fc11e4b060e2d487f24c",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case: /api/v1/device/id/:id - DELETE\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 404){\n        tests[\"Status code is 404\"] = responseCode.code === 404;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the value descriptor cannot be located by the identifier.\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "54d59ad9-b7c4-1150-d1ec-bc7f2bc68990",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/deviceprofile/uploadfile",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "POST",
      "data": [
        {
          "key": "file",
          "value": "sample_profile_empty.yaml",
          "type": "file",
          "ENABLED": true
        }
      ],
      "dataMode": "params",
      "tests": "    /**\n     * Test Case:  /api/v1/deviceprofile - POST\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 400){\n        tests[\"Status code is 400\"] = responseCode.code === 400;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        \n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "name": "143_400 http://localhost:48081/api/v1/deviceprofile/uploadfile",
      "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile.",
      "folder": "aba3f537-ed42-b43c-bc73-0cdc3511fc74",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "descriptionFormat": null,
      "rawModeData": ""
    },
    {
      "id": "55a6f32e-7a02-3067-1620-e0c3e2b705e2",
      "folder": "31938785-a6c9-c5a6-7f36-a394e497afe2",
      "name": "169 http://localhost:48081/api/v1/devicereport/name/{DeviceReportName}",
      "dataMode": "params",
      "data": null,
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the DevicReport designated by name. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no DeviceReport is found with the provided name.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/devicereport/name/{{drPresentDelByName}}",
      "preRequestScript": null,
      "tests": "/**\n * Test Case:  /devicereport/name/{{drPresentDelByName}} - DELETE\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n  \n  tests[\"Status code is 200\"] = responseCode.code === 200;\n  if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Request Objec Deleted\"] = responseBody === \"true\";\n        }\n  }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "58422913-f072-8848-8116-a0f2777f3ed9",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/scheduleevent",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /scheduleevent - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n\n            //Validate the respose data.\n            var jsonData = JSON.parse(responseBody);\n            if(jsonData.length !== 0){\n                tests[\"Body has True\"] = responseBody === \"true\";\n            }\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475833940677,
      "name": "256 http://localhost:48081/api/v1/scheduleevent",
      "description": "Update the ScheduleEvent identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if an attempt to change the name is made when the schedule event is still being referenced by device reports. NotFoundException (HTTP 404) if no schedule is found for the identifier provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{\"id\":\"57f72b79e4b060e27309e453\",\"action\":\"http://localhost:48089/settemp\"}"
    },
    {
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "id": "5a90a271-c99b-9f4e-cdc4-572251644ab9",
      "name": "46_404 http://localhost:48081/api/v1/device/servicename/:servicename",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all devices associated to the DeviceService with the specified service name (DeviceService names must be unique). List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the name provided.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/servicename/ABC",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case: /api/v1/device/servicename/:servicename - GET\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "5ae9f986-f496-6119-d208-8a26fa1c4609",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "210 http://localhost:48081/api/v1/deviceservice/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return the DeviceService matching given name (service names should be unique). May be null if no services matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/name/{{getDeviceServiceByName}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/name/:name - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n       tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var deviceService;\n        try{\n            //Parse json response\n            deviceService = JSON.parse(responseBody);\n        }catch(e) {\n            console.log(\"Exception while parsing json response\");\n        }\n        if(responseBody.length >= 0){\n            tests[\"Is Valid Response Schema\"] = tv4.validate(deviceService, data.ObjectSchema);\n        } else {\n            tests[\"DeviceService list empty\"] = deviceService.length === 0\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "5b34a814-c9af-b16f-cf2e-ca94bc978a9d",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/device/name/{{getDeviceName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/**\n * Test Case:  /api/v1/device/name/:name - GET\n *  Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n    if(responseCode.code === 200){\n        if(responseBody.length === 0){\n            tests[\"Response body Empty\"] = responseBody === null;\n        } else{\n            var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n            \n            tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n            \n            if (contentTypeHeaderExists) {\n                tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n            }\n             //Test body parameters\n            var actualDeviceName;\n            try{\n                //Parse json response\n                actualDeviceName = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualDeviceName.length !== 0) {\n             tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceName,data.schemaObject);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                //Shows message when event list is empty\n                console.log(\"Device List Empty\");\n                tests[\"Is Device list empty\"] = actualDeviceName.length === 0\n            }\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476274581704,
      "name": "20 http://localhost:48081/api/v1/device/name/:name",
      "description": "Return Device matching given name (device names should be unique). May be null if no device matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "5c13fd49-4d33-7e41-a999-47f441b5262c",
      "folder": "aba3f537-ed42-b43c-bc73-0cdc3511fc74",
      "name": "159 http://localhost:48081/api/v1/deviceprofile",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n  \"origin\":1471806386919,\r\n  \"name\":\"TestProfileToPost\",\r\n  \"description\":\"BACnet Honeywell thermostats\",\r\n  \"manufacturer\":\"Honeywell\",\r\n  \"model\":\"ABC123\",\r\n  \"labels\":[\"bacnet\",\"thermostat\",\"Honeywell\"],\r\n  \"commands\":[\r\n    {\r\n      \"origin\":1471806386919,\r\n      \"name\":\"cooling point\",\r\n      \"get\":\r\n        {\r\n          \"path\":\"/cooling\",\r\n          \"response\":{\r\n            \"code\":\"200\",\r\n            \"errorDescription\":\"not a float\",\r\n            \"expectedValues\":\"temperature\"\r\n          }\r\n        },\r\n      \"put\":{\r\n        \"path\":\"/cooling\",\r\n        \"response\":{\r\n          \"code\":\"200\",\r\n          \"errorDescription\":\"not a float\",\r\n          \"expectedValues\":\"temperature\"\r\n        },\r\n        \"parameters\":[  \r\n               {  \r\n                  \"name\":\"coolingpoint\",\r\n                  \"value\":\"float\",\r\n                  \"uom\":\"string\"\r\n               }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      \"origin\":1471806386919,\r\n      \"name\":\"cooling point\",\r\n      \"get\":\r\n        {\r\n          \"path\":\"/cooling\",\r\n          \"response\":{\r\n            \"code\":\"200\",\r\n            \"errorDescription\":\"not a float\",\r\n            \"expectedValues\":\"temperature\"\r\n          }\r\n        },\r\n      \"put\":{\r\n        \"path\":\"/cooling\",\r\n        \"response\":{\r\n          \"code\":\"200\",\r\n          \"errorDescription\":\"not a float\",\r\n          \"expectedValues\":\"temperature\"\r\n        },\r\n        \"parameters\":[  \r\n               {  \r\n                  \"name\":\"coolingpoint\",\r\n                  \"value\":\"float\",\r\n                  \"uom\":\"string\"\r\n               }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"objects\":{\r\n    \"resources\":{\r\n      \"CurrentHumidity\":{\r\n        \"get\":[\r\n          {\r\n            \"parameter\":\"CurrentHumidity\",\r\n            \"property\":\"presentValue\",\r\n            \"operation\":\"get\",\r\n            \"object\":\"AnalogValue_22\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}",
      "descriptionFormat": "html",
      "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceprofile",
      "preRequestScript": null,
      "tests": "    /**\n     * Test Case:  /api/v1/deviceprofile - POST\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 409){\n        tests[\"Status code is 404\"] = responseCode.code === 409;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the device Profile cannot be located by the identifier.\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "5cd94895-0791-fa46-b028-e60ac4c2d6a5",
      "folder": "1977af90-d6e1-0afa-4e8a-7e518269e1de",
      "name": "59 http://localhost:48081/api/v1/device",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n  \"id\":\"57f63243e4b060e2e0dd6ed0\",\r\n  \"name\": \"livingroomthermostatdevice\",\r\n  \"description\":\"Home automation\",\r\n  \"adminstate\":\"LOCKED\"\r\n  \r\n}",
      "descriptionFormat": "html",
      "description": "Update the Device identified by the id or name stored in the object provided. Id is used first, name is used second for identification purposes. Device's service & profile cannot be updated. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  api/v1/device - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n */\n\n//If request success with response code is 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test Response time\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var jsonData = JSON.parse(responseBody);\n    if(jsonData.length !== 0){\n            tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "617ce718-f721-75c1-a2eb-635fd9a477ce",
      "folder": "2fc58258-1ef4-28b4-bddc-c7bae2270db4",
      "name": "329 http://localhost:48081/api/v1/addressable/address/:address",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return Addressable objects with given address. List may be empty if none are associated to the address. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable/address/{{addressableAdrsGetRequestName}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /addressable/address/:address - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualAddressableData;\n    try{\n        //Parse json response\n        actualAddressableData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualAddressableData !== null) {\n        //Test response schema\n        //tests[\"Is Valid Response Schema\"] = tv4.validate(actualAddressableData, data.objectSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = actualAddressableData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "bcc1e7ab-8475-500b-f0a5-cf51b7e97172",
      "id": "62aa804a-b71e-eaa2-2da9-e0d5a879bbaa",
      "name": "http://localhost:48081/api/v1/command/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Fetch a specific command by database generated id. May return null if no commands with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {
        "id": "{{id}}"
      },
      "url": "http://localhost:48081/api/v1/command/:id",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "63f3a315-ec85-2c03-fc5c-a3a32777ac27",
      "folder": "5990dfa5-4f89-e065-1f47-183e673f9dbd",
      "name": "352 http://localhost:48081/api/v1/command",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return all command objects. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/command",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /command - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualCommandData;\n    try{\n        //Parse json response\n        actualCommandData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualCommandData !== null) {\n        //Test response schema\n        //tests[\"Is Valid Response Schema\"] = tv4.validate(actualCommandData, data.objectSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = actualCommandData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "6551af81-a030-e534-a3a5-a67557c528e0",
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "194 http://localhost:48081/api/v1/deviceservice/addressablename/:addressablename",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all device serices associated to the Addressable with the specified addressable name. List may be empty if no device services match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the name provided.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/addressablename/{{getDevcieServiceByInvalideAddressable}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/addressablename/:addressablename - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n    \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n         tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "67820ee6-9caf-7f15-f0e7-e48af4150ac9",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/devicereport",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "GET",
      "data": null,
      "dataMode": "params",
      "tests": null,
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476359688097,
      "name": "186 http://localhost:48081/api/v1/devicereport",
      "description": "Add a new DeviceReport - name must be unique. Referenced objects (device, schedule event) are all referenced in the new DeviceReport by name and must already be persisted. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if any referenced object cannot be found by its provided name.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "6837e8e6-137f-5aa5-1643-fbba0c0b73fb",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "212 http://localhost:48081/api/v1/deviceservice/:id/opstate/{opState}",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "",
      "descriptionFormat": "html",
      "description": "Update the op state of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceOpStateByID}}/opstate/{{updateDeviceServiceOpState}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/:id/opstate/{opState} - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"DeviceService updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "68b9e9ea-7a96-c539-0681-63a2e8b20200",
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "name": "33_404 http://localhost:48081/api/v1/device/:id/lastconnected/{time}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the last connected time of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/{{InvalidId}}/lastconnected/{{time}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/:id/lastconnected/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "34eb3374-e267-8069-2167-a7960fa4be93",
      "id": "6903205a-9f90-f8c6-34f9-1d6f0e4507bf",
      "name": "01 http://localhost:48081/api/v1/ping",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "ping",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/ping",
      "preRequestScript": "",
      "tests": " /**\n * Test Case:  /api/v1/ping - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n * \n **/\n \n tests[\"Ping Success\"] = responseCode.code === 200;\n tests[\"Response time is less than 200ms\"] = responseTime < 200;\n if(responseCode.code === 200){\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        if(responseBody.length!== 0){\n            tests[\"Body is correct\"] = responseBody === \"pong\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "6a975457-bd66-84a2-908b-ee0deb8af39e",
      "folder": "ae7fe7c5-a4a7-a985-6272-a79f9b671e5f",
      "name": "128 http://localhost:48081/api/v1/deviceprofile/id/{DeviceProfileId}",
      "dataMode": "params",
      "data": null,
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the DeviceProfile designated by database generated id. This does not remove associated commands. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device profile cannot be found by the identifier provided. Returns DataValidationException (HTTP 413) if devices still reference the profile.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceprofile/id/{{dpPresentDeleteByID}}",
      "preRequestScript": null,
      "tests": "/**\n * Test Case:  /api/v1/deviceprofile/id/{{dpPresentDelete}} - DELETE\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n  \n  tests[\"Status code is 200\"] = responseCode.code === 200;\n  if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Request Objec Deleted\"] = responseBody === \"true\";\n        }\n  }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "6b423938-507b-7171-d982-a3931fd2a5ce",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/devicereport/{{valueDescriptorsFor}}/{{DeviceName}}",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "GET",
      "data": null,
      "dataMode": "params",
      "tests": null,
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476359651468,
      "name": "178 http://localhost:48081/api/v1/devicereport/{valueDescriptorsFor}/{DeviceName}",
      "description": "Return list of value descriptor names associated to device reports associated to name of the device provided. May be an empty list if no device matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "6e2467e4-1a45-443b-7a94-365debaf2e26",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/schedule/name/{{scheduleGetRequestName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /schedule/name/:name - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        //Test body parameters\n        var actualScheduleData;\n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType)) {\n            try {\n                //Parse json response\n                actualScheduleData = JSON.parse(responseBody);\n            } catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualScheduleData.length !== 0) {\n                tests[\"Is valid response schema\"] = tv4.validate(actualScheduleData, data.scheduleSchema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"Scheule is empty.\");\n                tests[\"Is schedule empty\"] = actualScheduleData.length === 0;\n            }\n        }\n    }\n}\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476448461973,
      "name": "269 http://localhost:48081/api/v1/schedule/name/:name",
      "description": "Return Schedule matching given name (schedule names should be unique). May be null if no schedule matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "folder": "89288841-4790-4920-9dbf-f06fb0b44570",
      "id": "6ed8338b-ff1c-3bfd-722c-de21b95f23a5",
      "name": "314 http://localhost:48081/api/v1/addressable/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the Addressable designated by the database generated id for the Addressable. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided id is found.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable/id/{{invalidAddressableGetId}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /addressable/id/:id - 404 Error - DEL \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "6f6ca8f2-e2a3-2284-2b12-773b693346b7",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/device/{{getDeviceId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test api : /api/v1/device/{{deviceId}}\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n */\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualDeviceData;\n    try{\n        //Parse json response\n        actualDeviceData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualDeviceData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData, data.schemaObject);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Reading is empty.\");\n        tests[\"Is Reading empty\"] = actualDeviceData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476274371204,
      "name": "34 http://localhost:48081/api/v1/device/:id",
      "description": "Fetch a specific device by database generated id. May return null if no device with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "705d3b44-3380-1422-536b-199a73ec9343",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "226 http://localhost:48081/api/v1/deviceservice/addressable/:addressableId",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all device servicess associated to the Addressable with the specified addressable database generated identifier. List may be empty if no device service match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the id provided.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/addressable/{{getDeviceServiceByAddressableId}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/addressable/:addressableId - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n         //Test body parameters\n        var deviceService;\n        try{\n            //Parse json response\n            deviceService = JSON.parse(responseBody);\n        }catch(e) {\n            console.log(\"Exception while parsing json response\");\n        }\n        \n        if(responseBody.length >= 0) {\n         tests[\"Is Valid Response Schema\"] = tv4.validate(deviceService, data.schema);\n            console.log(\"Validation failed: \", tv4.error);\n        } else {\n            //Shows message when event list is empty\n            console.log(\"Valuedescriptor List Empty\");\n            tests[\"DeviceService list empty\"] = deviceService.length === 0\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "70b0ce9c-8e08-7047-cf95-0ee9573a5b06",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/schedule",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /schedule - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n\n            //Validate the respose data.\n            var jsonData = JSON.parse(responseBody);\n            if(jsonData.length !== 0){\n                tests[\"Body has True\"] = responseBody === \"true\";\n            }\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475826214259,
      "name": "274 http://localhost:48081/api/v1/schedule",
      "description": "Update the Schedule identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP // 409) if any the cron expression string is not properly formatted. NotFoundException (HTTP 404) if no schedule is found for the id.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{\"id\":\"57f49350e4b060e2bff6c52d\",\"start\":1503360000,\"end\":1503390000,\"frequency\":60000}"
    },
    {
      "folder": "bcc1e7ab-8475-500b-f0a5-cf51b7e97172",
      "id": "721db23d-e80e-8ed6-4cd0-a058085d020b",
      "name": "http://localhost:48081/api/v1/command",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return all command objects. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "http://localhost:48081/api/v1/command",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "723f6405-dfe4-8598-eccb-f0d514df3832",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/service/{{invalidServiceId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher/provisionwatcher/service/:serviceId - 404 Error - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475826120940,
      "name": "298 http://localhost:48081/api/v1/provisionwatcher/service/:serviceId",
      "description": "Find the provision watchers associated to the DeviceService with the specified service database generated identifier. List may be empty if no provision watchers match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the id provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "729914e9-c80b-727b-8db3-1ac9aa3092ca",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/schedule",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /schedule - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475826265537,
      "name": "276 http://localhost:48081/api/v1/schedule",
      "description": "Update the Schedule identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP // 409) if any the cron expression string is not properly formatted. NotFoundException (HTTP 404) if no schedule is found for the id.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{\"id\":\"57bb49e6555e5218873e5a1b\",\"start\":1503360000,\"end\":1503390000,\"frequency\":60000, \"cron\":\"0 0 13 * * :\"}"
    },
    {
      "id": "731c02c2-1393-2e44-68ad-e5493e460f9e",
      "folder": "ae7fe7c5-a4a7-a985-6272-a79f9b671e5f",
      "name": "134 http://localhost:48081/api/v1/deviceprofile/name/{profileName}",
      "dataMode": "params",
      "data": null,
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the DeviceProfile designated by unique name. This does not remove associated commands. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device profile cannot be found by the name provided. Returns DataValidationException (HTTP 413) if devices still reference the profile.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceprofile/name/{{dpPresentDeleteByName}}",
      "preRequestScript": null,
      "tests": "/**\n * Test Case:  /deviceprofile/name/{{dpPresentDeleteByName}} - DELETE\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n  \n  tests[\"Status code is 200\"] = responseCode.code === 200;\n  if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Request Objec Deleted\"] = responseBody === \"true\";\n        }\n  }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "73d6a92a-2a36-e287-0f95-4dd82a30e326",
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "209 http://localhost:48081/api/v1/deviceservice/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the DeviceService designated by name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/name/{{deleteServiceServiceByInvalidName}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/name/:name - DELETE\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        }\n",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "748abea6-c624-4226-c776-ca84e89eed19",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "229 http://localhost:48081/api/v1/deviceservice/label/:label",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all DeviceServices having at least one label matching the label provided. List may be empty if no device services match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/label/{{getDeviceServiceByLabel}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /api/v1/deviceservice/label/:label - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n         //Test body parameters\n        var deviceService;\n        try{\n            //Parse json response\n            deviceService = JSON.parse(responseBody);\n        }catch(e) {\n            console.log(\"Exception while parsing json response\");\n        }\n        \n        if(responseBody.length >= 0) {\n         tests[\"Is Valid Response Schema\"] = tv4.validate(deviceService, data.schema);\n            console.log(\"Validation failed: \", tv4.error);\n        } else {\n            //Shows message when event list is empty\n            console.log(\"Valuedescriptor List Empty\");\n            tests[\"DeviceService list empty\"] = deviceService.length === 0\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "7768f36e-ce1d-c16e-69f8-8dc772a9a19f",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/id/{{provisionWatcherDelRequestId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher/id/:id - DEL\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var jsonData = JSON.parse(responseBody);\n    if(jsonData.length !== 0){\n        tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475823724302,
      "name": "280 http://localhost:48081/api/v1/provisionwatcher/id/:id",
      "description": "Remove the ProvisionWatcher designated by the database generated id for the ProvisionWatcher. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no provision watcher with the provided id is found.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "77bc8198-a47b-dd81-ae78-07f11b0b2fb8",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/name/{{invalidProvisionWatcherName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher/name/:name - 404 Error - DEL \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475826088146,
      "name": "286 http://localhost:48081/api/v1/provisionwatcher/name/:name",
      "description": "Remove the ProvisionWatcher designated by unique name identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no provision watcher with the provided name is found.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "77c2a8d6-30e6-1547-9bf6-4d8e51ecd0be",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "198 http://localhost:48081/api/v1/deviceservice/name/:name/adminstate/{adminState}",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "",
      "descriptionFormat": "html",
      "description": "Update the admin state of the device service by device service name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/name/{{updateDeviceServiceByNameAdminState}}/adminstate/{{updateAdminStateByName}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/name/:name/adminstate/{adminState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"DeviceService updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "781ee22e-e4cf-292b-b16d-1629ec6eb15c",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/scheduleevent",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case: /scheduleevent - POST\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for text/plain.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n    }\n    \n    //Validate the body for Id\n    tests[\"Does body contains Id\"] = responseBody.length === 24;\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475833882491,
      "name": "252 http://localhost:48081/api/v1/scheduleevent",
      "description": "Add a new ScheduleEvent - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if the event's associated schedule is not found (referenced by name). DataValidationException (HTTP 409) if the schedule was not provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{\r\n  \"origin\":1471806386919,\r\n\"name\":\"variable speed motor collection\",\r\n\"action\":\"http://localhost:48089/getrpm\",\r\n\"actionParameters\":\"{\\\"devid\\\":\\\"57f35577e4b060e27b9d5f6f\\\"}\",\r\n\"schedule\":\"half-hourly\",\r\n\"addressable\":{\"name\": \"tachometer address\"}\r\n}"
    },
    {
      "id": "792bdf2c-0e3d-099c-ccf3-850e3866446f",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/schedule/name/{{scheduleDelRequestName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /schedule/name/:name - DEL\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var jsonData = JSON.parse(responseBody);\n    if(jsonData.length !== 0){\n        tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475826202350,
      "name": "267 http://localhost:48081/api/v1/schedule/name/:name",
      "description": "Remove the Schedule designated by name. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Schedule is found with the provided name.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "id": "7b129ecd-ddda-25c5-f333-238a9d862b36",
      "name": "19_404 http://localhost:48081/api/v1/device/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the Device designated by unique name. This does not remove associated objects (addressable, service, profile, etc.). Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/name/livingroomthermostat12",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case:  /api/v1/device/name/{name} - DELETE\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "7b2a87f4-44ba-8953-c692-648338ebd2a1",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "215 http://localhost:48081/api/v1/deviceservice/:id/adminstate/{adminState}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the admin state of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceAdminStateByID}}/adminstate/{{updateDeviceServiceAdminState}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/:id/adminState/{adminState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"DeviceService updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "7bfc36cc-75c4-414b-b0a0-b6b676cbbf7e",
      "folder": "1977af90-d6e1-0afa-4e8a-7e518269e1de",
      "name": "22 http://localhost:48081/api/v1/device/:id/opstate/{opState}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the op state of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/{{getDeviceId}}/opstate/{{updateOpState}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/:id/opState/{opState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Device updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "7c53f74a-5df5-b1ba-09b6-93e3e7382c44",
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "name": "30_404 http://localhost:48081/api/v1/device/:id/lastreported/{time}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the last reported time of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/{{InvalidId}}/lastreported/{{time}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/:id/lastreported/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType)\n            }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "7dea1e16-74bb-a1cb-6530-5537bc575ab5",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/provisionwatcher",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /provisionwatcher - 404 Error - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475826143600,
      "name": "308 http://localhost:48081/api/v1/provisionwatcher",
      "description": "Update the ProvisionWatcher identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no provision watcher with the provided id is found.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{\"name\":\"invalid watcher\", \"origin\":14718063870000}"
    },
    {
      "id": "7f661474-620a-17e1-aba2-9ac141d2d0b6",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/deviceprofile",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": "/**\n * Test Case:  /api/v1/deviceprofile - POST\n * Version: Alpha\n * Services: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n\n    tests[\"DeviceProfile Created\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        if(null !== responseBody){\n            tests[\"Response Object id\"] = responseBody.length === 24;\n        } else{\n            tests[\"Response list is empty\"] = responseBody.length === 0\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476875105685,
      "name": "157 http://localhost:48081/api/v1/deviceprofile",
      "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{\r\n  \"origin\":1471806386919,\r\n  \"name\":\"TestProfileToPostUniqe\",\r\n  \"description\":\"BACnet Honeywell thermostats\",\r\n  \"manufacturer\":\"Honeywell\",\r\n  \"model\":\"ABC123\",\r\n  \"labels\":[\"bacnet\",\"thermostat\",\"Honeywell\"],\r\n  \"commands\":[\r\n    {\r\n      \"origin\":1471806386919,\r\n      \"name\":\"cooling point\",\r\n      \"get\":\r\n        {\r\n          \"path\":\"/cooling\",\r\n          \"response\":{\r\n            \"code\":\"200\",\r\n            \"errorDescription\":\"not a float\",\r\n            \"expectedValues\":\"temperature\"\r\n          }\r\n        },\r\n      \"put\":{\r\n        \"path\":\"/cooling\",\r\n        \"response\":{\r\n          \"code\":\"200\",\r\n          \"errorDescription\":\"not a float\",\r\n          \"expectedValues\":\"temperature\"\r\n        },\r\n        \"parameters\":[  \r\n               {  \r\n                  \"name\":\"coolingpoint\",\r\n                  \"value\":\"float\",\r\n                  \"uom\":\"string\"\r\n               }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"objects\":{\r\n    \"resources\":{\r\n      \"CurrentHumidity\":{\r\n        \"get\":[\r\n          {\r\n            \"parameter\":\"CurrentHumidity\",\r\n            \"property\":\"presentValue\",\r\n            \"operation\":\"get\",\r\n            \"object\":\"AnalogValue_22\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}"
    },
    {
      "folder": "6e14e34e-25bc-7114-b720-a39ce47fcf52",
      "id": "7f8b57f4-8a29-4bc4-011f-aa054793c0f1",
      "name": "http://localhost:48081/api/v1/addressable/address/:address",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return Addressable objects with given address. List may be empty if none are associated to the address. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {
        "address": "{{address}}"
      },
      "url": "http://localhost:48081/api/v1/addressable/address/:address",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "8057ab3f-d022-5a0b-8d0b-3267a833eeb3",
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "220 http://localhost:48081/api/v1/deviceservice/:id/lastreported/{time}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the last reported time of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceByIdInvalidLastRepTime}}/lastreported/{{updateByInvalidIdLastRepTime}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/:id/lastreported/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "813b8501-c57f-b144-4bbf-b4cfb837fa73",
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "name": "58_409 http://localhost:48081/api/v1/device",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{  \r\n   \"origin\":1471806386919,\r\n   \"name\":\"Amazon Tap\",\r\n   \"description\":\" Portable voice controlled speaker\",\r\n   \"adminstate\":\"UNLOCKED\",\r\n   \"operatingState\":\"ENABLED\",\r\n   \"addressable\":{  \r\n      \"name\":\"\"\r\n   },\r\n   \"labels\":[  \r\n      \"home\",\r\n      \"hvac\",\r\n      \"thermostat\"\r\n   ],\r\n   \"location\":\"{lat:45.45,long:47.80}\",\r\n   \"responseDelay\":0,\r\n   \"service\":{  \r\n      \"name\":\"home thermostat device service\"\r\n   },\r\n   \"profile\":{  \r\n      \"name\":\"thermostat profile\"\r\n   }\r\n}",
      "descriptionFormat": null,
      "description": "Add a new Device - name must be unique. Embedded objects (device, service, profile, addressable) are all referenced in the new Device object by id or name to associated objects. All other data in the embedded objects will be ignored. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated object (Addressable, Profile, Service) cannot be found with the id or name provided.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case:  /api/v1/device - POST\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    tests[\"Status code is 409\"] = responseCode.code === 409;\n    if(responseCode.code === 409){\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n           }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "815d9a82-62ad-f57f-007c-b24e05dd1efd",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/profile/{{invalidProfileId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  provisionwatcher/profile/{profileId} - 404 Error - GET \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475826098781,
      "name": "292 http://localhost:48081/api/v1/provisionwatcher/profile/:profileId",
      "description": "Find all provision watchers associated to the DeviceProfile with the specified profile database generated identifier. List may be empty if no provision watchers match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the id provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "89385bcc-5f68-87f1-69cd-a97cd8633b2a",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/profile/{{provisionWatcherGetByProfileRequestId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher/profile/:profileId - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        //Test body parameters\n        var actualProvisionWatcherData;\n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualProvisionWatcherData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualProvisionWatcherData.length !== 0) {\n                tests[\"Is valid response schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherSchema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"ProvisionWatcher is empty.\");\n                tests[\"Is ProvisionWatcher empty\"] = actualProvisionWatcherData.length === 0;\n            }\n        }\n    }\n}\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475823775854,
      "name": "290 http://localhost:48081/api/v1/provisionwatcher/profile/:profileId",
      "description": "Find all provision watchers associated to the DeviceProfile with the specified profile database generated identifier. List may be empty if no provision watchers match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the id provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "89804d11-29c7-a6c6-6d96-68f7439521db",
      "folder": "aba3f537-ed42-b43c-bc73-0cdc3511fc74",
      "name": "162 http://localhost:48081/api/v1/deviceprofile",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\n    \"id\": \"57f4995be4b060e268aeb000\",\n    \"description\": \"Test DeviceProfile after PUT\",\n    \"commands\": [\n      {\n        \"id\": \"57f4995be4b060e268aeb084\",\n        \"get\": {\n          \"response\": {\n            \"errorDescription\": \"Integer Value\",\n            \"expectedValues\": \"temperature\"\n          }\n        },\n        \"put\": {\n          \"response\": {\n            \"errorDescription\": \"Integer Value\",\n            \"expectedValues\": \"temperature\"\n          }\n        }\n      }\n    ]\n}",
      "descriptionFormat": "html",
      "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceprofile",
      "preRequestScript": null,
      "tests": "    /**\n     * Test Case:  /deviceprofile - PUT\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 404){\n        tests[\"Status code is 404\"] = responseCode.code === 404;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "8993629e-b9bd-9857-727b-fcc30d48aa7a",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/device/label/{{getDeviceLabelName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/**\n * Test Case:  /api/v1/device/label/:label - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n    if(responseCode.code === 200){\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n         //Test body parameters\n        var actualDeviceData;\n        try{\n            //Parse json response\n            actualDeviceData = JSON.parse(responseBody);\n        }catch(e) {\n            console.log(\"Exception while parsing json response\");\n        }\n        \n        if(actualDeviceData.length !== 0) {\n         tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData, data.schema);\n            console.log(\"Validation failed: \", tv4.error);\n        } else {\n            //Shows message when event list is empty\n            console.log(\"Device List Empty\");\n            tests[\"Is Device list empty\"] = actualDeviceData.length === 0\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476274964176,
      "name": "36 http://localhost:48081/api/v1/device/label/:label",
      "description": "Find all Devices having at least one label matching the label provided. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "8b3b028d-755b-9730-c9b9-5e5f48511602",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/devicereport",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "PUT",
      "data": null,
      "dataMode": "params",
      "tests": null,
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476359666176,
      "name": "183 http://localhost:48081/api/v1/devicereport",
      "description": "Add a new DeviceReport - name must be unique. Referenced objects (device, schedule event) are all referenced in the new DeviceReport by name and must already be persisted. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if any referenced object cannot be found by its provided name.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "8d253ce2-62bb-4e3b-f7fa-f334fada82d9",
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "197 http://localhost:48081/api/v1/deviceservice/name/:name/opstate/{opState}",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "",
      "descriptionFormat": "html",
      "description": "Update the op status time of the device service by unique name of the device service. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/name/{{updateDeviceServiceByInvalidOpState}}/opstate/{{updateInvalidOpState}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/name/:name/opstate/{opState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "8ea5402c-aa63-e232-6288-7828d84745d1",
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "name": "61_404 http://localhost:48081/api/v1/device",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n  \"id\":\"57bc6d80555e5218873e5a30\",\r\n  \"description\":\"living room thermostat\",\r\n  \"adminstate\":\"LOCKED\"\r\n  \r\n}",
      "descriptionFormat": "html",
      "description": "Update the Device identified by the id or name stored in the object provided. Id is used first, name is used second for identification purposes. Device's service & profile cannot be updated. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "8eeeaf49-6eb0-dfd9-a3b1-f9a30312826a",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/provisionwatcher",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /provisionwatcher - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n //Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n\n            //Validate the respose data.\n            var jsonData = JSON.parse(responseBody);\n            if(jsonData.length !== 0){\n                tests[\"Body has True\"] = responseBody === \"true\";\n            }\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475823847176,
      "name": "307 http://localhost:48081/api/v1/provisionwatcher",
      "description": "Update the ProvisionWatcher identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no provision watcher with the provided id is found.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{\"name\":\"modbus watcher\", \"origin\":14718063870000}"
    },
    {
      "id": "8f079a0f-73cb-6d9c-e0e3-d1b1bdec5d18",
      "folder": "1977af90-d6e1-0afa-4e8a-7e518269e1de",
      "name": "56 http://localhost:48081/api/v1/device",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{  \r\n   \"origin\":1471806386919,\r\n   \"name\" :\"AWS IOT Button\",\r\n   \"description\":\"Home automation system\",\r\n   \"adminState\":\"UNLOCKED\",\r\n   \"operatingState\":\"ENABLED\",\r\n   \"addressable\":{  \r\n      \"name\":\"canary\"\r\n   },\r\n   \"labels\":[  \r\n      \"home\",\r\n      \"hvac\",\r\n      \"thermostat\"\r\n   ],\r\n   \"location\":\"{lat:45.45,long:47.80}\",\r\n   \"responseDelay\":0,\r\n   \"service\":{  \r\n      \"name\":\"Gogle Home device service\"\r\n   },\r\n   \"profile\":{  \r\n      \"name\":\"Google Home profile\"\r\n   }\r\n}",
      "descriptionFormat": "html",
      "description": "Add a new Device - name must be unique. Embedded objects (device, service, profile, addressable) are all referenced in the new Device object by id or name to associated objects. All other data in the embedded objects will be ignored. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated object (Addressable, Profile, Service) cannot be found with the id or name provided.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device",
      "preRequestScript": "",
      "tests": "/*\n * Test Case: /api/v1/device - POST\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n */\n \n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time \ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n    }\n    //Test body value\n    tests[\"Is Body Conatins Id\"] = responseBody.length === 24;\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "8f1f061e-637a-6608-facf-07399798c569",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/profilename/{{invalidProfileName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher/profilename/{profilename} - 404 Error - GET \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475826108237,
      "name": "295 http://localhost:48081/api/v1/provisionwatcher/profilename/:profilename",
      "description": "Find all provision watchers associated to the DeviceProfile with the specified profile name. List may be empty if no provision watcher match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the name provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "8f1fdbf6-c422-5378-4dc1-0265bf838d33",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "237 http://localhost:48081/api/v1/deviceservice",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return all device services sorted by id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n         //Test body parameters\n        var deviceService;\n        try{\n            //Parse json response\n            deviceService = JSON.parse(responseBody);\n        }catch(e) {\n            console.log(\"Exception while parsing json response\");\n        }\n        \n        if(responseBody.length >= 0) {\n         tests[\"Is Valid Response Schema\"] = tv4.validate(deviceService, data.schema);\n            console.log(\"Validation failed: \", tv4.error);\n        } else {\n            //Shows message when event list is empty\n            console.log(\"Valuedescriptor List Empty\");\n            tests[\"DeviceService list empty\"] = deviceService.length === 0\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "91ff77b3-8914-7f86-954a-84e1c7c0790e",
      "folder": "1977af90-d6e1-0afa-4e8a-7e518269e1de",
      "name": "02 http://localhost:48081/api/v1/device/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the Device designated by database generated id. This does not remove associated objects (addressable, service, profile, etc.). Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/id/{{deleteDeviceId}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case: api/v1/device/id  DELETE\n *  Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n */\n\n//If request success with response code is 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test Response time\ntests[\"Response time is less than 800 ms\"] = responseTime < 800;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var jsonData = JSON.parse(responseBody);\n    if(jsonData.length !== 0){\n        tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "92d3ee80-b4be-f911-407d-5927c4b57c27",
      "folder": "ae7fe7c5-a4a7-a985-6272-a79f9b671e5f",
      "name": "155 http://localhost:48081/api/v1/deviceprofile/label/{label}",
      "dataMode": "params",
      "data": null,
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all DeviceProfiles having at least one label matching the label provided. List may be empty if no profiles match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceprofile/label/{{dpByLable}}",
      "preRequestScript": null,
      "tests": "/**\n * Test Case:  /deviceprofile/label/{{dpByLable}} - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var responseDeviceProfileData;\n    try{\n        //Parse json response\n        responseDeviceProfileData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(responseDeviceProfileData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(responseDeviceProfileData, data.deviceProfileSchemaArray);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = responseDeviceProfileData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "94186544-43f6-9390-da92-ff54ea3980bc",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/device/service/{{getServiceId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /api/v1/device/service/:serviceId - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n */\n \n //Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualDeviceData;\n    try{\n        //Parse json response\n        actualDeviceData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualDeviceData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData, data.schema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Reading is empty.\");\n        tests[\"Is Reading empty\"] = actualDeviceData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476275143017,
      "name": "41 http://localhost:48081/api/v1/device/service/:serviceId",
      "description": "Find all devices associated to the DeviceService with the specified DeviceService database generated identifier. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the id provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "folder": "bcc1e7ab-8475-500b-f0a5-cf51b7e97172",
      "id": "947588c8-3e83-0128-34d7-a3cd33a02757",
      "name": "http://localhost:48081/api/v1/command",
      "dataMode": "raw",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the Command identified by the database generated id in the object provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Command is found with the provided id. DataValidationException (HTTP 409) if the name is updated and it is not unique for the Device Profile.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "http://localhost:48081/api/v1/command",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "96d68de6-0653-90b4-6715-30d555e2c08b",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "218 http://localhost:48081/api/v1/deviceservice/:id/lastreported/{time}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the last reported time of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceByLastReportedTimeById}}/lastreported/{{updateDeviceServiceByIdByTime}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/:id/lastreported/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"DeviceService updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "97d87997-251e-aec7-c0d8-8c485b870ea6",
      "folder": "31938785-a6c9-c5a6-7f36-a394e497afe2",
      "name": "166 http://localhost:48081/api/v1/devicereport/id/{DeviceReportId}",
      "dataMode": "params",
      "data": null,
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the DevicReport designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no DeviceReport is found with the provided id.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/devicereport/id/{{drPresentDelByID}}",
      "preRequestScript": null,
      "tests": "/**\n * Test Case:  /devicereport/id/{{drDelByID}} - DELETE\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n  \n  tests[\"Status code is 200\"] = responseCode.code === 200;\n  if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Request Objec Deleted\"] = responseBody === \"true\";\n        }\n  }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "2fc58258-1ef4-28b4-bddc-c7bae2270db4",
      "id": "9888c392-1eb2-124a-203e-d3ac04c66b50",
      "name": "333 http://localhost:48081/api/v1/addressable",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n    \"id\": \"57f335fce4b060e27b9d5f60\",\r\n    \"created\": 1475556860463,\r\n    \"modified\": 1475556860463,\r\n    \"origin\": 1471806386924,\r\n    \"name\": \"gasmeter\",\r\n    \"protocol\": \"HTTP\",\r\n    \"address\": \"172.17.0.6\",\r\n    \"port\": 48093,\r\n    \"path\": \"/gasmeter\",\r\n    \"publisher\": \"DELLPUB\",\r\n    \"user\": \"test\",\r\n    \"password\": \"test123\",\r\n    \"topic\": \"kWhData\"\r\n}",
      "descriptionFormat": "html",
      "description": "Update the Addressable identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided id is found.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /addressable - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//If request success with response code is 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test Response time\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var actualAddressableData = JSON.parse(responseBody);\n    if(actualAddressableData.length !== 0){\n        tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "99b659bf-a788-dac4-8bdb-9b3b2e98c966",
      "folder": "ae7fe7c5-a4a7-a985-6272-a79f9b671e5f",
      "name": "153 http://localhost:48081/api/v1/deviceprofile/model/{modelName}",
      "dataMode": "params",
      "data": null,
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all DeviceProfiles with a model attribute matching that provided. List may be empty if no profiles match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceprofile/model/{{dpByModel}}",
      "preRequestScript": null,
      "tests": "/**\n * Test Case:  /deviceprofile/model/{{dpByModel}} - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var responseDeviceProfileData;\n    try{\n        //Parse json response\n        responseDeviceProfileData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(responseDeviceProfileData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(responseDeviceProfileData, data.deviceProfileSchemaArray);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = responseDeviceProfileData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "6e14e34e-25bc-7114-b720-a39ce47fcf52",
      "id": "9aa8de3b-9f31-81be-cfa0-8c0b6adb8c38",
      "name": "http://localhost:48081/api/v1/addressable/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the Addressable designated by the database generated id for the Addressable. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided id is found.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {
        "id": "{{id}}"
      },
      "url": "http://localhost:48081/api/v1/addressable/id/:id",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "9ab51cfe-94ab-d4b0-03d0-c13c01a70b1a",
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "name": "10_404 http://localhost:48081/api/v1/device/name/:name/adminstate/{adminState}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the admin state of the device by device name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {
        "name": "{{name}}"
      },
      "url": "{{baseUrl}}/api/v1/device/name/:name/adminstate/{adminState}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/name/:name/adminstate/{adminState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "9b5c271e-1d0e-e172-8b91-007ec3b884dc",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "356 http://localhost:48081/api/v1/deviceservice/addressablename/hvac thermo addressT",
      "dataMode": "params",
      "data": null,
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all device serices associated to the Addressable with the specified addressable name. List may be empty if no device services match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the name provided",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/addressablename/{{getDeviceServiceByAddressableNotExist}}",
      "preRequestScript": null,
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/addressablename/:addressablename - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n         //Test body parameters\n        var deviceService;\n        try{\n            //Parse json response\n            deviceService = JSON.parse(responseBody);\n        }catch(e) {\n            console.log(\"Exception while parsing json response\");\n        }\n        \n        if(deviceService.length !== 0) {\n         tests[\"Is Valid Response Schema\"] = tv4.validate(deviceService, data.schema);\n            console.log(\"Validation failed: \", tv4.error);\n        } else {\n            //Shows message when event list is empty\n            console.log(\"DeviceService List Empty\");\n            tests[\"DeviceService list empty\"] = deviceService.length === 0\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "9e9385f5-b8e6-7bae-eba2-ada2286fe977",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/schedule/id/{{scheduleDelRequestId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /schedule/id/:id - DEL\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var jsonData = JSON.parse(responseBody);\n    if(jsonData.length !== 0){\n        tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475826169835,
      "name": "263 http://localhost:48081/api/v1/schedule/id/:id",
      "description": "Remove the Schedule designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Schedule is found with the provided id.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "9f5eea23-10df-6687-95c6-f1b163514de3",
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "name": "16_404 http://localhost:48081/api/v1/device/name/:name/lastconnected/{time}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the last connected time of the device by unique name of the device. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the name provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/name/{{invalidDeviceName}}/lastconnected/{{time}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/devicename/:name/lastconnected/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "9f83d0c2-3f55-d39e-bddb-207cb68cb5df",
      "folder": "ae7fe7c5-a4a7-a985-6272-a79f9b671e5f",
      "name": "151 http://localhost:48081/api/v1/deviceprofile/yaml/{DeviceProfileId}",
      "dataMode": "params",
      "data": null,
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Fetch the profile identified by database generated id and return as a YAML string. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceprofile/yaml/{{dpById}}",
      "preRequestScript": null,
      "tests": "    /**\n     * Test Case:  /deviceprofile/yaml/{{dpById}} - GET\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the device Profile cannot be located by the identifier.\n        tests[\"contains commands\"] = responseBody.has(\"commands\");\n        tests[\"contains objects\"] = responseBody.has(\"objects\");\n        tests[\"contains description\"] = responseBody.has(\"description\");\n        tests[\"contains labels\"] = responseBody.has(\"labels\");\n        tests[\"contains manufacturer\"] = responseBody.has(\"manufacturer\");\n        tests[\"contains model\"] = responseBody.has(\"model\");\n        tests[\"contains name\"] = responseBody.has(\"DeviceProfileGetById\");\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "a0132910-30ea-0bd8-3445-56e8d611b936",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/device/profile/{{getProfileId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /api/v1/device/profile/:profileId - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n */\n \n //Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualDeviceData;\n    try{\n        //Parse json response\n        actualDeviceData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualDeviceData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData, data.schema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Reading is empty.\");\n        tests[\"Is Reading empty\"] = actualDeviceData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476275137555,
      "name": "38 http://localhost:48081/api/v1/device/profile/:profileId",
      "description": "Find all devices associated to the DeviceProfile with the specified profile database generated identifier. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the id provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "a0f682b6-7d8b-c9b6-9f9a-a7c4ff9965e6",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/deviceservice/label/{{getDeviceServiceByLabelNotExist}}",
      "pathVariables": {},
      "preRequestScript": "",
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "name": "361 http://localhost:48081/api/v1/deviceservice/label/:label",
      "description": "Find all DeviceServices having at least one label matching the label provided. List may be empty if no device services match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "descriptionFormat": "html",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/label/:label - GET\n * Services: Metadata\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n         //Test body parameters\n        if(responseBody.length >= 0){\n            tests[\"Response Body is Empty\"] = responseBody === \"[]\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "rawModeData": null
    },
    {
      "folder": "bcc1e7ab-8475-500b-f0a5-cf51b7e97172",
      "id": "a2c58dc3-3765-de9a-6dd7-66f3f6a249b0",
      "name": "http://localhost:48081/api/v1/command/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the Command designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Command is found with the provided id. DataValidationException (HTTP 409) if the Command is still associated to a Device Profile.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {
        "id": "{{id}}"
      },
      "url": "http://localhost:48081/api/v1/command/id/:id",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "6e14e34e-25bc-7114-b720-a39ce47fcf52",
      "id": "a2ca01d6-42db-2983-9622-67c118585729",
      "name": "http://localhost:48081/api/v1/addressable/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the Addressable designated by unique name identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided name is found.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {
        "name": "{{name}}"
      },
      "url": "http://localhost:48081/api/v1/addressable/name/:name",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "a32f0de0-6325-bbb7-cde8-1d54cabe19b5",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/service/{{provisionWatcherGetByServiceRequestId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher/provisionwatcher/service/:serviceId - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        //Test body parameters\n        var actualProvisionWatcherData;\n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualProvisionWatcherData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualProvisionWatcherData.length !== 0) {\n                tests[\"Is valid response schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherSchema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"ProvisionWatcher is empty.\");\n                tests[\"Is ProvisionWatcher empty\"] = actualProvisionWatcherData.length === 0;\n            }\n        }\n    }\n}\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475823800821,
      "name": "296 http://localhost:48081/api/v1/provisionwatcher/service/:serviceId",
      "description": "Find the provision watchers associated to the DeviceService with the specified service database generated identifier. List may be empty if no provision watchers match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the id provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "a5c6ba4b-0c39-a348-de9c-fd7f8695933e",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/deviceprofile/id/{{dpNotPresentDeleteByID}}",
      "pathVariables": {},
      "preRequestScript": null,
      "method": "DELETE",
      "data": null,
      "dataMode": "params",
      "name": "1001 http://localhost:48081/api/v1/deviceprofile/id/{DeviceProfileId}",
      "description": "Remove the DeviceProfile designated by database generated id. This does not remove associated commands. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device profile cannot be found by the identifier provided. Returns DataValidationException (HTTP 413) if devices still reference the profile.",
      "descriptionFormat": "html",
      "tests": "    /**\n     * Test Case:  /deviceprofile/id/{{dpPresentDelete}} - DELETE\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 404){\n        tests[\"Status code is 404\"] = responseCode.code === 404;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the device Profile cannot be located by the identifier.\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "folder": "aba3f537-ed42-b43c-bc73-0cdc3511fc74",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "rawModeData": null
    },
    {
      "id": "a5d2c60f-6210-b95d-2ef0-fe1fb83b9143",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/scheduleevent/name/{{scheduleEventGetRequestName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /scheduleevent/name/:name - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        //Test body parameters\n        var actualScheduleEventData;\n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType)) {\n            try {\n                //Parse json response\n                actualScheduleEventData = JSON.parse(responseBody);\n            } catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualScheduleEventData.length !== 0) {\n                tests[\"Is valid response schema\"] = tv4.validate(actualScheduleEventData, data.scheduleEventObjectSchema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"Scheule Event is empty.\");\n                tests[\"Is schedule empty\"] = actualScheduleEventData.length === 0;\n            }\n        }\n    }\n}\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475832994631,
      "name": "248 http://localhost:48081/api/v1/scheduleevent/name/:name",
      "description": "Return ScheduleEvents matching given name (schedule names should be unique). May be null if no schedule events matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "a6e7f896-025e-fcc8-4e96-0dffd33128e7",
      "folder": "1977af90-d6e1-0afa-4e8a-7e518269e1de",
      "name": "11 http://localhost:48081/api/v1/device/name/:name/lastreported/{time}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the last reported time of the device by unique name of the device. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the name provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/name/{{getDeviceName}}/lastreported/{{time}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/name/:name/lastreported/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Last Reported Time updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "id": "a78bffd4-b4c1-224f-6f69-4869e20cf7b3",
      "name": "233 http://localhost:48081/api/v1/deviceservice",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n  \"origin\":1471806386920,\r\n  \"name\":\"home thermostat deviceservice\",\r\n  \"description\":\"manage homethermostats\",\r\n  \"labels\":[\r\n    \"hvac\",\"thermostat\"\r\n    ],\r\n  \"adminState\":\"UNLOCKED\",\r\n  \"operatingState\":\"ENABLED\",\r\n  \"addressable\":{\r\n    \"name\":\"hvac thermo address5\"\r\n    }\r\n}",
      "descriptionFormat": "html",
      "description": "Add a new DeviceService - name must be unique.  The Addressable must already exist and can be referenced by an included Addressable object containing the Addressable's id or name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated addressable (by id or name) is not found.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice - POST\n * Version: Alpha\n * Services: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n\n    tests[\"DeviceService Created\"] = responseCode.code === 409;\n    if(responseCode.code === 409){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "a8e425df-6e49-63c9-f4b5-bf3903d0b7fc",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/name/{{provisionWatcherGetRequestName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher/name/:name - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        //Test body parameters\n        var actualProvisionWatcherData;\n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualProvisionWatcherData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualProvisionWatcherData.length !== 0) {\n                tests[\"Is valid response schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherObjectSchema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"ProvisionWatcher is empty.\");\n                tests[\"Is ProvisionWatcher empty\"] = actualProvisionWatcherData.length === 0;\n            }\n        }\n    }\n}\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475823751434,
      "name": "288 http://localhost:48081/api/v1/provisionwatcher/name/:name",
      "description": "Return ProvisionWatcher with matching name (name should be unique). May be null if none match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "a98ddb68-5c92-a93a-37f4-8d5875495544",
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "354 http://localhost:48081/api/v1/deviceservice ",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n  \"origin\":1471806386920,\r\n  \"name\":\"home thermostat deviceserviceTest\",\r\n  \"description\":\"manage homethermostats\",\r\n  \"labels\":[\r\n    \"hvac\",\"thermostat\"\r\n    ],\r\n  \"adminState\":\"UNLOCKED\",\r\n  \"operatingState\":\"ENABLED\",\r\n  \"addressable\":{\r\n    \"name\":\"hvac thermo address1\"\r\n    }\r\n}",
      "descriptionFormat": null,
      "description": "Update the DeviceServcie identified by the id or name stored in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "ad50b5bd-ea6e-55d9-5e39-7c631e8a3a9f",
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "name": "49_404 http://localhost:48081/api/v1/device/addressablename/:addressablename",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all devices associated to the Addressable with the specified addressable name. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the name provided.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/addressablename/{{InvalidAddressName}}",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case: /api/v1/device/addressablename/:addressablename - GET\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "ad9db6d2-29ff-f7de-40f1-11bfebf00601",
      "folder": "5990dfa5-4f89-e065-1f47-183e673f9dbd",
      "name": "348 http://localhost:48081/api/v1/command",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\n    \"id\": \"57f396f8e4b060e2071a5c2d\",\n    \"name\": \"current\",\n    \"put\": {\n      \"path\": \"/current\",\n      \"response\": {\n        \"code\": \"200\",\n        \"errorDescription\": \"not in amps\",\n        \"expectedValues\": \"amps\"\n      }\n    }\n}",
      "descriptionFormat": "html",
      "description": "Update the Command identified by the database generated id in the object provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Command is found with the provided id. DataValidationException (HTTP 409) if the name is updated and it is not unique for the Device Profile.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/command",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /command - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//If request success with response code is 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test Response time\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var actualCommandData = JSON.parse(responseBody);\n    if(actualCommandData.length !== 0){\n        tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "bcc1e7ab-8475-500b-f0a5-cf51b7e97172",
      "id": "adfc72d1-0ced-42df-d360-ab1d9a9c8d03",
      "name": "http://localhost:48081/api/v1/command/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return Command objects with given name. Name is not unique for all of Fuse but is unique per any associated Device Profile. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {
        "name": "{{name}}"
      },
      "url": "http://localhost:48081/api/v1/command/name/:name",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "ae41a838-c800-1e47-a388-7cc461356519",
      "folder": "2fc58258-1ef4-28b4-bddc-c7bae2270db4",
      "name": "327 http://localhost:48081/api/v1/addressable/publisher/:publisher",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return Addressable objects with given publisher. List may be empty if none are associated to the publisher. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable/publisher/{{addressablePubGetRequestName}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /addressable/publisher/:publisher - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualAddressableData;\n    try{\n        //Parse json response\n        actualAddressableData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualAddressableData !== null) {\n        //Test response schema\n        //tests[\"Is Valid Response Schema\"] = tv4.validate(actualAddressableData, data.objectSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = actualAddressableData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "affa017a-a7c3-ba94-6349-73ba86a461b9",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/scheduleevent",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case: /scheduleevent - POST\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Verify the http status code for 409.\ntests[\"Status code is 409\"] = responseCode.code === 409;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476352946290,
      "name": "255 http://localhost:48081/api/v1/scheduleevent",
      "description": "Add a new ScheduleEvent - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if the event's associated schedule is not found (referenced by name). DataValidationException (HTTP 409) if the schedule was not provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{\r\n\"origin\":1471806386919,\r\n\"name\":\"variable speed motor collection\",\r\n\"action\":\"http://localhost:48089/getrpm\",\r\n\"actionParameters\":\"{\\\"devid\\\":\\\"57f375abe4b060e2bff6c515\\\"}\"\r\n}"
    },
    {
      "id": "b0fb5f01-cf39-ae28-7a34-684771e3afa7",
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "name": "52_404 http://localhost:48081/api/v1/device/profilename/:profilename",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all devices associated to the DeviceProfile with the specified profile name. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the name provided.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/profilename/{{InvalidProfileName}}",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case: /api/v1/device/profilename/:profilename - GET\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "b15869f2-e2c6-b239-68e1-c7b6b10e1ef5",
      "folder": "1977af90-d6e1-0afa-4e8a-7e518269e1de",
      "name": "17 http://localhost:48081/api/v1/device/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the Device designated by unique name. This does not remove associated objects (addressable, service, profile, etc.). Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/name/{{deleteDeviceName}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/name/:name - DELETE\n *  Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n  tests[\"Status code is 200\"] = responseCode.code === 200;\n  tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n  if(responseCode.code === 200){\n          var contentTypeHeaderExists = postman.getResponseHeader(\"Content-Type\");\n          tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n          if (contentTypeHeaderExists) {\n              tests[\"Content-Type is application/json\"] = \n                   responseHeaders[\"Content-Type\"].has(\"application/json\");\n          }     \n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Record Deleted\"] = responseBody === \"true\";\n        }\n  }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "b3a2a44c-9213-235d-c826-6e0e551424df",
      "folder": "2fc58258-1ef4-28b4-bddc-c7bae2270db4",
      "name": "323 http://localhost:48081/api/v1/addressable/topic/:topic",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return Addressable objects with given topic. List may be empty if none are associated to the topic. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable/topic/{{addressableTopicGetRequestName}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /addressable/topic/:topic - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualAddressableData;\n    try{\n        //Parse json response\n        actualAddressableData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualAddressableData !== null) {\n        //Test response schema\n        //tests[\"Is Valid Response Schema\"] = tv4.validate(actualAddressableData, data.objectSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = actualAddressableData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "bcc1e7ab-8475-500b-f0a5-cf51b7e97172",
      "id": "b40154a1-b0d3-b98e-d27b-3234d2798c9a",
      "name": "http://localhost:48081/api/v1/command",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\"origin\":1471806386919,\r\n\"name\":\"cooling point\",\r\n\"get\":{\"path\":\"/cooling\",\r\n\"response\":{\"code\":\"200\", \"errorDescription\":\"not a float\",\"expectedValues\":\"temperature\"}\r\n},\r\n\"put\":{\"path\":\"/cooling\"\r\n, \"response\":{\"code\":\"200\",\r\n\"errorDescription\":\"not a float\",\"expectedValues\":\"temperature\"},\r\n\"parameters\":[\"coolingpoint\"]}\r\n}",
      "descriptionFormat": "html",
      "description": "Add a new Command. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/command",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "b6834afc-e265-90db-9155-cca3d33ad1be",
      "folder": "5b884982-5afb-a3b2-95ce-895479ea4706",
      "name": "168 http://localhost:48081/api/v1/devicereport/id/{DeviceReportId}",
      "dataMode": "params",
      "data": null,
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the DevicReport designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no DeviceReport is found with the provided id.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/devicereport/id/{{drPresentDelByID}}",
      "preRequestScript": null,
      "tests": "    /**\n     * Test Case:  /devicereport/id/{{drPresentDelByID}} - DELETE\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 404){\n        tests[\"Status code is 404\"] = responseCode.code === 404;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the device Profile cannot be located by the identifier.\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "b9042f3d-9a78-6fdd-53be-0ba314482851",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/deviceprofile/upload",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": "    /**\n     * Test Case:  /api/v1/deviceprofile - POST\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 409){\n        tests[\"Status code is 409\"] = responseCode.code === 409;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the device Profile cannot be located by the identifier.\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "time": 1476359490566,
      "name": "148_409 http://localhost:48081/api/v1/deviceprofile/upload",
      "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "rawModeData": "name: \"yaml thermostat profile\"\ndescription: \"BACnet Honeywell thermostats\"\nmanufacturer: \"Honeywell\"\nmodel: \"ABC123\"\nlabels: \n  - \"bacnet\"\n  - \"thermostat\"\n  - \"Honeywell\"\n  \ncommands:\n  - name: \"cooling point\"\n    get:\n        path: \"/cooling\"\n        responses:\n          - code: \"200\"\n            description: \"not a float\"\n            expectedValues: \n              - \"temperature\"\n    put:\n        path: \"/cooling\" \n        responses:\n          - code: \"200\"\n            description: \"not a float\"\n            expectedValues: \n              - \"temperature\"\n        parameters:\n          - name: \"coolingpoint\"\n            value: \"cooling\"\n          \n",
      "descriptionFormat": "html",
      "folder": "aba3f537-ed42-b43c-bc73-0cdc3511fc74"
    },
    {
      "id": "bc2d62c3-f58f-b89d-8504-7282e4740158",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "201 http://localhost:48081/api/v1/deviceservice/name/:name/lastreported/{time}",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "",
      "descriptionFormat": "html",
      "description": "Update the last reported time of the device service by unique name of the device service. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/name/{{updateDevcieServiceByNameLastReportedTime}}/lastreported/{{updateDevcieServiceLastReportedTime}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/name/:name/lastreported/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length >= 0){\n            tests[\"Last Reported Time updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "bdc2dcdf-3d26-9e7c-bb3f-f14d47d5b17f",
      "folder": "5b884982-5afb-a3b2-95ce-895479ea4706",
      "name": "171 http://localhost:48081/api/v1/devicereport/name/{DeviceReportName}",
      "dataMode": "params",
      "data": null,
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the DevicReport designated by name. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no DeviceReport is found with the provided name.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/devicereport/name/{{drNotPresentDelByName}}",
      "preRequestScript": null,
      "tests": "    /**\n     * Test Case:  /devicereport/name/{{drNotPresentDelByName}} - DELETE\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 404){\n        tests[\"Status code is 404\"] = responseCode.code === 404;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the device Profile cannot be located by the identifier.\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "bef9ab89-64d2-68eb-bc0b-80a774ff67cb",
      "headers": "Content-Type: application/x-www-form-urlencoded\n",
      "url": "{{baseUrl}}/api/v1/deviceprofile/uploadfile",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "POST",
      "data": [
        {
          "key": "file",
          "value": "sample_profile.yaml",
          "type": "file",
          "enabled": true
        }
      ],
      "dataMode": "params",
      "tests": "    /**\n     * Test Case:  /api/v1/deviceprofile - POST\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 200){\n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"Response time is less than 800ms\"] = responseTime < 800;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n                }",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476356640949,
      "name": "140 http://localhost:48081/api/v1/deviceprofile/uploadfile",
      "description": "Add a new DeviceProfile (and associated Command objects) via YAML profile file - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile. Returns ClientException (HTTP 400) if the YAML file is empty.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "bf389cf4-5d73-c498-2305-a03c4b6a8fa1",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/identifier/{{identifierKey}}/{{identifierValue}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher/identifier/:key/{value} - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        //Test body parameters\n        var actualProvisionWatcherData;\n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualProvisionWatcherData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualProvisionWatcherData.length !== 0) {\n                tests[\"Is valid response schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherSchema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"ProvisionWatcher is empty.\");\n                tests[\"Is ProvisionWatcher empty\"] = actualProvisionWatcherData.length === 0;\n            }\n        }\n    }\n}\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475823822634,
      "name": "302 http://localhost:48081/api/v1/provisionwatcher/identifier/:key/{value}",
      "description": "Find the provision watchers associated to the identifier key/value pair.  The identifier key/value pair identify a protocol and address of the protocol to watch for by the Device Service. List may be none if no provision watcher match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "c05c6bbc-7a10-ea9f-509c-8902163dec74",
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "217 http://localhost:48081/api/v1/deviceservice/:id/adminstate/{adminState}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the admin state of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceByIdInvalidAdminState}}/adminstate/{{updateByInvalidIdAdminState}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/:id/adminState/{adminState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "c18dbfa8-7f6f-506c-3977-5142062b7ed5",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/servicename/{{provisionWatcherGetByServiceRequestName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher/servicename/:servicename - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        //Test body parameters\n        var actualProvisionWatcherData;\n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualProvisionWatcherData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualProvisionWatcherData.length !== 0) {\n                tests[\"Is valid response schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherSchema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"ProvisionWatcher is empty.\");\n                tests[\"Is ProvisionWatcher empty\"] = actualProvisionWatcherData.length === 0;\n            }\n        }\n    }\n}\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475823811881,
      "name": "299 http://localhost:48081/api/v1/provisionwatcher/servicename/:servicename",
      "description": "Find the provision watchers associated to the DeviceService with the specified service name. List may be none if no provision watcher match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the name provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "c31e3a7a-b21a-b342-435b-046b3a82b113",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/scheduleevent",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /sheduleevent - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the status as 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify the response time to be less than 200ms\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Verify the content type present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualScheduleEventData;\n    try{\n        //Parse json response\n        actualScheduleEventData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    \n    \n    //Test response schema\n    tests[\"Is Valid Response Schema\"] = tv4.validate(actualScheduleEventData, data.scheduleEventSchema);\n    console.log(\"Validation failed: \", tv4.error);\n       \n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "time": 1475727106840,
      "name": "260 http://localhost:48081/api/v1/scheduleevent",
      "description": "Return all schedule events sorted by id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "folder": "5e88d57f-9093-8be6-289a-b4a9e1c92c11",
      "rawModeData": null,
      "descriptionFormat": "html"
    },
    {
      "id": "c3f640eb-3102-4486-f14d-a939862a88aa",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/deviceprofile/uploadfile",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "POST",
      "data": [
        {
          "key": "file",
          "value": "sample_profile_duplicated_command.yaml",
          "type": "file",
          "enabled": true
        }
      ],
      "dataMode": "params",
      "tests": "    /**\n     * Test Case:  /api/v1/deviceprofile - POST\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 409){\n        tests[\"Status code is 409\"] = responseCode.code === 409;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the device Profile cannot be located by the identifier.\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "time": 1476359478552,
      "name": "142_409 http://localhost:48081/api/v1/deviceprofile/uploadfile",
      "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "rawModeData": "",
      "descriptionFormat": "html",
      "folder": "aba3f537-ed42-b43c-bc73-0cdc3511fc74"
    },
    {
      "id": "c908b809-a7b5-4d2a-ce93-9a46b3d90c41",
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "206 http://localhost:48081/api/v1/deviceservice/name/:name/lastconnected/{time}",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "",
      "descriptionFormat": "html",
      "description": "Update the last connected time of the device service by unique name of the device service. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/name/{{updateDeviceServiceByLastConnTime}}/lastconnected/{{updateInvalidLastConnTime}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/name/:name/lastconnected/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "c92a7218-a733-0724-a578-e5f6b2a152f9",
      "folder": "aba3f537-ed42-b43c-bc73-0cdc3511fc74",
      "name": "136 http://localhost:48081/api/v1/deviceprofile/name/{profileName}",
      "dataMode": "params",
      "data": null,
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the DeviceProfile designated by unique name. This does not remove associated commands. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device profile cannot be found by the name provided. Returns DataValidationException (HTTP 413) if devices still reference the profile.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceprofile/name/{{dpNotPresentDeleteByName}}",
      "preRequestScript": null,
      "tests": "    /**\n     * Test Case:  /deviceprofile/id/{{dpPresentDelete}} - DELETE\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 404){\n        tests[\"Status code is 404\"] = responseCode.code === 404;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the device Profile cannot be located by the identifier.\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "c9d07e12-96c6-63a4-9b95-1ec0ee44fe1f",
      "folder": "ae7fe7c5-a4a7-a985-6272-a79f9b671e5f",
      "name": "163 http://localhost:48081/api/v1/deviceprofile",
      "dataMode": "params",
      "data": null,
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceprofile",
      "preRequestScript": null,
      "tests": "/**\n * Test Case:  /deviceprofile - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var responseDeviceProfileData;\n    try{\n        //Parse json response\n        responseDeviceProfileData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(responseDeviceProfileData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(responseDeviceProfileData, data.deviceProfileSchemaArray);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = responseDeviceProfileData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "cefdeeb2-9cbc-ebff-9c33-f475b8e80d3e",
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "214 http://localhost:48081/api/v1/deviceservice/:id/opstate/{opState}",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "",
      "descriptionFormat": "html",
      "description": "Update the op state of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceByIdInvalidOpState}}/opstate/{{updateByInvalidIdOpState}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/:id/opstate/{opState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "d04e383b-2bea-109f-3235-80e04b6a95c0",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/scheduleevent/id/{{invalidScheduleEventId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/**\n * Test Case:  /scheduleevent/id/:id - 404 Error - DEL\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476352766224,
      "name": "243 http://localhost:48081/api/v1/scheduleevent/id/:id",
      "description": "Remove the ScheduleEvent designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no ScheduleEvent is found with the provided id. DataValidationException (HTTP 409) if an attempt to delete a schedule event still being referenced by device reports.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "d136bc07-ee90-159a-a5ce-9875ade3f37b",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/schedule",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /schedule - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif(responseCode.code === 200) {\n   //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n     //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualScheduleData;\n    try{\n        //Parse json response\n        actualScheduleData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualScheduleData.length !== 0 ) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualScheduleData, data.scheduleObjectSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"actual schedule list and expected list length doesnt match\");\n        tests[\"Is actual and expected schedule list matching\"] = actualScheduleData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476448476176,
      "name": "277 http://localhost:48081/api/v1/schedule",
      "description": "Return all schedules sorted by id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "d144ef55-9017-b371-0b80-960af606533c",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/deviceservice/name/{{getDeviceServiceByNameNotExist}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/name/:name - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "name": "359 http://localhost:48081/api/v1/deviceservice/name/:name",
      "description": "Return the DeviceService matching given name (service names should be unique). May be null if no services matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "rawModeData": null,
      "descriptionFormat": null
    },
    {
      "id": "d1ed2959-53ff-dcf2-3317-7aab8588b22f",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n   //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n     //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualProvisionWatcherData;\n    try{\n        //Parse json response\n        actualProvisionWatcherData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualProvisionWatcherData.length !== 0 ) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"actual provisionwatcher list and expected list length doesnt match\");\n        tests[\"Is actual and expected provisionwatcher list matching\"] = actualProvisionWatcherData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475823834915,
      "name": "310 http://localhost:48081/api/v1/provisionwatcher",
      "description": "Return all provision watcher objects sorted by database generated id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "d2ade79a-da21-ffe5-ce68-6716883d5492",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "207 http://localhost:48081/api/v1/deviceservice/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the DeviceService designated by name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/name/{{deleteDeviceServiceByName}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/name/:name - DELETE\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n         //Test body parameters\n        var deviceService;\n        try{\n            //Parse json response\n            deviceService = JSON.parse(responseBody);\n        }catch(e) {\n            console.log(\"Exception while parsing json response\");\n        }\n        \n        if(deviceService.length !== 0) {\n            tests[\"DeviceService deleted by name\"] = responseBody === \"true\";    \n        } \n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "d38520af-9d83-b2e4-0763-005d7f5b5640",
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "236 http://localhost:48081/api/v1/deviceservice",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n  \"id\": \"57f20c3ee4b060e251f6774b\",\r\n  \"origin\":1471806386920,\r\n  \"name\":\"home thermostat deviceservice1\",\r\n  \"description\":\"manage homethermostats\",\r\n  \"labels\":[\r\n    \"hvac\",\"thermostat\"\r\n    ],\r\n  \"adminState\":\"UNLOCKED\",\r\n  \"operatingState\":\"ENABLED\",\r\n  \"addressable\":{\r\n    \"name\":\"hvac thermo address1\"\r\n    }\r\n}",
      "descriptionFormat": "html",
      "description": "Update the DeviceServcie identified by the id or name stored in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "d4ed6ba5-46a2-36a8-1332-06cda1418441",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "234 http://localhost:48081/api/v1/deviceservice",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n  \"id\": \"57f79ca1e4b060e2730a58fc\",\r\n  \"origin\":1471806386920,\r\n  \"name\":\"To update thermostat deviceservice\",\r\n  \"description\":\"manage homethermostats\",\r\n  \"labels\":[\r\n    \"hvac\",\"thermostat\"\r\n    ],\r\n  \"adminState\":\"LOCKED\",\r\n  \"operatingState\":\"ENABLED\",\r\n  \"addressable\":{\r\n    \"name\":\"hvac thermo address\"\r\n    }\r\n}",
      "descriptionFormat": "html",
      "description": "Update the DeviceServcie identified by the id or name stored in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"DeviceService updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "d55a7da4-0f2a-229d-d1a2-69216bda1098",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "221 http://localhost:48081/api/v1/deviceservice/:id/lastconnected/{time}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the last connected time of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceLastConnTimeById}}/lastconnected/{{updateDeviceServiceLastConnTime}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/:id/lastconnected/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"DeviceService updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "d8935a34-35ed-12a7-bc98-9e712e70bfb7",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/schedule",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case: /schedule - POST\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for text/plain.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n    }\n    \n    //Validate the body for Id\n    tests[\"Does body contains Id\"] = responseBody.length === 24;\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476874151169,
      "name": "271  http://localhost:48081/api/v1/schedule",
      "description": "Add a new Schedule - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the cron expression string is not properly formatted.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": [],
      "rawModeData": "{\"origin\":1471806386919,\"name\":\"at midnight4\",\"frequency\":2, \"cron\":\"0 15 10 * * ?\", \"runOnce\":true} \r\n"
    },
    {
      "id": "db8c2279-f2d3-8003-6ed5-f9ffd87a9256",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/scheduleevent/id/{{invalidScheduleEventId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/**\n * Test Case:  /scheduleevent/id/:id - 404 Error - DEL\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476353772497,
      "name": "242 http://localhost:48081/api/v1/scheduleevent/id/:id",
      "description": "Remove the ScheduleEvent designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no ScheduleEvent is found with the provided id. DataValidationException (HTTP 409) if an attempt to delete a schedule event still being referenced by device reports.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "dcd282ea-794c-0aac-bf47-9d71c12d7aa6",
      "folder": "1977af90-d6e1-0afa-4e8a-7e518269e1de",
      "name": "25 http://localhost:48081/api/v1/device/:id/adminstate/{adminState}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the admin state of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/{{getDeviceId}}/adminstate/{{updateAdminState}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/:id/adminstate/{adminState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Device updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "de484504-fcdf-b4ce-4a15-c4c438995de0",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/scheduleevent/id/{{scheduleEventDelRequestId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /api/v1/scheduleevent/id/:id - DELETE\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n */\n \n    tests[\"Record Deleted\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Request Object Deleted\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476081508499,
      "name": "240 http://localhost:48081/api/v1/scheduleevent/id/:id",
      "description": "Remove the ScheduleEvent designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no ScheduleEvent is found with the provided id. DataValidationException (HTTP 409) if an attempt to delete a schedule event still being referenced by device reports.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "df2d3892-7822-fa2c-a7f4-27abfbaf0a1b",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/device/profilename/{{getProfileName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /api/v1/device/profilename/:profilename - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n */\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n    if(responseCode.code === 200){\n        if(responseBody.length === 0){\n            tests[\"Response body Empty\"] = responseBody === null;\n        } else{\n            var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n            \n            tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n            \n            if (contentTypeHeaderExists) {\n                tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n            }\n             //Test body parameters\n            var actualDeviceData;\n            try{\n                //Parse json response\n                actualDeviceData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualDeviceData.length !== 0) {\n             tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData,data.schema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                //Shows message when event list is empty\n                console.log(\"Device List Empty\");\n                tests[\"Is Device list empty\"] = actualDeviceData.length === 0\n            }\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476275162450,
      "name": "50 http://localhost:48081/api/v1/device/profilename/:profilename",
      "description": "Find all devices associated to the DeviceProfile with the specified profile name. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the name provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "folder": "2fc58258-1ef4-28b4-bddc-c7bae2270db4",
      "id": "df6cb924-a2ef-8fa1-ea01-f9f18bee7907",
      "name": "321 http://localhost:48081/api/v1/addressable/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return Addressable with matching name (name should be unique). May be null if none match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable/name/{{addressableGetRequestName}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /addressable/name/:name - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualAddressableData;\n    try{\n        //Parse json response\n        actualAddressableData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualAddressableData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualAddressableData, data.objectSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = actualAddressableData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "e2aae16a-15e7-d146-161a-d4bfaa26badb",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "204 http://localhost:48081/api/v1/deviceservice/name/:name/lastconnected/{time}",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n  \"origin\":1471806386920,\r\n  \"name\":\"home thermostat deviceservice\",\r\n  \"lastConnected\": 0,\r\n    \"lastReported\": 0,\r\n  \"labels\":[\r\n    \"hvac\",\"thermostat\"\r\n    ],\r\n  \"adminState\":\"LOCKED\",\r\n  \"operatingState\":\"ENABLED\",\r\n  \"addressable\":{\r\n    \"name\":\"hvac thermo address\"\r\n    }\r\n}",
      "descriptionFormat": "html",
      "description": "Update the last connected time of the device service by unique name of the device service. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/name/home thermostat deviceservice/lastconnected/123456789",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/name/:name/lastconnected/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Last Connected Time updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "e2c9cb51-d012-8e27-085b-baa871e20375",
      "folder": "ae7fe7c5-a4a7-a985-6272-a79f9b671e5f",
      "name": "130 http://localhost:48081/api/v1/deviceprofile/manufacturer/{manufacturerName}/model/{modelName}",
      "dataMode": "params",
      "data": null,
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all DeviceProfiles with a manufacture or model attribute matching that provided (either matching provides a hit). List may be empty if no profiles match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceprofile/manufacturer/{{dpByManufacturerName}}/model/{{dpByModel}}",
      "preRequestScript": null,
      "tests": "/**\n * Test Case:  /deviceprofile/manufacturer/{{dpByManufacturerName}}/model/{{dpByModel}} - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var responseDeviceProfileData;\n    try{\n        //Parse json response\n        responseDeviceProfileData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(responseDeviceProfileData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(responseDeviceProfileData, data.deviceProfileSchemaArray);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = responseDeviceProfileData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "e4345ad2-254e-e09c-32dc-4d71dc93bd79",
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "203 http://localhost:48081/api/v1/deviceservice/name/:name/lastreported/{time}",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "",
      "descriptionFormat": "html",
      "description": "Update the last reported time of the device service by unique name of the device service. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/name/{{updateDeviceServiceByLastRepTime}}/lastreported/{{updateInvalidLastRepTime}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/name/:name/lastreported/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "e641f628-f488-8628-d876-6b9c2095dba1",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/schedule/57fe00fae4b060e2c8236439",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /schedule/id - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the status as 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify the response time to be less than 200ms\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Validate the respose data with json schema.\n    var actualScheduleData;\n    try{\n        //Parse json response\n        actualScheduleData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualScheduleData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualScheduleData, data.scheduleSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Schedule is empty.\");\n        tests[\"Is Schedule empty\"] = actualScheduleData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476448453500,
      "name": "265 http://localhost:48081/api/v1/schedule/:id",
      "description": "Fetch a specific Schedule by database generated id. May return null if no schedule with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "id": "e6f4bc25-88f8-24c5-3e5e-7308345cf6f3",
      "name": "43_404 http://localhost:48081/api/v1/device/service/:serviceId",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Find all devices associated to the DeviceService with the specified DeviceService database generated identifier. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the id provided.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/service/1234546",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case: /api/v1/device/service/:serviceId - GET\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "e93a1d10-1d0a-3e4b-4e37-b6c57c2a0854",
      "folder": "2fc58258-1ef4-28b4-bddc-c7bae2270db4",
      "name": "325 http://localhost:48081/api/v1/addressable/port/:port",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return Addressable objects with given port. List may be empty if none are associated to the port. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable/port/{{addressablePortGetRequestName}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /addressable/port/:port - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualAddressableData;\n    try{\n        //Parse json response\n        actualAddressableData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualAddressableData !== null) {\n        //Test response schema\n        //tests[\"Is Valid Response Schema\"] = tv4.validate(actualAddressableData, data.objectSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = actualAddressableData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "e9f63265-45eb-d93f-deb8-5e80f57a16fc",
      "folder": "9dffcdf5-a8bd-67df-ca3e-f7377b4519a9",
      "name": "231 http://localhost:48081/api/v1/deviceservice",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n  \"origin\":1471806386921,\r\n  \"name\":\"home thermostat device service1\",\r\n  \"description\":\"manage homethermostats\",\r\n  \"labels\":[\r\n    \"hvac\",\"thermostat\"\r\n    ],\r\n  \"adminState\":\"UNLOCKED\",\r\n  \"operatingState\":\"ENABLED\",\r\n  \"addressable\":{\r\n    \"name\":\"variableSpeedMeterTest\"\r\n    }\r\n}",
      "descriptionFormat": "html",
      "description": "Add a new DeviceService - name must be unique.  The Addressable must already exist and can be referenced by an included Addressable object containing the Addressable's id or name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated addressable (by id or name) is not found.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice - POST\n * Version: Alpha\n * Services: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n\n    tests[\"DeviceService Created\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        if(null !== responseBody){\n            tests[\"Response Object id\"] = responseBody.length === 24;\n        } else{\n            tests[\"Response list is empty\"] = responseBody.length === 0\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "ea25619c-a29e-e22d-7450-09918e4370fe",
      "folder": "82e15378-fd44-6922-97f4-b7378a35fd81",
      "name": "200 http://localhost:48081/api/v1/deviceservice/name/:name/adminstate/{adminState}",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "",
      "descriptionFormat": "html",
      "description": "Update the admin state of the device service by device service name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/deviceservice/name/{{{updateDeviceServiceByInvalidAdminState}}/adminstate/{{updateInvalidAdminState}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/deviceservice/name/:name/adminstate/:{adminState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "ef7923f4-6cba-9dd0-cd49-56c8326abd6c",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/scheduleevent/name/{{scheduleEventDelRequestName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /api/v1/scheduleevent/name/:name- DELETE\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n */\n \n    tests[\"Record Deleted\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Request Object Deleted\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476081488888,
      "name": "244 http://localhost:48081/api/v1/scheduleevent/name/:name",
      "description": "Remove the ScheduleEvent designated by name. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no ScheduleEvent is found with the provided name. DataValidationException (HTTP 409) if an attempt to delete a schedule event still being referenced by device reports.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "folder": "6e14e34e-25bc-7114-b720-a39ce47fcf52",
      "id": "efcf700d-ad86-0993-544b-eef74269f376",
      "name": "http://localhost:48081/api/v1/addressable",
      "dataMode": "raw",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the Addressable identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided id is found.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "http://localhost:48081/api/v1/addressable",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "f034c965-b1e4-98d4-3b28-16a439b47ae2",
      "folder": "093bf479-db55-a54e-f469-eb5bd2acf918",
      "name": "350 http://localhost:48081/api/v1/command",
      "dataMode": "raw",
      "data": [],
      "rawModeData": " {\n    \"id\": \"57f39efde4b060e268aeb06e\",\n    \"created\": 1476349573318,\n    \"modified\": 1476349573318,\n    \"origin\": 1471806386919,\n    \"name\": \"boilingpoint\",\n    \"get\": {\n      \"path\": \"/boiling\",\n      \"response\": {\n        \"code\": \"200\",\n        \"errorDescription\": \"not afloat\",\n        \"expectedValues\": \"temperature\"\n      }\n    },\n    \"put\": {\n      \"path\": \"/boiling\",\n      \"response\": null,\n      \"parameters\": null\n    }\n }",
      "descriptionFormat": "html",
      "description": "Update the Command identified by the database generated id in the object provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Command is found with the provided id. DataValidationException (HTTP 409) if the name is updated and it is not unique for the Device Profile.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/command",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /command - 409 Error - PUT \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 409\ntests[\"Status code is 409\"] = responseCode.code === 409;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "6e14e34e-25bc-7114-b720-a39ce47fcf52",
      "id": "f09a20d2-ad80-cc7c-2660-09c0fd63e184",
      "name": "http://localhost:48081/api/v1/addressable/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return Addressable with matching name (name should be unique). May be null if none match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {
        "name": "{{name}}"
      },
      "url": "http://localhost:48081/api/v1/addressable/name/:name",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": null,
      "helperAttributes": "null",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "f701ded0-76a3-5a8d-fa24-15b24a0debc5",
      "folder": "36613303-ed09-91ea-4a92-b8f9f1ca1a4f",
      "name": "07_404 http://localhost:48081/api/v1/device/name/:name/opstate/{opState}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the op status time of the device by unique name of the device. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the name provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {
        "name": "{{name}}"
      },
      "url": "{{baseUrl}}/api/v1/device/name/:name/opstate/{opState}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/name/:name/opstate/{opState} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n        }\n        }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "f75470b5-2fd1-d0d0-a687-b17425a84f02",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/name/{{provisionWatcherDelRequestName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher/name/:name - DEL\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var jsonData = JSON.parse(responseBody);\n    if(jsonData.length !== 0){\n        tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475823762386,
      "name": "285 http://localhost:48081/api/v1/provisionwatcher/name/:name",
      "description": "Remove the ProvisionWatcher designated by unique name identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no provision watcher with the provided name is found.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "f75c7cc8-91fd-0b0a-a276-15bd31e8e7ab",
      "folder": "1977af90-d6e1-0afa-4e8a-7e518269e1de",
      "name": "14 http://localhost:48081/api/v1/device/name/:name/lastconnected/{time}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the last connected time of the device by unique name of the device. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the name provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/name/{{getDeviceName}}/lastconnected/{{time}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/name/:name/lastconnected/{time} - PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Last Connected Time updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "f938897a-b2fc-f61a-0c69-4ed394142e47",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/device/servicename/{{getServiceName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /api/v1/device/servicename/:servicename - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n */\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n    if(responseCode.code === 200){\n        if(responseBody.length === 0){\n            tests[\"Response body Empty\"] = responseBody === null;\n        } else{\n            var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n            \n            tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n            \n            if (contentTypeHeaderExists) {\n                tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n            }\n             //Test body parameters\n            var actualDeviceData;\n            try{\n                //Parse json response\n                actualDeviceData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualDeviceData.length !== 0) {\n             tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData, data.schema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                //Shows message when event list is empty\n                console.log(\"Device List Empty\");\n                tests[\"Is Device list empty\"] = actualDeviceData.length === 0\n            }\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476275156354,
      "name": "44 http://localhost:48081/api/v1/device/servicename/:servicename",
      "description": "Find all devices associated to the DeviceService with the specified service name (DeviceService names must be unique). List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the name provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "fa46e230-957a-d4a6-ec73-45ea4799acfa",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/scheduleevent/{{scheduleEventGetRequestId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /scheduleevent/id - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the status as 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify the response time to be less than 200ms\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Validate the respose data with json schema.\n    var actualScheduleEventData;\n    try{\n        //Parse json response\n        actualScheduleEventData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualScheduleEventData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualScheduleEventData, data.scheduleEventObjectSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Schedule is empty.\");\n        tests[\"Is Schedule empty\"] = actualScheduleEventData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475843169075,
      "name": "250 http://localhost:48081/api/v1/scheduleevent/:id",
      "description": "Fetch a specific ScheduleEvent by database generated id. May return null if no schedule event with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "fc9ee6d0-9416-20bb-e370-aeb2188f1c43",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/provisionwatcher/servicename/{{invalidServiceName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /provisionwatcher/servicename/:servicename - 404 ERROR - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475826131491,
      "name": "301 http://localhost:48081/api/v1/provisionwatcher/servicename/:servicename",
      "description": "Find the provision watchers associated to the DeviceService with the specified service name. List may be none if no provision watcher match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the name provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "fcf07d56-a48a-91c7-3ac6-8d2f945d54cd",
      "folder": "1977af90-d6e1-0afa-4e8a-7e518269e1de",
      "name": "08 http://localhost:48081/api/v1/device/name/:name/adminstate/{adminState}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Update the admin state of the device by device name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided.",
      "headers": "",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/device/name/{{getDeviceName}}/adminstate/{{updateAdminState}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/device/name/:name/adminstate/{adminState}- PUT\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n **/\n \n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Device updated\"] = responseBody === \"true\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "folder": "2fc58258-1ef4-28b4-bddc-c7bae2270db4",
      "id": "fdb03f25-85b1-e96d-3f9d-83ae3a44c572",
      "name": "331 http://localhost:48081/api/v1/addressable",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n  \"origin\":1471806386921,\r\n  \"name\":\"variableSpeedMeter\",\r\n  \"protocol\":\"HTTP\",\r\n  \"address\":\"172.17.0.1\",\r\n  \"port\":48089,\r\n  \"path\":\"/variableSpeedMeter\",\r\n  \"publisher\":\"none\",\r\n  \"user\":\"none\",\r\n  \"password\":\"none\",\r\n  \"topic\":\"none\"\r\n}",
      "descriptionFormat": "html",
      "description": "Add a new Addressable - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/addressable",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /addressable - POST\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time \ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n    }\n    //Test body value\n    tests[\"Is Body Conatins Id\"] = responseBody.length === 24;\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11"
    },
    {
      "id": "fed3e2b5-5699-6564-ace5-023f4c66b9cd",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/devicereport/name/{{DeviceReportName}}",
      "preRequestScript": null,
      "pathVariables": {},
      "method": "GET",
      "data": null,
      "dataMode": "params",
      "tests": null,
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476359823704,
      "name": "172 http://localhost:48081/api/v1/devicereport/name/{DeviceReportName}",
      "description": "Remove the DevicReport designated by name. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no DeviceReport is found with the provided name.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    },
    {
      "id": "fed89397-fafe-75be-d0b1-32721266d9b5",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/device/addressable/{{getAddressableId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /api/v1/device/addressable/:addressableId - GET\n * Version: Alpha\n * Service: Metadata\n * @Author: Tata Elxsi\n *\n */\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n    if(responseCode.code === 200){\n        if(responseBody.length === 0){\n            tests[\"Response body Empty\"] = responseBody === null;\n        } else{\n            var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n            \n            tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n            \n            if (contentTypeHeaderExists) {\n                tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n            }\n             //Test body parameters\n            var actualDeviceData;\n            try{\n                //Parse json response\n                actualDeviceData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualDeviceData.length !== 0) {\n             tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData,data.schema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                //Shows message when event list is empty\n                console.log(\"Device List Empty\");\n                tests[\"Is Device list empty\"] = actualDeviceData.length === 0\n            }\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1476273978736,
      "name": "53 http://localhost:48081/api/v1/device/addressable/:addressableId",
      "description": "Find all devices associated to the Addressable with the specified addressable database generated identifier. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the id provided.",
      "collectionId": "63e6e78a-54c7-1735-8e19-eb20eed7ab11",
      "responses": []
    }
  ]
}