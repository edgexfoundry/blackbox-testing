{
  "info": {
    "_postman_id": "5ed664ce-0c91-4d1c-bd72-31cc3a5d03ac",
    "name": "core-metadata",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "addressable",
      "item": [
        {
          "name": "313 http://localhost:48081/api/v1/addressable/id/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /addressable/id/:id - DEL",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//If request success with response code is 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test Response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test Content type in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    var actualAddressableData = JSON.parse(responseBody);",
                  "    if(actualAddressableData.length !== 0){",
                  "        tests[\"Body has True\"] = responseBody === \"true\";",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/addressable/id/{{addressableDelRequestId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "addressable",
                "id",
                "{{addressableDelRequestId}}"
              ]
            },
            "description": "Remove the Addressable designated by the database generated id for the Addressable. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided id is found."
          },
          "response": []
        },
        {
          "name": "316 http://localhost:48081/api/v1/addressable/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /addressable/:id - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualAddressableData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualAddressableData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualAddressableData !== null) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(actualAddressableData, data.objectSchema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = actualAddressableData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/addressable/{{addressableGetRequestId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "addressable",
                "{{addressableGetRequestId}}"
              ]
            },
            "description": "Fetch a specific addressable by database generated id. May return null if no addressable matches on id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "321 http://localhost:48081/api/v1/addressable/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /addressable/name/:name - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualAddressableData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualAddressableData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualAddressableData !== null) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(actualAddressableData, data.objectSchema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = actualAddressableData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/addressable/name/{{addressableGetRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "addressable",
                "name",
                "{{addressableGetRequestName}}"
              ]
            },
            "description": "Return Addressable with matching name (name should be unique). May be null if none match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "318 http://localhost:48081/api/v1/addressable/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /addressable/name/:name - DEL",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//If request success with response code is 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test Response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test Content type in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    var actualAddressableData = JSON.parse(responseBody);",
                  "    if(actualAddressableData.length !== 0){",
                  "        tests[\"Body has True\"] = responseBody === \"true\";",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/addressable/name/{{addressableDelRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "addressable",
                "name",
                "{{addressableDelRequestName}}"
              ]
            },
            "description": "Remove the Addressable designated by unique name identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided name is found."
          },
          "response": []
        },
        {
          "name": "323 http://localhost:48081/api/v1/addressable/topic/:topic",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /addressable/topic/:topic - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualAddressableData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualAddressableData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualAddressableData !== null) {",
                  "        //Test response schema",
                  "        //tests[\"Is Valid Response Schema\"] = tv4.validate(actualAddressableData, data.objectSchema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = actualAddressableData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/addressable/topic/{{addressableTopicGetRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "addressable",
                "topic",
                "{{addressableTopicGetRequestName}}"
              ]
            },
            "description": "Return Addressable objects with given topic. List may be empty if none are associated to the topic. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "325 http://localhost:48081/api/v1/addressable/port/:port",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /addressable/port/:port - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualAddressableData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualAddressableData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualAddressableData !== null) {",
                  "        //Test response schema",
                  "        //tests[\"Is Valid Response Schema\"] = tv4.validate(actualAddressableData, data.objectSchema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = actualAddressableData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/addressable/port/{{addressablePortGetRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "addressable",
                "port",
                "{{addressablePortGetRequestName}}"
              ]
            },
            "description": "Return Addressable objects with given port. List may be empty if none are associated to the port. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "327 http://localhost:48081/api/v1/addressable/publisher/:publisher",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /addressable/publisher/:publisher - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualAddressableData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualAddressableData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualAddressableData !== null) {",
                  "        //Test response schema",
                  "        //tests[\"Is Valid Response Schema\"] = tv4.validate(actualAddressableData, data.objectSchema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = actualAddressableData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/addressable/publisher/{{addressablePubGetRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "addressable",
                "publisher",
                "{{addressablePubGetRequestName}}"
              ]
            },
            "description": "Return Addressable objects with given publisher. List may be empty if none are associated to the publisher. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "329 http://localhost:48081/api/v1/addressable/address/:address",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /addressable/address/:address - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualAddressableData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualAddressableData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualAddressableData !== null) {",
                  "        //Test response schema",
                  "        //tests[\"Is Valid Response Schema\"] = tv4.validate(actualAddressableData, data.objectSchema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = actualAddressableData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/addressable/address/{{addressableAdrsGetRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "addressable",
                "address",
                "{{addressableAdrsGetRequestName}}"
              ]
            },
            "description": "Return Addressable objects with given address. List may be empty if none are associated to the address. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "336 http://localhost:48081/api/v1/addressable",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /addressable - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualAddressableData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualAddressableData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualAddressableData !== null) {",
                  "        //Test response schema",
                  "        //tests[\"Is Valid Response Schema\"] = tv4.validate(actualAddressableData, data.objectSchema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = actualAddressableData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/addressable",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "addressable"
              ]
            },
            "description": "Return all addressable objects sorted by database generated id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit."
          },
          "response": []
        },
        {
          "name": "333 http://localhost:48081/api/v1/addressable",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /addressable - PUT",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//If request success with response code is 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test Response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test Content type in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    var actualAddressableData = JSON.parse(responseBody);",
                  "    if(actualAddressableData.length !== 0){",
                  "        tests[\"Body has True\"] = responseBody === \"true\";",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\": \"57f335fce4b060e27b9d5f60\",\r\n    \"created\": 1475556860463,\r\n    \"modified\": 1475556860463,\r\n    \"origin\": 1471806386924,\r\n    \"name\": \"gasmeter\",\r\n    \"protocol\": \"HTTP\",\r\n    \"address\": \"172.17.0.6\",\r\n    \"port\": 48093,\r\n    \"path\": \"/gasmeter\",\r\n    \"publisher\": \"DELLPUB\",\r\n    \"user\": \"test\",\r\n    \"password\": \"test123\",\r\n    \"topic\": \"kWhData\"\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/addressable",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "addressable"
              ]
            },
            "description": "Update the Addressable identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided id is found."
          },
          "response": []
        },
        {
          "name": "331 http://localhost:48081/api/v1/addressable",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /addressable - POST",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time ",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "    }",
                  "    //Test body value",
                  "    tests[\"Is Body Conatins Id\"] = responseBody.length === 24;",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"origin\":1471806386921,\r\n  \"name\":\"variableSpeedMeter\",\r\n  \"protocol\":\"HTTP\",\r\n  \"address\":\"172.17.0.1\",\r\n  \"port\":48089,\r\n  \"path\":\"/variableSpeedMeter\",\r\n  \"publisher\":\"none\",\r\n  \"user\":\"none\",\r\n  \"password\":\"none\",\r\n  \"topic\":\"none\"\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/addressable",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "addressable"
              ]
            },
            "description": "Add a new Addressable - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        }
      ],
      "description": "Folder for addressable"
    },
    {
      "name": "addressable_error_4xx",
      "item": [
        {
          "name": "314 http://localhost:48081/api/v1/addressable/id/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /addressable/id/:id - 404 Error - DEL ",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/addressable/id/{{invalidAddressableGetId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "addressable",
                "id",
                "{{invalidAddressableGetId}}"
              ]
            },
            "description": "Remove the Addressable designated by the database generated id for the Addressable. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided id is found."
          },
          "response": []
        },
        {
          "name": "319 http://localhost:48081/api/v1/addressable/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /addressable/name/:name - 404 Error - DEL ",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/addressable/name/{{invalidAddressableGetName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "addressable",
                "name",
                "{{invalidAddressableGetName}}"
              ]
            },
            "description": "Remove the Addressable designated by unique name identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided name is found."
          },
          "response": []
        },
        {
          "name": "334 http://localhost:48081/api/v1/addressable",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /addressable - 404 Error - PUT ",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"id\": \"aaaaaaaaa123aaaaaaaaaaaa\",\r\n    \"created\": 1475556860463,\r\n    \"modified\": 1475556860463,\r\n    \"origin\": 1471806386924,\r\n    \"name\": \"gasmeter\",\r\n    \"protocol\": \"HTTP\",\r\n    \"address\": \"172.17.0.6\",\r\n    \"port\": 48093,\r\n    \"path\": \"/gasmeter\",\r\n    \"publisher\": \"DELLPUB\",\r\n    \"user\": \"test\",\r\n    \"password\": \"test123\",\r\n    \"topic\": \"kWhData\"\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/addressable",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "addressable"
              ]
            },
            "description": "Update the Addressable identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no addressable with the provided id is found."
          },
          "response": []
        }
      ],
      "description": "Folder for addressable"
    },
    {
      "name": "command",
      "item": [
        {
          "name": "339 http://localhost:48081/api/v1/command/id/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /command/id/:id - DEL",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//If request success with response code is 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test Response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test Content type in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    var actualCommandData = JSON.parse(responseBody);",
                  "    if(actualCommandData !== 0){",
                  "        tests[\"Body has True\"] = responseBody === \"true\";",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/command/id/{{commandDelRequestId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "command",
                "id",
                "{{commandDelRequestId}}"
              ]
            },
            "description": "Remove the Command designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Command is found with the provided id. DataValidationException (HTTP 409) if the Command is still associated to a Device Profile."
          },
          "response": []
        },
        {
          "name": "342 http://localhost:48081/api/v1/command/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /command/:id - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualCommandData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualCommandData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualCommandData !== null) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(actualCommandData, data.objectSchema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = actualCommandData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/command/{{commandGetRequestId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "command",
                "{{commandGetRequestId}}"
              ]
            },
            "description": "Fetch a specific command by database generated id. May return null if no commands with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "344 http://localhost:48081/api/v1/command/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /command/name/:name - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualCommandData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualCommandData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualCommandData !== null) {",
                  "        //Test response schema",
                  "       // tests[\"Is Valid Response Schema\"] = tv4.validate(actualCommandData, data.objectSchema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = actualCommandData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/command/name/{{commandGetRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "command",
                "name",
                "{{commandGetRequestName}}"
              ]
            },
            "description": "Return Command objects with given name. Name is not unique for all of EdgeX but is unique per any associated Device Profile. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "352 http://localhost:48081/api/v1/command",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /command - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualCommandData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualCommandData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualCommandData !== null) {",
                  "        //Test response schema",
                  "        //tests[\"Is Valid Response Schema\"] = tv4.validate(actualCommandData, data.objectSchema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = actualCommandData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/command",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "command"
              ]
            },
            "description": "Return all command objects. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit."
          },
          "response": []
        },
        {
          "name": "348 http://localhost:48081/api/v1/command",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /command - PUT",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//If request success with response code is 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test Response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test Content type in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "       var actualCommandData = JSON.parse(responseBody);",
                  "    if(actualCommandData.length !== 0){",
                  "        tests[\"Body has True\"] = responseBody === \"true\";",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"57f396f8e4b060e2071a5c2d\",\n    \"name\": \"current\",\n    \"put\": {\n      \"path\": \"/current\",\n      \"response\": {\n        \"code\": \"200\",\n        \"errorDescription\": \"not in amps\",\n        \"expectedValues\": \"amps\"\n      }\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/command",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "command"
              ]
            },
            "description": "Update the Command identified by the database generated id in the object provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Command is found with the provided id. DataValidationException (HTTP 409) if the name is updated and it is not unique for the Device Profile."
          },
          "response": []
        },
        {
          "name": "346 http://localhost:48081/api/v1/command",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /command - POST",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time ",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "    }",
                  "    //Test body value",
                  "    tests[\"Is Body Conatins Id\"] = responseBody.length === 24;",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \r\n   \"origin\":1471806386919,\r\n   \"name\":\"coolingpoint\",\r\n   \"get\":{  \r\n      \"path\":\"/cooling\",\r\n      \"response\":{  \r\n         \"code\":\"200\",\r\n         \"errorDescription\":\"not afloat\",\r\n         \"expectedValues\":\"temperature\"\r\n      }\r\n   },\r\n   \"put\":{  \r\n      \"path\":\"/cooling\"\r\n   }\r\n}\r\n"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/command",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "command"
              ]
            },
            "description": "Add a new Command. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        }
      ],
      "description": "Folder for command"
    },
    {
      "name": "command_error_4xx",
      "item": [
        {
          "name": "340 http://localhost:48081/api/v1/command/id/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /command - 409 Error - DEL ",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 409",
                  "tests[\"Status code is 409\"] = responseCode.code === 409;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/command/id/{{commandDelRequestIderr}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "command",
                "id",
                "{{commandDelRequestIderr}}"
              ]
            },
            "description": "Remove the Command designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Command is found with the provided id. DataValidationException (HTTP 409) if the Command is still associated to a Device Profile."
          },
          "response": []
        },
        {
          "name": "349 http://localhost:48081/api/v1/command",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /command - 404 Error - PUT ",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"aaaaaaaa123aaaaaaaaaabbf\",\n    \"name\": \"current\",\n    \"put\": {\n      \"path\": \"/current\"\n    }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/command",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "command"
              ]
            },
            "description": "Update the Command identified by the database generated id in the object provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Command is found with the provided id. DataValidationException (HTTP 409) if the name is updated and it is not unique for the Device Profile."
          },
          "response": []
        },
        {
          "name": "350 http://localhost:48081/api/v1/command",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /command - 409 Error - PUT ",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 409",
                  "tests[\"Status code is 409\"] = responseCode.code === 409;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": " {\n    \"id\": \"57f39efde4b060e268aeb06e\",\n    \"created\": 1476349573318,\n    \"modified\": 1476349573318,\n    \"origin\": 1471806386919,\n    \"name\": \"boilingpoint\",\n    \"get\": {\n      \"path\": \"/boiling\",\n      \"response\": {\n        \"code\": \"200\",\n        \"errorDescription\": \"not afloat\",\n        \"expectedValues\": \"temperature\"\n      }\n    },\n    \"put\": {\n      \"path\": \"/boiling\",\n      \"response\": null,\n      \"parameters\": null\n    }\n }"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/command",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "command"
              ]
            },
            "description": "Update the Command identified by the database generated id in the object provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Command is found with the provided id. DataValidationException (HTTP 409) if the name is updated and it is not unique for the Device Profile."
          },
          "response": []
        }
      ],
      "description": "Folder for command"
    },
    {
      "name": "device",
      "item": [
        {
          "name": "02 http://localhost:48081/api/v1/device/id/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case: api/v1/device/id  DELETE",
                  " *  Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//If request success with response code is 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test Response time",
                  "tests[\"Response time is less than 800 ms\"] = responseTime < 800;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test Content type in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "      var jsonData = JSON.parse(responseBody);",
                  "    if(jsonData.length !== 0){",
                  "        tests[\"Body has True\"] = responseBody === \"true\";",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/id/{{deleteDeviceId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "id",
                "{{deleteDeviceId}}"
              ]
            },
            "description": "Remove the Device designated by database generated id. This does not remove associated objects (addressable, service, profile, etc.). Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "05 http://localhost:48081/api/v1/device/name/:name/opstate/{opState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/name/:name/opstate/{opState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "         var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Device updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/name/{{getDeviceName}}/opstate/{{updateOpState}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "name",
                "{{getDeviceName}}",
                "opstate",
                "{{updateOpState}}"
              ]
            },
            "description": "Update the op status time of the device by unique name of the device. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the name provided."
          },
          "response": []
        },
        {
          "name": "08 http://localhost:48081/api/v1/device/name/:name/adminstate/{adminState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/name/:name/adminstate/{adminState}- PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "            var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Device updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/name/{{getDeviceName}}/adminstate/{{updateAdminState}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "name",
                "{{getDeviceName}}",
                "adminstate",
                "{{updateAdminState}}"
              ]
            },
            "description": "Update the admin state of the device by device name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "11 http://localhost:48081/api/v1/device/name/:name/lastreported/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/name/:name/lastreported/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "         var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Last Reported Time updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/name/{{getDeviceName}}/lastreported/{{time}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "name",
                "{{getDeviceName}}",
                "lastreported",
                "{{time}}"
              ]
            },
            "description": "Update the last reported time of the device by unique name of the device. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the name provided."
          },
          "response": []
        },
        {
          "name": "14 http://localhost:48081/api/v1/device/name/:name/lastconnected/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/name/:name/lastconnected/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "           var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Last Connected Time updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/name/{{getDeviceName}}/lastconnected/{{time}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "name",
                "{{getDeviceName}}",
                "lastconnected",
                "{{time}}"
              ]
            },
            "description": "Update the last connected time of the device by unique name of the device. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the name provided."
          },
          "response": []
        },
        {
          "name": "20 http://localhost:48081/api/v1/device/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/name/:name - GET",
                  " *  Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "    if(responseCode.code === 200){",
                  "        if(responseBody.length === 0){",
                  "            tests[\"Response body Empty\"] = responseBody === null;",
                  "        } else{",
                  "            var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "            ",
                  "            tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "            ",
                  "            if (contentTypeHeaderExists) {",
                  "                tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "            }",
                  "             //Test body parameters",
                  "            var actualDeviceName;",
                  "            try{",
                  "                //Parse json response",
                  "                actualDeviceName = JSON.parse(responseBody);",
                  "            }catch(e) {",
                  "                console.log(\"Exception while parsing json response\");",
                  "            }",
                  "            ",
                  "            if(actualDeviceName.length !== 0) {",
                  "             tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceName,data.schemaObject);",
                  "                console.log(\"Validation failed: \", tv4.error);",
                  "            } else {",
                  "                //Shows message when event list is empty",
                  "                console.log(\"Device List Empty\");",
                  "                tests[\"Is Device list empty\"] = actualDeviceName.length === 0",
                  "            }",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/name/{{getDeviceName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "name",
                "{{getDeviceName}}"
              ]
            },
            "description": "Return Device matching given name (device names should be unique). May be null if no device matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "17 http://localhost:48081/api/v1/device/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/name/:name - DELETE",
                  " *  Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "  tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "  tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "  if(responseCode.code === 200){",
                  "          var contentTypeHeaderExists = postman.getResponseHeader(\"Content-Type\");",
                  "          tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "          if (contentTypeHeaderExists) {",
                  "              tests[\"Content-Type is application/json\"] = ",
                  "                   responseHeaders[\"Content-Type\"].has(\"application/json\");",
                  "          }     ",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Record Deleted\"] = responseBody === \"true\";",
                  "        }",
                  "  }"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/name/{{deleteDeviceName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "name",
                "{{deleteDeviceName}}"
              ]
            },
            "description": "Remove the Device designated by unique name. This does not remove associated objects (addressable, service, profile, etc.). Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "22 http://localhost:48081/api/v1/device/:id/opstate/{opState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/:id/opState/{opState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "            var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Device updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/{{getDeviceId}}/opstate/{{updateOpState}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "{{getDeviceId}}",
                "opstate",
                "{{updateOpState}}"
              ]
            },
            "description": "Update the op state of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "25 http://localhost:48081/api/v1/device/:id/adminstate/{adminState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/:id/adminstate/{adminState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "          var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Device updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/{{getDeviceId}}/adminstate/{{updateAdminState}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "{{getDeviceId}}",
                "adminstate",
                "{{updateAdminState}}"
              ]
            },
            "description": "Update the admin state of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "28 http://localhost:48081/api/v1/device/:id/lastreported/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/:id/adminstate/{adminState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "          var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Device updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/{{getDeviceId}}/lastreported/{{time}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "{{getDeviceId}}",
                "lastreported",
                "{{time}}"
              ]
            },
            "description": "Update the last reported time of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "31 http://localhost:48081/api/v1/device/:id/lastconnected/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/:id/lastconnected/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "       var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Device updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/{{getDeviceId}}/lastconnected/{{time}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "{{getDeviceId}}",
                "lastconnected",
                "{{time}}"
              ]
            },
            "description": "Update the last connected time of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "34 http://localhost:48081/api/v1/device/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test api : /api/v1/device/{{deviceId}}",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualDeviceData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualDeviceData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualDeviceData !== null) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData, data.schemaObject);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Reading is empty.\");",
                  "        tests[\"Is Reading empty\"] = actualDeviceData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/{{getDeviceId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "{{getDeviceId}}"
              ]
            },
            "description": "Fetch a specific device by database generated id. May return null if no device with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "36 http://localhost:48081/api/v1/device/label/:label",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/label/:label - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "    if(responseCode.code === 200){",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "         //Test body parameters",
                  "        var actualDeviceData;",
                  "        try{",
                  "            //Parse json response",
                  "            actualDeviceData = JSON.parse(responseBody);",
                  "        }catch(e) {",
                  "            console.log(\"Exception while parsing json response\");",
                  "        }",
                  "        ",
                  "        if(actualDeviceData.length !== 0) {",
                  "         tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData, data.schema);",
                  "            console.log(\"Validation failed: \", tv4.error);",
                  "        } else {",
                  "            //Shows message when event list is empty",
                  "            console.log(\"Device List Empty\");",
                  "            tests[\"Is Device list empty\"] = actualDeviceData.length === 0",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/label/{{getDeviceLabelName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "label",
                "{{getDeviceLabelName}}"
              ]
            },
            "description": "Find all Devices having at least one label matching the label provided. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "38 http://localhost:48081/api/v1/device/profile/:profileId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /api/v1/device/profile/:profileId - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  " //Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualDeviceData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualDeviceData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualDeviceData !== null) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData, data.schema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Reading is empty.\");",
                  "        tests[\"Is Reading empty\"] = actualDeviceData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/profile/{{getProfileId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "profile",
                "{{getProfileId}}"
              ]
            },
            "description": "Find all devices associated to the DeviceProfile with the specified profile database generated identifier. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the id provided."
          },
          "response": []
        },
        {
          "name": "41 http://localhost:48081/api/v1/device/service/:serviceId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /api/v1/device/service/:serviceId - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  " //Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualDeviceData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualDeviceData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualDeviceData !== null) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData, data.schema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Reading is empty.\");",
                  "        tests[\"Is Reading empty\"] = actualDeviceData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/service/{{getServiceId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "service",
                "{{getServiceId}}"
              ]
            },
            "description": "Find all devices associated to the DeviceService with the specified DeviceService database generated identifier. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the id provided."
          },
          "response": []
        },
        {
          "name": "44 http://localhost:48081/api/v1/device/servicename/:servicename",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /api/v1/device/servicename/:servicename - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "    if(responseCode.code === 200){",
                  "        if(responseBody.length === 0){",
                  "            tests[\"Response body Empty\"] = responseBody === null;",
                  "        } else{",
                  "            var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "            ",
                  "            tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "            ",
                  "            if (contentTypeHeaderExists) {",
                  "                tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "            }",
                  "             //Test body parameters",
                  "            var actualDeviceData;",
                  "            try{",
                  "                //Parse json response",
                  "                actualDeviceData = JSON.parse(responseBody);",
                  "            }catch(e) {",
                  "                console.log(\"Exception while parsing json response\");",
                  "            }",
                  "            ",
                  "            if(actualDeviceData.length !== 0) {",
                  "             tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData, data.schema);",
                  "                console.log(\"Validation failed: \", tv4.error);",
                  "            } else {",
                  "                //Shows message when event list is empty",
                  "                console.log(\"Device List Empty\");",
                  "                tests[\"Is Device list empty\"] = actualDeviceData.length === 0",
                  "            }",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/servicename/{{getServiceName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "servicename",
                "{{getServiceName}}"
              ]
            },
            "description": "Find all devices associated to the DeviceService with the specified service name (DeviceService names must be unique). List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the name provided."
          },
          "response": []
        },
        {
          "name": "50 http://localhost:48081/api/v1/device/profilename/:profilename",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /api/v1/device/profilename/:profilename - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "    if(responseCode.code === 200){",
                  "        if(responseBody.length === 0){",
                  "            tests[\"Response body Empty\"] = responseBody === null;",
                  "        } else{",
                  "            var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "            ",
                  "            tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "            ",
                  "            if (contentTypeHeaderExists) {",
                  "                tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "            }",
                  "             //Test body parameters",
                  "            var actualDeviceData;",
                  "            try{",
                  "                //Parse json response",
                  "                actualDeviceData = JSON.parse(responseBody);",
                  "            }catch(e) {",
                  "                console.log(\"Exception while parsing json response\");",
                  "            }",
                  "            ",
                  "            if(actualDeviceData.length !== 0) {",
                  "             tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData,data.schema);",
                  "                console.log(\"Validation failed: \", tv4.error);",
                  "            } else {",
                  "                //Shows message when event list is empty",
                  "                console.log(\"Device List Empty\");",
                  "                tests[\"Is Device list empty\"] = actualDeviceData.length === 0",
                  "            }",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/profilename/{{getProfileName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "profilename",
                "{{getProfileName}}"
              ]
            },
            "description": "Find all devices associated to the DeviceProfile with the specified profile name. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the name provided."
          },
          "response": []
        },
        {
          "name": "53 http://localhost:48081/api/v1/device/addressable/:addressableId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /api/v1/device/addressable/:addressableId - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "    if(responseCode.code === 200){",
                  "        if(responseBody.length === 0){",
                  "            tests[\"Response body Empty\"] = responseBody === null;",
                  "        } else{",
                  "            var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "            ",
                  "            tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "            ",
                  "            if (contentTypeHeaderExists) {",
                  "                tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "            }",
                  "             //Test body parameters",
                  "            var actualDeviceData;",
                  "            try{",
                  "                //Parse json response",
                  "                actualDeviceData = JSON.parse(responseBody);",
                  "            }catch(e) {",
                  "                console.log(\"Exception while parsing json response\");",
                  "            }",
                  "            ",
                  "            if(actualDeviceData.length !== 0) {",
                  "             tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData,data.schema);",
                  "                console.log(\"Validation failed: \", tv4.error);",
                  "            } else {",
                  "                //Shows message when event list is empty",
                  "                console.log(\"Device List Empty\");",
                  "                tests[\"Is Device list empty\"] = actualDeviceData.length === 0",
                  "            }",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/addressable/{{getAddressableId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "addressable",
                "{{getAddressableId}}"
              ]
            },
            "description": "Find all devices associated to the Addressable with the specified addressable database generated identifier. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the id provided."
          },
          "response": []
        },
        {
          "name": "62 http://localhost:48081/api/v1/device",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /api/v1/device - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualDeviceData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualDeviceData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualDeviceData.length !== 0 ) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(actualDeviceData,data.schema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Device list and expected list length doesnt match\");",
                  "        tests[\"Is actual and expected Device list matching\"] = actualDeviceData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device"
              ]
            },
            "description": "Return all devices sorted by id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit."
          },
          "response": []
        },
        {
          "name": "59 http://localhost:48081/api/v1/device",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  api/v1/device - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//If request success with response code is 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test Response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test Content type in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "      var jsonData = JSON.parse(responseBody);",
                  "    if(jsonData.length !== 0){",
                  "            tests[\"Body has True\"] = responseBody === \"true\";",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\":\"57f63243e4b060e2e0dd6ed0\",\r\n  \"name\": \"livingroomthermostatdevice\",\r\n  \"description\":\"Home automation\",\r\n  \"adminstate\":\"LOCKED\"\r\n  \r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device"
              ]
            },
            "description": "Update the Device identified by the id or name stored in the object provided. Id is used first, name is used second for identification purposes. Device's service & profile cannot be updated. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "56 http://localhost:48081/api/v1/device",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case: /api/v1/device - POST",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " */",
                  " ",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time ",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "    }",
                  "    //Test body value",
                  "    tests[\"Is Body Conatins Id\"] = responseBody.length === 24;",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \r\n   \"origin\":1471806386919,\r\n   \"name\" :\"AWS IOT Button\",\r\n   \"description\":\"Home automation system\",\r\n   \"adminState\":\"UNLOCKED\",\r\n   \"operatingState\":\"ENABLED\",\r\n   \"addressable\":{  \r\n      \"name\":\"canary\"\r\n   },\r\n   \"labels\":[  \r\n      \"home\",\r\n      \"hvac\",\r\n      \"thermostat\"\r\n   ],\r\n   \"location\":\"{lat:45.45,long:47.80}\",\r\n   \"responseDelay\":0,\r\n   \"service\":{  \r\n      \"name\":\"Gogle Home device service\"\r\n   },\r\n   \"profile\":{  \r\n      \"name\":\"Google Home profile\"\r\n   }\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device"
              ]
            },
            "description": "Add a new Device - name must be unique. Embedded objects (device, service, profile, addressable) are all referenced in the new Device object by id or name to associated objects. All other data in the embedded objects will be ignored. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated object (Addressable, Profile, Service) cannot be found with the id or name provided."
          },
          "response": []
        }
      ],
      "description": "Folder for device"
    },
    {
      "name": "device_error_4xx",
      "item": [
        {
          "name": "04_404 http://localhost:48081/api/v1/device/id/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e55a8551-7ae0-43a6-a09c-0430d41700fb",
                "exec": [
                  "/**",
                  " * Test Case: /api/v1/device/id/:id - DELETE",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "if (contentTypeHeaderExists) {",
                  "    tests[\"Content-Type is text/plain\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "}",
                  "// the value descriptor cannot be located by the identifier."
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/id/57e5fc11e4b060e2d487f24c",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "id",
                "57e5fc11e4b060e2d487f24c"
              ]
            },
            "description": "Remove the Device designated by database generated id. This does not remove associated objects (addressable, service, profile, etc.). Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "07_404 http://localhost:48081/api/v1/device/name/:name/opstate/{updateOpState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "538b3a6b-e143-45e3-8909-9cf541af20da",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/name/:name/opstate/{updateOpState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.TextPlainContentType] = responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/name/:name/opstate/{{updateOpState}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "name",
                ":name",
                "opstate",
                "{{updateOpState}}"
              ],
              "variable": [
                {
                  "key": "name",
                  "value": "{{name}}"
                }
              ]
            },
            "description": "Update the op status time of the device by unique name of the device. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the name provided."
          },
          "response": []
        },
        {
          "name": "10_404 http://localhost:48081/api/v1/device/name/:name/adminstate/{updateAdminState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "eca7fc7b-9693-4412-b4cb-5ee2009ffd85",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/name/:name/adminstate/{updateAdminState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.TextPlainContentType] = responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/name/:name/adminstate/{{updateAdminState}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "name",
                ":name",
                "adminstate",
                "{{updateAdminState}}"
              ],
              "variable": [
                {
                  "key": "name",
                  "value": "{{name}}"
                }
              ]
            },
            "description": "Update the admin state of the device by device name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "13_404 http://localhost:48081/api/v1/device/name/:name/lastreported/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "868a7d49-1fb4-4a9f-a1bb-9f0744b123d8",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/name/:name/lastreported/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.TextPlainContentType] = responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/name/{{invalidDeviceName}}/lastreported/{{time}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "name",
                "{{invalidDeviceName}}",
                "lastreported",
                "{{time}}"
              ]
            },
            "description": "Update the last reported time of the device by unique name of the device. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the name provided."
          },
          "response": []
        },
        {
          "name": "16_404 http://localhost:48081/api/v1/device/name/:name/lastconnected/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "76201527-e3a7-40e7-9a56-6962dea9975f",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/devicename/:name/lastconnected/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.TextPlainContentType] = responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/name/{{invalidDeviceName}}/lastconnected/{{time}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "name",
                "{{invalidDeviceName}}",
                "lastconnected",
                "{{time}}"
              ]
            },
            "description": "Update the last connected time of the device by unique name of the device. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the name provided."
          },
          "response": []
        },
        {
          "name": "19_404 http://localhost:48081/api/v1/device/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3acdcea2-ce4b-4f22-aa98-f5f31772a62b",
                "exec": [
                  "    /**",
                  "     * Test Case:  /api/v1/device/name/{name} - DELETE",
                  "     * Version: Alpha",
                  "     * @Author: Tata Elxsi",
                  "     *",
                  "     **/",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is text/plain\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/name/livingroomthermostat12",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "name",
                "livingroomthermostat12"
              ]
            },
            "description": "Remove the Device designated by unique name. This does not remove associated objects (addressable, service, profile, etc.). Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "24_404 http://localhost:48081/api/v1/device/:id/opstate/{updateOpState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "32395199-067d-44cc-8c65-bbbfc609c3d5",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/:id/opState/{updateOpState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/{{InvalidId}}/opstate/{{updateOpState}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "{{InvalidId}}",
                "opstate",
                "{{updateOpState}}"
              ]
            },
            "description": "Update the op state of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "27_404 http://localhost:48081/api/v1/device/:id/adminstate/{updateAdminState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f632a4ba-73f2-4b0c-8594-9407fca6ad28",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/:id/adminState/{updateAdminState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/{{InvalidId}}/adminstate/{{updateAdminState}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "{{InvalidId}}",
                "adminstate",
                "{{updateAdminState}}"
              ]
            },
            "description": "Update the admin state of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "30_404 http://localhost:48081/api/v1/device/:id/lastreported/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "11cbfbd3-45ee-4405-95b5-f5e8c307d4fe",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/:id/lastreported/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType)",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/{{InvalidId}}/lastreported/{{time}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "{{InvalidId}}",
                "lastreported",
                "{{time}}"
              ]
            },
            "description": "Update the last reported time of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "33_404 http://localhost:48081/api/v1/device/:id/lastconnected/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fecf87a-e7f5-475d-b75c-5cc7f5b71a87",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/:id/lastconnected/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/{{InvalidId}}/lastconnected/{{time}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "{{InvalidId}}",
                "lastconnected",
                "{{time}}"
              ]
            },
            "description": "Update the last connected time of the device by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "40_404 http://localhost:48081/api/v1/device/profile/:profileId",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cc5c6e8b-f940-4b31-b305-5c4e8df3fea3",
                "exec": [
                  "    /**",
                  "     * Test Case: /api/v1/device/profile/:profileId - GET",
                  "     * Version: Alpha",
                  "     * @Author: Tata Elxsi",
                  "     *",
                  "     **/",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/profile/57e866d4e4b0ca8e6d73a412",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "profile",
                "57e866d4e4b0ca8e6d73a412"
              ]
            },
            "description": "Find all devices associated to the DeviceProfile with the specified profile database generated identifier. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the id provided."
          },
          "response": []
        },
        {
          "name": "43_404 http://localhost:48081/api/v1/device/service/:serviceId",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e3bbaad0-b4c7-4e1b-8bdc-36f5e72fdc33",
                "exec": [
                  "    /**",
                  "     * Test Case: /api/v1/device/service/:serviceId - GET",
                  "     * Version: Alpha",
                  "     * @Author: Tata Elxsi",
                  "     *",
                  "     **/",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/service/57e866d4e4b0ca8e6d73a412",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "service",
                "57e866d4e4b0ca8e6d73a412"
              ]
            },
            "description": "Find all devices associated to the DeviceService with the specified DeviceService database generated identifier. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the id provided."
          },
          "response": []
        },
        {
          "name": "46_404 http://localhost:48081/api/v1/device/servicename/:servicename",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b5b3620e-bf72-4ab5-ad0c-abe686d0dc47",
                "exec": [
                  "    /**",
                  "     * Test Case: /api/v1/device/servicename/:servicename - GET",
                  "     * Version: Alpha",
                  "     * @Author: Tata Elxsi",
                  "     *",
                  "     **/",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/servicename/ABC",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "servicename",
                "ABC"
              ]
            },
            "description": "Find all devices associated to the DeviceService with the specified service name (DeviceService names must be unique). List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the name provided."
          },
          "response": []
        },
        {
          "name": "49_404 http://localhost:48081/api/v1/device/addressablename/:addressablename",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8d25ba2c-5b0b-4af6-9d80-43ebd44aaf23",
                "exec": [
                  "    /**",
                  "     * Test Case: /api/v1/device/addressablename/:addressablename - GET",
                  "     * Version: Alpha",
                  "     * @Author: Tata Elxsi",
                  "     *",
                  "     **/",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/addressablename/{{InvalidAddressName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "addressablename",
                "{{InvalidAddressName}}"
              ]
            },
            "description": "Find all devices associated to the Addressable with the specified addressable name. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the name provided."
          },
          "response": []
        },
        {
          "name": "52_404 http://localhost:48081/api/v1/device/profilename/:profilename",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f268704f-f618-42c9-95bb-949310b99ebf",
                "exec": [
                  "    /**",
                  "     * Test Case: /api/v1/device/profilename/:profilename - GET",
                  "     * Version: Alpha",
                  "     * @Author: Tata Elxsi",
                  "     *",
                  "     **/",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is text/plain\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/profilename/{{InvalidProfileName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "profilename",
                "{{InvalidProfileName}}"
              ]
            },
            "description": "Find all devices associated to the DeviceProfile with the specified profile name. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the name provided."
          },
          "response": []
        },
        {
          "name": "55_404 http://localhost:48081/api/v1/device/addressable/:addressableId",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2ae66676-2f8e-4670-9892-8a4fab4cca0b",
                "exec": [
                  "  /**",
                  "     * Test Case: /api/v1/device/addressable/:addressableId - GET",
                  "     * Version: Alpha",
                  "     * @Author: Tata Elxsi",
                  "     *",
                  "     **/",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "        tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is text/plain\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "        }",
                  "        // the value descriptor cannot be located by the identifier.",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device/addressable/57e5fbfde4b060e2d487f244",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device",
                "addressable",
                "57e5fbfde4b060e2d487f244"
              ]
            },
            "description": "Find all devices associated to the Addressable with the specified addressable database generated identifier. List may be empty if no device match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the id provided."
          },
          "response": []
        },
        {
          "name": "61_404 http://localhost:48081/api/v1/device",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ba687a89-f177-4d53-a053-e866455f109c",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.TextPlainContentType] = responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "        }",
                  "    }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\":\"57bc6d80555e5218873e5a30\",\r\n  \"description\":\"living room thermostat\",\r\n  \"adminstate\":\"LOCKED\"\r\n  \r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device"
              ]
            },
            "description": "Update the Device identified by the id or name stored in the object provided. Id is used first, name is used second for identification purposes. Device's service & profile cannot be updated. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "58_400 http://localhost:48081/api/v1/device",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "047b9a1a-3afc-458c-bc06-93e85871aafb",
                "exec": [
                  "    /**",
                  "     * Test Case:  /api/v1/device - POST",
                  "     * Version: Alpha",
                  "     * @Author: Tata Elxsi",
                  "     *",
                  "     **/",
                  "    tests[\"Status code is 400\"] = responseCode.code === 400;",
                  "    if(responseCode.code === 400){",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is text/plain\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "        }",
                  "   }"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \r\n   \"origin\":1471806386919,\r\n   \"name\":\"Amazon Tap\",\r\n   \"description\":\" Portable voice controlled speaker\",\r\n   \"adminstate\":\"UNLOCKED\",\r\n   \"operatingState\":\"ENABLED\",\r\n   \"addressable\":{  \r\n      \"name\":\"\"\r\n   },\r\n   \"labels\":[  \r\n      \"home\",\r\n      \"hvac\",\r\n      \"thermostat\"\r\n   ],\r\n   \"location\":\"{lat:45.45,long:47.80}\",\r\n   \"responseDelay\":0,\r\n   \"service\":{  \r\n      \"name\":\"home thermostat device service\"\r\n   },\r\n   \"profile\":{  \r\n      \"name\":\"thermostat profile\"\r\n   }\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/device",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "device"
              ]
            },
            "description": "Add a new Device - name must be unique. Embedded objects (device, service, profile, addressable) are all referenced in the new Device object by id or name to associated objects. All other data in the embedded objects will be ignored. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 400) if an associated object (Addressable, Profile, Service) cannot be found with the id or name provided."
          },
          "response": []
        }
      ],
      "description": "Folder for device API's with 4xx status"
    },
    {
      "name": "deviceprofile",
      "item": [
        {
          "name": "128 http://localhost:48081/api/v1/deviceprofile/id/{DeviceProfileId}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceprofile/id/{{dpPresentDelete}} - DELETE",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "  ",
                  "  tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "  if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Request Objec Deleted\"] = responseBody === \"true\";",
                  "        }",
                  "  }"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/id/{{dpPresentDeleteByID}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "id",
                "{{dpPresentDeleteByID}}"
              ]
            },
            "description": "Remove the DeviceProfile designated by database generated id. This does not remove associated commands. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device profile cannot be found by the identifier provided. Returns DataValidationException (HTTP 413) if devices still reference the profile."
          },
          "response": []
        },
        {
          "name": "130 http://localhost:48081/api/v1/deviceprofile/manufacturer/{manufacturerName}/model/{modelName}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /deviceprofile/manufacturer/{{dpByManufacturerName}}/model/{{dpByModel}} - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var responseDeviceProfileData;",
                  "    try{",
                  "        //Parse json response",
                  "        responseDeviceProfileData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(responseDeviceProfileData !== null) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(responseDeviceProfileData, data.deviceProfileSchemaArray);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = responseDeviceProfileData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/manufacturer/{{dpByManufacturerName}}/model/{{dpByModel}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "manufacturer",
                "{{dpByManufacturerName}}",
                "model",
                "{{dpByModel}}"
              ]
            },
            "description": "Find all DeviceProfiles with a manufacture or model attribute matching that provided (either matching provides a hit). List may be empty if no profiles match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "134 http://localhost:48081/api/v1/deviceprofile/name/{profileName}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /deviceprofile/name/{{dpPresentDeleteByName}} - DELETE",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "  ",
                  "  tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "  if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Request Objec Deleted\"] = responseBody === \"true\";",
                  "        }",
                  "  }"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/name/{{dpPresentDeleteByName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "name",
                "{{dpPresentDeleteByName}}"
              ]
            },
            "description": "Remove the DeviceProfile designated by unique name. This does not remove associated commands. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device profile cannot be found by the name provided. Returns DataValidationException (HTTP 413) if devices still reference the profile."
          },
          "response": []
        },
        {
          "name": "138 http://localhost:48081/api/v1/deviceprofile/name/{profileName}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /deviceprofile/manufacturer/{{dpByManufacturerName}} - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var responseDeviceProfileData;",
                  "    try{",
                  "        //Parse json response",
                  "        responseDeviceProfileData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(responseDeviceProfileData !== null) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(responseDeviceProfileData, data.deviceProfileSchemaObject);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = responseDeviceProfileData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/name/{{dpByName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "name",
                "{{dpByName}}"
              ]
            },
            "description": "Return the DeviceProfile matching given name (profile names should be unique). May be null if no profiles matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "140 http://localhost:48081/api/v1/deviceprofile/uploadfile",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c88e8601-6eb4-4ef1-9284-3291b3525a8d",
                "exec": [
                  "/**",
                  "* Test Case:  /api/v1/deviceprofile - POST",
                  "* Version: Alpha",
                  "* @Author: Tata Elxsi",
                  "*",
                  "**/",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response time is less than 800ms\"] = responseTime < 800;",
                  "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "if (contentTypeHeaderExists) {",
                  "    tests[\"Content-Type is text/plain\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "sample_profile.yaml",
                  "enabled": true
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/uploadfile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "uploadfile"
              ]
            },
            "description": "Add a new DeviceProfile (and associated Command objects) via YAML profile file - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile. Returns ClientException (HTTP 400) if the YAML file is empty."
          },
          "response": []
        },
        {
          "name": "144 http://localhost:48081/api/v1/deviceprofile/{DeviceProfileId}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /deviceprofile/manufacturer/{{dpByManufacturerName}} - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var responseDeviceProfileData;",
                  "    try{",
                  "        //Parse json response",
                  "        responseDeviceProfileData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(responseDeviceProfileData !== null) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(responseDeviceProfileData, data.deviceProfileSchemaObject);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = responseDeviceProfileData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/{{dpById}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "{{dpById}}"
              ]
            },
            "description": "Fetch a specific profile by database generated id. May return null if no profile with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "149 http://localhost:48081/api/v1/deviceprofile/yaml/name/{DeviceProfileName}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "    /**",
                  "     * Test Case:  /deviceprofile/yaml/name/{{dpByName}} - GET",
                  "     * Version: Alpha",
                  "     * @Author: Tata Elxsi",
                  "     *",
                  "     **/",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "        }",
                  "        // the device Profile cannot be located by the identifier.",
                  "        tests[\"contains commands\"] = responseBody.has(\"commands\");",
                  "        tests[\"contains objects\"] = responseBody.has(\"objects\");",
                  "        tests[\"contains description\"] = responseBody.has(\"description\");",
                  "        tests[\"contains labels\"] = responseBody.has(\"labels\");",
                  "        tests[\"contains manufacturer\"] = responseBody.has(\"manufacturer\");",
                  "        tests[\"contains model\"] = responseBody.has(\"model\");",
                  "        tests[\"contains name\"] = responseBody.has(\"DeviceProfileGetByName\");",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/yaml/name/{{dpByName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "yaml",
                "name",
                "{{dpByName}}"
              ]
            },
            "description": "Return, in yaml form, the DeviceProfiles matching given name (profile names should be unique). May be null if no profiles matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "151 http://localhost:48081/api/v1/deviceprofile/yaml/{DeviceProfileId}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "    /**",
                  "     * Test Case:  /deviceprofile/yaml/{{dpById}} - GET",
                  "     * Version: Alpha",
                  "     * @Author: Tata Elxsi",
                  "     *",
                  "     **/",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "        }",
                  "        // the device Profile cannot be located by the identifier.",
                  "        tests[\"contains commands\"] = responseBody.has(\"commands\");",
                  "        tests[\"contains objects\"] = responseBody.has(\"objects\");",
                  "        tests[\"contains description\"] = responseBody.has(\"description\");",
                  "        tests[\"contains labels\"] = responseBody.has(\"labels\");",
                  "        tests[\"contains manufacturer\"] = responseBody.has(\"manufacturer\");",
                  "        tests[\"contains model\"] = responseBody.has(\"model\");",
                  "        tests[\"contains name\"] = responseBody.has(\"DeviceProfileGetById\");",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/yaml/{{dpById}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "yaml",
                "{{dpById}}"
              ]
            },
            "description": "Fetch the profile identified by database generated id and return as a YAML string. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "153 http://localhost:48081/api/v1/deviceprofile/model/{modelName}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /deviceprofile/model/{{dpByModel}} - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var responseDeviceProfileData;",
                  "    try{",
                  "        //Parse json response",
                  "        responseDeviceProfileData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(responseDeviceProfileData !== null) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(responseDeviceProfileData, data.deviceProfileSchemaArray);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = responseDeviceProfileData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/model/{{dpByModel}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "model",
                "{{dpByModel}}"
              ]
            },
            "description": "Find all DeviceProfiles with a model attribute matching that provided. List may be empty if no profiles match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "155 http://localhost:48081/api/v1/deviceprofile/label/{label}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /deviceprofile/label/{{dpByLable}} - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var responseDeviceProfileData;",
                  "    try{",
                  "        //Parse json response",
                  "        responseDeviceProfileData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(responseDeviceProfileData !== null) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(responseDeviceProfileData, data.deviceProfileSchemaArray);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = responseDeviceProfileData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/label/{{dpByLable}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "label",
                "{{dpByLable}}"
              ]
            },
            "description": "Find all DeviceProfiles having at least one label matching the label provided. List may be empty if no profiles match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "157 http://localhost:48081/api/v1/deviceprofile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceprofile - POST",
                  " * Version: Alpha",
                  " * Services: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "",
                  "    tests[\"DeviceProfile Created\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        if(null !== responseBody){",
                  "            tests[\"Response Object id\"] = responseBody.length === 24;",
                  "        } else{",
                  "            tests[\"Response list is empty\"] = responseBody.length === 0",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"origin\":1471806386919,\r\n  \"name\":\"TestProfileToPostUniqe\",\r\n  \"description\":\"BACnet Honeywell thermostats\",\r\n  \"manufacturer\":\"Honeywell\",\r\n  \"model\":\"ABC123\",\r\n  \"labels\":[\"bacnet\",\"thermostat\",\"Honeywell\"],\r\n  \"commands\":[\r\n    {\r\n      \"origin\":1471806386919,\r\n      \"name\":\"cooling point\",\r\n      \"get\":\r\n        {\r\n          \"path\":\"/cooling\",\r\n          \"response\":{\r\n            \"code\":\"200\",\r\n            \"errorDescription\":\"not a float\",\r\n            \"expectedValues\":\"temperature\"\r\n          }\r\n        },\r\n      \"put\":{\r\n        \"path\":\"/cooling\",\r\n        \"response\":{\r\n          \"code\":\"200\",\r\n          \"errorDescription\":\"not a float\",\r\n          \"expectedValues\":\"temperature\"\r\n        },\r\n        \"parameters\":[  \r\n               {  \r\n                  \"name\":\"coolingpoint\",\r\n                  \"value\":\"float\",\r\n                  \"uom\":\"string\"\r\n               }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"objects\":{\r\n    \"resources\":{\r\n      \"CurrentHumidity\":{\r\n        \"get\":[\r\n          {\r\n            \"parameter\":\"CurrentHumidity\",\r\n            \"property\":\"presentValue\",\r\n            \"operation\":\"get\",\r\n            \"object\":\"AnalogValue_22\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile"
              ]
            },
            "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile."
          },
          "response": []
        },
        {
          "name": "160 http://localhost:48081/api/v1/deviceprofile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  " /**",
                  " * Test Case:  /deviceprofile - PUT",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "",
                  "  tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "  if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Body has True\"] = responseBody === \"true\";",
                  "        }",
                  "  }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"57f4995be4b060e268aeb085\",\n    \"description\": \"Test DeviceProfile after PUT\",\n    \"commands\": [\n      {\n        \"id\": \"57f4995be4b060e268aeb084\",\n        \"get\": {\n          \"response\": {\n            \"errorDescription\": \"Integer Value\",\n            \"expectedValues\": \"temperature\"\n          }\n        },\n        \"put\": {\n          \"response\": {\n            \"errorDescription\": \"Integer Value\",\n            \"expectedValues\": \"temperature\"\n          }\n        }\n      }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile"
              ]
            },
            "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile."
          },
          "response": []
        },
        {
          "name": "163 http://localhost:48081/api/v1/deviceprofile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /deviceprofile - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "",
                  "//Test Case for status : 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Test content type should present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var responseDeviceProfileData;",
                  "    try{",
                  "        //Parse json response",
                  "        responseDeviceProfileData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(responseDeviceProfileData !== null) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(responseDeviceProfileData, data.deviceProfileSchemaArray);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Event is empty.\");",
                  "        tests[\"Is Event empty\"] = responseDeviceProfileData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile"
              ]
            },
            "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile."
          },
          "response": []
        },
        {
          "name": "146 http://localhost:48081/api/v1/deviceprofile/upload",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "name: \"yaml thermostat profile\"\ndescription: \"BACnet Honeywell thermostats\"\nmanufacturer: \"Honeywell\"\nmodel: \"ABC123\"\nlabels: \n  - \"bacnet\"\n  - \"thermostat\"\n  - \"Honeywell\"\n  \ncommands:\n  - name: \"cooling point\"\n    get:\n        path: \"/cooling\"\n        responses:\n          - code: \"200\"\n            description: \"not a float\"\n            expectedValues: \n              - \"temperature\"\n    put:\n        path: \"/cooling\" \n        responses:\n          - code: \"200\"\n            description: \"not a float\"\n            expectedValues: \n              - \"temperature\"\n        parameters:\n          - name: \"coolingpoint\"\n            value: \"cooling\"\n          \n"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/upload",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "upload"
              ]
            },
            "description": "Add a new DeviceProfile (and associated Command objects) via YAML profile file - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile. Returns ClientException (HTTP 400) if the YAML file is empty."
          },
          "response": []
        }
      ],
      "description": "Folder for deviceprofile"
    },
    {
      "name": "deviceprofile_error_4xx",
      "item": [
        {
          "name": "136 http://localhost:48081/api/v1/deviceprofile/name/{profileName}",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "065c5f79-0cf9-4b7e-9d92-9f191fdddd7f",
                "exec": [
                  "/**",
                  "* Test Case:  /deviceprofile/id/{{dpPresentDelete}} - DELETE",
                  "* Version: Alpha",
                  "* @Author: Tata Elxsi",
                  "*",
                  "**/",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "if (contentTypeHeaderExists) {",
                  "    tests[\"Content-Type is text/plain\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "}",
                  "// the device Profile cannot be located by the identifier.",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/name/{{dpNotPresentDeleteByName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "name",
                "{{dpNotPresentDeleteByName}}"
              ]
            },
            "description": "Remove the DeviceProfile designated by unique name. This does not remove associated commands. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device profile cannot be found by the name provided. Returns DataValidationException (HTTP 413) if devices still reference the profile."
          },
          "response": []
        },
        {
          "name": "159 http://localhost:48081/api/v1/deviceprofile",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a9190c7c-38bf-4d6c-aa36-992fb002743d",
                "exec": [
                  "/**",
                  "* Test Case:  /api/v1/deviceprofile - POST",
                  "* Version: Alpha",
                  "* @Author: Tata Elxsi",
                  "*",
                  "**/",
                  "tests[\"Status code is 404\"] = responseCode.code === 409;",
                  "tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "if (contentTypeHeaderExists) {",
                  "    tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "}",
                  "// the device Profile cannot be located by the identifier."
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"origin\":1471806386919,\r\n  \"name\":\"TestProfileToPost\",\r\n  \"description\":\"BACnet Honeywell thermostats\",\r\n  \"manufacturer\":\"Honeywell\",\r\n  \"model\":\"ABC123\",\r\n  \"labels\":[\"bacnet\",\"thermostat\",\"Honeywell\"],\r\n  \"commands\":[\r\n    {\r\n      \"origin\":1471806386919,\r\n      \"name\":\"cooling point\",\r\n      \"get\":\r\n        {\r\n          \"path\":\"/cooling\",\r\n          \"response\":{\r\n            \"code\":\"200\",\r\n            \"errorDescription\":\"not a float\",\r\n            \"expectedValues\":\"temperature\"\r\n          }\r\n        },\r\n      \"put\":{\r\n        \"path\":\"/cooling\",\r\n        \"response\":{\r\n          \"code\":\"200\",\r\n          \"errorDescription\":\"not a float\",\r\n          \"expectedValues\":\"temperature\"\r\n        },\r\n        \"parameters\":[  \r\n               {  \r\n                  \"name\":\"coolingpoint\",\r\n                  \"value\":\"float\",\r\n                  \"uom\":\"string\"\r\n               }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      \"origin\":1471806386919,\r\n      \"name\":\"cooling point\",\r\n      \"get\":\r\n        {\r\n          \"path\":\"/cooling\",\r\n          \"response\":{\r\n            \"code\":\"200\",\r\n            \"errorDescription\":\"not a float\",\r\n            \"expectedValues\":\"temperature\"\r\n          }\r\n        },\r\n      \"put\":{\r\n        \"path\":\"/cooling\",\r\n        \"response\":{\r\n          \"code\":\"200\",\r\n          \"errorDescription\":\"not a float\",\r\n          \"expectedValues\":\"temperature\"\r\n        },\r\n        \"parameters\":[  \r\n               {  \r\n                  \"name\":\"coolingpoint\",\r\n                  \"value\":\"float\",\r\n                  \"uom\":\"string\"\r\n               }\r\n        ]\r\n      }\r\n    }\r\n  ],\r\n  \"objects\":{\r\n    \"resources\":{\r\n      \"CurrentHumidity\":{\r\n        \"get\":[\r\n          {\r\n            \"parameter\":\"CurrentHumidity\",\r\n            \"property\":\"presentValue\",\r\n            \"operation\":\"get\",\r\n            \"object\":\"AnalogValue_22\"\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile"
              ]
            },
            "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile."
          },
          "response": []
        },
        {
          "name": "162 http://localhost:48081/api/v1/deviceprofile",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3911f4f8-70c8-4e0c-a7cd-700e7e440aa7",
                "exec": [
                  "/**",
                  "* Test Case:  /deviceprofile - PUT",
                  "* Version: Alpha",
                  "* @Author: Tata Elxsi",
                  "*",
                  "**/",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "if (contentTypeHeaderExists) {",
                  "    tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"id\": \"57f4995be4b060e268aeb000\",\n    \"description\": \"Test DeviceProfile after PUT\",\n    \"commands\": [\n      {\n        \"id\": \"57f4995be4b060e268aeb084\",\n        \"get\": {\n          \"response\": {\n            \"errorDescription\": \"Integer Value\",\n            \"expectedValues\": \"temperature\"\n          }\n        },\n        \"put\": {\n          \"response\": {\n            \"errorDescription\": \"Integer Value\",\n            \"expectedValues\": \"temperature\"\n          }\n        }\n      }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile"
              ]
            },
            "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile."
          },
          "response": []
        },
        {
          "name": "1001 http://localhost:48081/api/v1/deviceprofile/id/{DeviceProfileId}",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fa0a7bd7-80d0-422c-a731-6d0f8ec31dd6",
                "exec": [
                  "/**",
                  "* Test Case:  /deviceprofile/id/{{dpPresentDelete}} - DELETE",
                  "* Version: Alpha",
                  "* @Author: Tata Elxsi",
                  "*",
                  "**/",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "if (contentTypeHeaderExists) {",
                  "    tests[\"Content-Type is text/plain\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "}",
                  "// the device Profile cannot be located by the identifier."
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/id/{{dpNotPresentDeleteByID}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "id",
                "{{dpNotPresentDeleteByID}}"
              ]
            },
            "description": "Remove the DeviceProfile designated by database generated id. This does not remove associated commands. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device profile cannot be found by the identifier provided. Returns DataValidationException (HTTP 413) if devices still reference the profile."
          },
          "response": []
        },
        {
          "name": "142_409 http://localhost:48081/api/v1/deviceprofile/uploadfile",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9997a40e-abc0-4207-8177-4b0b1b40f900",
                "exec": [
                  "/**",
                  "* Test Case:  /api/v1/deviceprofile - POST",
                  "* Version: Alpha",
                  "* @Author: Tata Elxsi",
                  "*",
                  "**/",
                  "tests[\"Status code is 409\"] = responseCode.code === 409;",
                  "tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "if (contentTypeHeaderExists) {",
                  "    tests[\"Content-Type is text/plain\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "}",
                  "// the device Profile cannot be located by the identifier."
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "sample_profile_duplicated_command.yaml",
                  "enabled": true
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/uploadfile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "uploadfile"
              ]
            },
            "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile."
          },
          "response": []
        },
        {
          "name": "143_400 http://localhost:48081/api/v1/deviceprofile/uploadfile",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "242ab5c8-6d90-472f-a454-123878b5a571",
                "exec": [
                  "/**",
                  "* Test Case:  /api/v1/deviceprofile - POST",
                  "* Version: Alpha",
                  "* @Author: Tata Elxsi",
                  "*",
                  "**/",
                  "tests[\"Status code is 400\"] = responseCode.code === 400;",
                  "tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "if (contentTypeHeaderExists) {",
                  "    tests[\"Content-Type is text/plain\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "sample_profile_empty.yaml",
                  "enabled": true
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/uploadfile",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "uploadfile"
              ]
            },
            "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile."
          },
          "response": []
        },
        {
          "name": "148_409 http://localhost:48081/api/v1/deviceprofile/upload",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92b5d540-2463-4d37-8ea9-494e28e01bf5",
                "exec": [
                  "/**",
                  "* Test Case:  /api/v1/deviceprofile - POST",
                  "* Version: Alpha",
                  "* @Author: Tata Elxsi",
                  "*",
                  "**/",
                  "tests[\"Status code is 409\"] = responseCode.code === 409;",
                  "tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "if (contentTypeHeaderExists) {",
                  "    tests[\"Content-Type is text/plain\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "}",
                  "// the device Profile cannot be located by the identifier."
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "name: \"yaml thermostat profile\"\ndescription: \"BACnet Honeywell thermostats\"\nmanufacturer: \"Honeywell\"\nmodel: \"ABC123\"\nlabels: \n  - \"bacnet\"\n  - \"thermostat\"\n  - \"Honeywell\"\n  \ncommands:\n  - name: \"cooling point\"\n    get:\n        path: \"/cooling\"\n        responses:\n          - code: \"200\"\n            description: \"not a float\"\n            expectedValues: \n              - \"temperature\"\n    put:\n        path: \"/cooling\" \n        responses:\n          - code: \"200\"\n            description: \"not a float\"\n            expectedValues: \n              - \"temperature\"\n        parameters:\n          - name: \"coolingpoint\"\n            value: \"cooling\"\n          \n"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceprofile/upload",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceprofile",
                "upload"
              ]
            },
            "description": "Add a new DeviceProfile (and associated Command objects) - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated command's name is a duplicate for the profile."
          },
          "response": []
        }
      ]
    },
    {
      "name": "devicereport",
      "item": [
        {
          "name": "178 http://localhost:48081/api/v1/devicereport/{valueDescriptorsFor}/{DeviceName}",
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/devicereport/{{valueDescriptorsFor}}/{{DeviceName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "devicereport",
                "{{valueDescriptorsFor}}",
                "{{DeviceName}}"
              ]
            },
            "description": "Return list of value descriptor names associated to device reports associated to name of the device provided. May be an empty list if no device matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "180 http://localhost:48081/api/v1/devicereport",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"origin\":1471806386919,\r\n  \"name\":\"livingroom collection report\",\r\n  \"device\":\"TestDeviceLinkToProfile\",\r\n  \"event\":\"temperature collection\",\r\n  \"expected\":[\"temperature\"]\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/devicereport",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "devicereport"
              ]
            },
            "description": "Add a new DeviceReport - name must be unique. Referenced objects (device, schedule event) are all referenced in the new DeviceReport by name and must already be persisted. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if any referenced object cannot be found by its provided name."
          },
          "response": []
        },
        {
          "name": "183 http://localhost:48081/api/v1/devicereport",
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/devicereport",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "devicereport"
              ]
            },
            "description": "Add a new DeviceReport - name must be unique. Referenced objects (device, schedule event) are all referenced in the new DeviceReport by name and must already be persisted. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if any referenced object cannot be found by its provided name."
          },
          "response": []
        },
        {
          "name": "186 http://localhost:48081/api/v1/devicereport",
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/devicereport",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "devicereport"
              ]
            },
            "description": "Add a new DeviceReport - name must be unique. Referenced objects (device, schedule event) are all referenced in the new DeviceReport by name and must already be persisted. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if any referenced object cannot be found by its provided name."
          },
          "response": []
        },
        {
          "name": "166 http://localhost:48081/api/v1/devicereport/id/{DeviceReportId}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /devicereport/id/{{drDelByID}} - DELETE",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "  ",
                  "  tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "  if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Request Objec Deleted\"] = responseBody === \"true\";",
                  "        }",
                  "  }"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/devicereport/id/{{drPresentDelByID}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "devicereport",
                "id",
                "{{drPresentDelByID}}"
              ]
            },
            "description": "Remove the DevicReport designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no DeviceReport is found with the provided id."
          },
          "response": []
        },
        {
          "name": "169 http://localhost:48081/api/v1/devicereport/name/{DeviceReportName}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /devicereport/name/{{drPresentDelByName}} - DELETE",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "  ",
                  "  tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "  if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Request Objec Deleted\"] = responseBody === \"true\";",
                  "        }",
                  "  }"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/devicereport/name/{{drPresentDelByName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "devicereport",
                "name",
                "{{drPresentDelByName}}"
              ]
            },
            "description": "Remove the DevicReport designated by name. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no DeviceReport is found with the provided name."
          },
          "response": []
        },
        {
          "name": "172 http://localhost:48081/api/v1/devicereport/name/{DeviceReportName}",
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/devicereport/name/{{DeviceReportName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "devicereport",
                "name",
                "{{DeviceReportName}}"
              ]
            },
            "description": "Remove the DevicReport designated by name. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no DeviceReport is found with the provided name."
          },
          "response": []
        },
        {
          "name": "174 http://localhost:48081/api/v1/devicereport/{DeviceReportId}",
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/devicereport/{{DeviceReportId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "devicereport",
                "{{DeviceReportId}}"
              ]
            },
            "description": "Fetch a specific DeviceReport by database generated id. May return null if no report with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "176 http://localhost:48081/api/v1/devicereport/devicename/{DeviceName}",
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/devicereport/devicename/{{DeviceName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "devicereport",
                "devicename",
                "{{DeviceName}}"
              ]
            },
            "description": "Return DeviceReports with associated device matching given name (device names should be unique). May be an empty list if no device matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        }
      ],
      "description": "Folder for devicereport"
    },
    {
      "name": "devicereport_error_4xx",
      "item": [
        {
          "name": "182 http://localhost:48081/api/v1/devicereport",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/devicereport",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "devicereport"
              ]
            },
            "description": "Add a new DeviceReport - name must be unique. Referenced objects (device, schedule event) are all referenced in the new DeviceReport by name and must already be persisted. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if any referenced object cannot be found by its provided name."
          },
          "response": []
        },
        {
          "name": "185 http://localhost:48081/api/v1/devicereport",
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/devicereport",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "devicereport"
              ]
            },
            "description": "Add a new DeviceReport - name must be unique. Referenced objects (device, schedule event) are all referenced in the new DeviceReport by name and must already be persisted. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if any referenced object cannot be found by its provided name."
          },
          "response": []
        },
        {
          "name": "168 http://localhost:48081/api/v1/devicereport/id/{DeviceReportId}",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c9561946-9fc7-4885-90db-a08acd741ff3",
                "exec": [
                  "/**",
                  "* Test Case:  /devicereport/id/{{drPresentDelByID}} - DELETE",
                  "* Version: Alpha",
                  "* @Author: Tata Elxsi",
                  "*",
                  "**/",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "if (contentTypeHeaderExists) {",
                  "    tests[\"Content-Type is text/plain\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "}",
                  "// the device Profile cannot be located by the identifier."
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/devicereport/id/{{drPresentDelByID}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "devicereport",
                "id",
                "{{drPresentDelByID}}"
              ]
            },
            "description": "Remove the DevicReport designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no DeviceReport is found with the provided id."
          },
          "response": []
        },
        {
          "name": "171 http://localhost:48081/api/v1/devicereport/name/{DeviceReportName}",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0b74dc5f-33ec-4eff-9a2c-80e4da0ae7ee",
                "exec": [
                  "/**",
                  "* Test Case:  /devicereport/name/{{drNotPresentDelByName}} - DELETE",
                  "* Version: Alpha",
                  "* @Author: Tata Elxsi",
                  "*",
                  "**/",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "if (contentTypeHeaderExists) {",
                  "    tests[\"Content-Type is text/plain\"] = responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "}",
                  "// the device Profile cannot be located by the identifier."
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/devicereport/name/{{drNotPresentDelByName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "devicereport",
                "name",
                "{{drNotPresentDelByName}}"
              ]
            },
            "description": "Remove the DevicReport designated by name. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no DeviceReport is found with the provided name."
          },
          "response": []
        },
        {
          "name": "188 http://localhost:48081/api/v1/devicereport",
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/devicereport",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "devicereport"
              ]
            },
            "description": "Add a new DeviceReport - name must be unique. Referenced objects (device, schedule event) are all referenced in the new DeviceReport by name and must already be persisted. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if any referenced object cannot be found by its provided name."
          },
          "response": []
        }
      ]
    },
    {
      "name": "deviceservice",
      "item": [
        {
          "name": "195 http://localhost:48081/api/v1/deviceservice/name/:name/opstate/{opState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/name/:name/opstate/{opState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"DeviceService updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/name/{{updateDeviceServiceOpStateByName}}/opstate/{{updateOpStateByName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "name",
                "{{updateDeviceServiceOpStateByName}}",
                "opstate",
                "{{updateOpStateByName}}"
              ]
            },
            "description": "Update the op status time of the device service by unique name of the device service. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided."
          },
          "response": []
        },
        {
          "name": "189 http://localhost:48081/api/v1/deviceservice/id/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/id/:id - DELETE",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Record Deleted\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Request Object Deleted\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/id/{{deleteDeviceServiceById}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "id",
                "{{deleteDeviceServiceById}}"
              ]
            },
            "description": "Remove the DeviceService designated by database generated id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "198 http://localhost:48081/api/v1/deviceservice/name/:name/adminstate/{adminState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/name/:name/adminstate/{adminState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"DeviceService updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/name/{{updateDeviceServiceByNameAdminState}}/adminstate/{{updateAdminStateByName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "name",
                "{{updateDeviceServiceByNameAdminState}}",
                "adminstate",
                "{{updateAdminStateByName}}"
              ]
            },
            "description": "Update the admin state of the device service by device service name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "201 http://localhost:48081/api/v1/deviceservice/name/:name/lastreported/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/name/:name/lastreported/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length >= 0){",
                  "            tests[\"Last Reported Time updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/name/{{updateDevcieServiceByNameLastReportedTime}}/lastreported/{{updateDevcieServiceLastReportedTime}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "name",
                "{{updateDevcieServiceByNameLastReportedTime}}",
                "lastreported",
                "{{updateDevcieServiceLastReportedTime}}"
              ]
            },
            "description": "Update the last reported time of the device service by unique name of the device service. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided."
          },
          "response": []
        },
        {
          "name": "204 http://localhost:48081/api/v1/deviceservice/name/:name/lastconnected/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/name/:name/lastconnected/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Last Connected Time updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"origin\":1471806386920,\r\n  \"name\":\"home thermostat deviceservice\",\r\n  \"lastConnected\": 0,\r\n    \"lastReported\": 0,\r\n  \"labels\":[\r\n    \"hvac\",\"thermostat\"\r\n    ],\r\n  \"adminState\":\"LOCKED\",\r\n  \"operatingState\":\"ENABLED\",\r\n  \"addressable\":{\r\n    \"name\":\"hvac thermo address\"\r\n    }\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/name/home thermostat deviceservice/lastconnected/123456789",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "name",
                "home thermostat deviceservice",
                "lastconnected",
                "123456789"
              ]
            },
            "description": "Update the last connected time of the device service by unique name of the device service. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided."
          },
          "response": []
        },
        {
          "name": "207 http://localhost:48081/api/v1/deviceservice/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/name/:name - DELETE",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "         //Test body parameters",
                  "        var deviceService;",
                  "        try{",
                  "            //Parse json response",
                  "            deviceService = JSON.parse(responseBody);",
                  "        }catch(e) {",
                  "            console.log(\"Exception while parsing json response\");",
                  "        }",
                  "        ",
                  "        if(deviceService.length !== 0) {",
                  "            tests[\"DeviceService deleted by name\"] = responseBody === \"true\";    ",
                  "        } ",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/name/{{deleteDeviceServiceByName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "name",
                "{{deleteDeviceServiceByName}}"
              ]
            },
            "description": "Remove the DeviceService designated by name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided."
          },
          "response": []
        },
        {
          "name": "210 http://localhost:48081/api/v1/deviceservice/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/name/:name - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "       tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var deviceService;",
                  "        try{",
                  "            //Parse json response",
                  "            deviceService = JSON.parse(responseBody);",
                  "        }catch(e) {",
                  "            console.log(\"Exception while parsing json response\");",
                  "        }",
                  "        if(responseBody.length >= 0){",
                  "            tests[\"Is Valid Response Schema\"] = tv4.validate(deviceService, data.ObjectSchema);",
                  "        } else {",
                  "            tests[\"DeviceService list empty\"] = deviceService.length === 0",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/name/{{getDeviceServiceByName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "name",
                "{{getDeviceServiceByName}}"
              ]
            },
            "description": "Return the DeviceService matching given name (service names should be unique). May be null if no services matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "212 http://localhost:48081/api/v1/deviceservice/:id/opstate/{opState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/:id/opstate/{opState} - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"DeviceService updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceOpStateByID}}/opstate/{{updateDeviceServiceOpState}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "{{updateDeviceServiceOpStateByID}}",
                "opstate",
                "{{updateDeviceServiceOpState}}"
              ]
            },
            "description": "Update the op state of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "215 http://localhost:48081/api/v1/deviceservice/:id/adminstate/{adminState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/:id/adminState/{adminState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"DeviceService updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceAdminStateByID}}/adminstate/{{updateDeviceServiceAdminState}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "{{updateDeviceServiceAdminStateByID}}",
                "adminstate",
                "{{updateDeviceServiceAdminState}}"
              ]
            },
            "description": "Update the admin state of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "218 http://localhost:48081/api/v1/deviceservice/:id/lastreported/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/:id/lastreported/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"DeviceService updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceByLastReportedTimeById}}/lastreported/{{updateDeviceServiceByIdByTime}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "{{updateDeviceServiceByLastReportedTimeById}}",
                "lastreported",
                "{{updateDeviceServiceByIdByTime}}"
              ]
            },
            "description": "Update the last reported time of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "221 http://localhost:48081/api/v1/deviceservice/:id/lastconnected/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/:id/lastconnected/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"DeviceService updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceLastConnTimeById}}/lastconnected/{{updateDeviceServiceLastConnTime}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "{{updateDeviceServiceLastConnTimeById}}",
                "lastconnected",
                "{{updateDeviceServiceLastConnTime}}"
              ]
            },
            "description": "Update the last connected time of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "192 http://localhost:48081/api/v1/deviceservice/addressablename/:addressablename",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/addressablename/:addressablename - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "    ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "         tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "         //Test body parameters",
                  "        var deviceService;",
                  "        try{",
                  "            //Parse json response",
                  "            deviceService = JSON.parse(responseBody);",
                  "        }catch(e) {",
                  "            console.log(\"Exception while parsing json response\");",
                  "        }",
                  "        ",
                  "        if(responseBody.length >= 0) {",
                  "         tests[\"Is Valid Response Schema\"] = tv4.validate(deviceService, data.schema);",
                  "            console.log(\"Validation failed: \", tv4.error);",
                  "        } else {",
                  "            //Shows message when event list is empty",
                  "            console.log(\"DeviceService List Empty\");",
                  "            tests[\"DeviceService list empty\"] = deviceService.length === 0",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/addressablename/{{getDeviceServiceByAddressableName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "addressablename",
                "{{getDeviceServiceByAddressableName}}"
              ]
            },
            "description": "Find all device serices associated to the Addressable with the specified addressable name. List may be empty if no device services match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the name provided."
          },
          "response": []
        },
        {
          "name": "224 http://localhost:48081/api/v1/deviceservice/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/:id - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "       tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var deviceService;",
                  "        try{",
                  "            //Parse json response",
                  "            deviceService = JSON.parse(responseBody);",
                  "        }catch(e) {",
                  "            console.log(\"Exception while parsing json response\");",
                  "        }",
                  "        if(responseBody !== null){",
                  "            tests[\"Is Valid Response Schema\"] = tv4.validate(deviceService, data.ObjectSchema);",
                  "        } else {",
                  "            tests[\"DeviceService list empty\"] = deviceService.length === 0",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/{{getDeviceServiceById}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "{{getDeviceServiceById}}"
              ]
            },
            "description": "Fetch a specific device service by database generated id. May return null if no service with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "226 http://localhost:48081/api/v1/deviceservice/addressable/:addressableId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/addressable/:addressableId - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "         //Test body parameters",
                  "        var deviceService;",
                  "        try{",
                  "            //Parse json response",
                  "            deviceService = JSON.parse(responseBody);",
                  "        }catch(e) {",
                  "            console.log(\"Exception while parsing json response\");",
                  "        }",
                  "        ",
                  "        if(responseBody.length >= 0) {",
                  "         tests[\"Is Valid Response Schema\"] = tv4.validate(deviceService, data.schema);",
                  "            console.log(\"Validation failed: \", tv4.error);",
                  "        } else {",
                  "            //Shows message when event list is empty",
                  "            console.log(\"Valuedescriptor List Empty\");",
                  "            tests[\"DeviceService list empty\"] = deviceService.length === 0",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/addressable/{{getDeviceServiceByAddressableId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "addressable",
                "{{getDeviceServiceByAddressableId}}"
              ]
            },
            "description": "Find all device servicess associated to the Addressable with the specified addressable database generated identifier. List may be empty if no device service match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the id provided."
          },
          "response": []
        },
        {
          "name": "229 http://localhost:48081/api/v1/deviceservice/label/:label",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /api/v1/deviceservice/label/:label - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "         //Test body parameters",
                  "        var deviceService;",
                  "        try{",
                  "            //Parse json response",
                  "            deviceService = JSON.parse(responseBody);",
                  "        }catch(e) {",
                  "            console.log(\"Exception while parsing json response\");",
                  "        }",
                  "        ",
                  "        if(responseBody.length >= 0) {",
                  "         tests[\"Is Valid Response Schema\"] = tv4.validate(deviceService, data.schema);",
                  "            console.log(\"Validation failed: \", tv4.error);",
                  "        } else {",
                  "            //Shows message when event list is empty",
                  "            console.log(\"Valuedescriptor List Empty\");",
                  "            tests[\"DeviceService list empty\"] = deviceService.length === 0",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/label/{{getDeviceServiceByLabel}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "label",
                "{{getDeviceServiceByLabel}}"
              ]
            },
            "description": "Find all DeviceServices having at least one label matching the label provided. List may be empty if no device services match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "237 http://localhost:48081/api/v1/deviceservice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "         //Test body parameters",
                  "        var deviceService;",
                  "        try{",
                  "            //Parse json response",
                  "            deviceService = JSON.parse(responseBody);",
                  "        }catch(e) {",
                  "            console.log(\"Exception while parsing json response\");",
                  "        }",
                  "        ",
                  "        if(responseBody.length >= 0) {",
                  "         tests[\"Is Valid Response Schema\"] = tv4.validate(deviceService, data.schema);",
                  "            console.log(\"Validation failed: \", tv4.error);",
                  "        } else {",
                  "            //Shows message when event list is empty",
                  "            console.log(\"Valuedescriptor List Empty\");",
                  "            tests[\"DeviceService list empty\"] = deviceService.length === 0",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice"
              ]
            },
            "description": "Return all device services sorted by id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit."
          },
          "response": []
        },
        {
          "name": "234 http://localhost:48081/api/v1/deviceservice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"DeviceService updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"57f79ca1e4b060e2730a58fc\",\r\n  \"origin\":1471806386920,\r\n  \"name\":\"To update thermostat deviceservice\",\r\n  \"description\":\"manage homethermostats\",\r\n  \"labels\":[\r\n    \"hvac\",\"thermostat\"\r\n    ],\r\n  \"adminState\":\"LOCKED\",\r\n  \"operatingState\":\"ENABLED\",\r\n  \"addressable\":{\r\n    \"name\":\"hvac thermo address\"\r\n    }\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice"
              ]
            },
            "description": "Update the DeviceServcie identified by the id or name stored in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "231 http://localhost:48081/api/v1/deviceservice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice - POST",
                  " * Version: Alpha",
                  " * Services: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "",
                  "    tests[\"DeviceService Created\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        if(null !== responseBody){",
                  "            tests[\"Response Object id\"] = responseBody.length === 24;",
                  "        } else{",
                  "            tests[\"Response list is empty\"] = responseBody.length === 0",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"origin\":1471806386921,\r\n  \"name\":\"home thermostat device service1\",\r\n  \"description\":\"manage homethermostats\",\r\n  \"labels\":[\r\n    \"hvac\",\"thermostat\"\r\n    ],\r\n  \"adminState\":\"UNLOCKED\",\r\n  \"operatingState\":\"ENABLED\",\r\n  \"addressable\":{\r\n    \"name\":\"variableSpeedMeterTest\"\r\n    }\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice"
              ]
            },
            "description": "Add a new DeviceService - name must be unique.  The Addressable must already exist and can be referenced by an included Addressable object containing the Addressable's id or name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 409) if an associated addressable (by id or name) is not found."
          },
          "response": []
        },
        {
          "name": "355 http://localhost:48081/api/v1/deviceservice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "         var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"DeviceService updated\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"origin\":1471806386920,\r\n  \"name\":\"home thermostat deviceservice\",\r\n  \"description\":\"manage homethermostats\",\r\n  \"labels\":[\r\n    \"hvac\",\"thermostat\"\r\n    ],\r\n  \"adminState\":\"UNLOCKED\",\r\n  \"operatingState\":\"ENABLED\",\r\n  \"addressable\":{\r\n    \"name\":\"hvac thermo address\"\r\n    }\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice"
              ]
            },
            "description": "Update the DeviceServcie identified by the id or name stored in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "356 http://localhost:48081/api/v1/deviceservice/addressablename/hvac thermo addressT",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/addressablename/:addressablename - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "         //Test body parameters",
                  "        var deviceService;",
                  "        try{",
                  "            //Parse json response",
                  "            deviceService = JSON.parse(responseBody);",
                  "        }catch(e) {",
                  "            console.log(\"Exception while parsing json response\");",
                  "        }",
                  "        ",
                  "        if(deviceService.length !== 0) {",
                  "         tests[\"Is Valid Response Schema\"] = tv4.validate(deviceService, data.schema);",
                  "            console.log(\"Validation failed: \", tv4.error);",
                  "        } else {",
                  "            //Shows message when event list is empty",
                  "            console.log(\"DeviceService List Empty\");",
                  "            tests[\"DeviceService list empty\"] = deviceService.length === 0",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/addressablename/{{getDeviceServiceByAddressableNotExist}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "addressablename",
                "{{getDeviceServiceByAddressableNotExist}}"
              ]
            },
            "description": "Find all device serices associated to the Addressable with the specified addressable name. List may be empty if no device services match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the name provided"
          },
          "response": []
        },
        {
          "name": "361 http://localhost:48081/api/v1/deviceservice/label/:label",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/label/:label - GET",
                  " * Services: Metadata",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "    tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "         //Test body parameters",
                  "        if(responseBody.length >= 0){",
                  "      var jsonData = JSON.parse(responseBody);",
                  "        tests[\"Response Body is Empty\"] =  jsonData.length === 0;   ",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/label/{{getDeviceServiceByLabelNotExist}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "label",
                "{{getDeviceServiceByLabelNotExist}}"
              ]
            },
            "description": "Find all DeviceServices having at least one label matching the label provided. List may be empty if no device services match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        }
      ],
      "description": "Folder for deviceservice"
    },
    {
      "name": "deviceservice_error_4xx",
      "item": [
        {
          "name": "197 http://localhost:48081/api/v1/deviceservice/name/:name/opstate/{opState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/name/:name/opstate/{opState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/name/{{updateDeviceServiceByInvalidOpState}}/opstate/{{updateInvalidOpState}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "name",
                "{{updateDeviceServiceByInvalidOpState}}",
                "opstate",
                "{{updateInvalidOpState}}"
              ]
            },
            "description": "Update the op status time of the device service by unique name of the device service. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided."
          },
          "response": []
        },
        {
          "name": "200 http://localhost:48081/api/v1/deviceservice/name/:name/adminstate/{adminState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/name/:name/adminstate/:{adminState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/name/{{{updateDeviceServiceByInvalidAdminState}}/adminstate/{{updateInvalidAdminState}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "name",
                "{{{updateDeviceServiceByInvalidAdminState}}",
                "adminstate",
                "{{updateInvalidAdminState}}"
              ]
            },
            "description": "Update the admin state of the device service by device service name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "203 http://localhost:48081/api/v1/deviceservice/name/:name/lastreported/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/name/:name/lastreported/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/name/{{updateDeviceServiceByLastRepTime}}/lastreported/{{updateInvalidLastRepTime}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "name",
                "{{updateDeviceServiceByLastRepTime}}",
                "lastreported",
                "{{updateInvalidLastRepTime}}"
              ]
            },
            "description": "Update the last reported time of the device service by unique name of the device service. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided."
          },
          "response": []
        },
        {
          "name": "206 http://localhost:48081/api/v1/deviceservice/name/:name/lastconnected/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/name/:name/lastconnected/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/name/{{updateDeviceServiceByLastConnTime}}/lastconnected/{{updateInvalidLastConnTime}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "name",
                "{{updateDeviceServiceByLastConnTime}}",
                "lastconnected",
                "{{updateInvalidLastConnTime}}"
              ]
            },
            "description": "Update the last connected time of the device service by unique name of the device service. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided."
          },
          "response": []
        },
        {
          "name": "209 http://localhost:48081/api/v1/deviceservice/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/name/:name - DELETE",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        }",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/name/{{deleteServiceServiceByInvalidName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "name",
                "{{deleteServiceServiceByInvalidName}}"
              ]
            },
            "description": "Remove the DeviceService designated by name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the name provided."
          },
          "response": []
        },
        {
          "name": "214 http://localhost:48081/api/v1/deviceservice/:id/opstate/{opState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/:id/opstate/{opState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceByIdInvalidOpState}}/opstate/{{updateByInvalidIdOpState}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "{{updateDeviceServiceByIdInvalidOpState}}",
                "opstate",
                "{{updateByInvalidIdOpState}}"
              ]
            },
            "description": "Update the op state of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "217 http://localhost:48081/api/v1/deviceservice/:id/adminstate/{adminState}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/:id/adminState/{adminState} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceByIdInvalidAdminState}}/adminstate/{{updateByInvalidIdAdminState}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "{{updateDeviceServiceByIdInvalidAdminState}}",
                "adminstate",
                "{{updateByInvalidIdAdminState}}"
              ]
            },
            "description": "Update the admin state of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "220 http://localhost:48081/api/v1/deviceservice/:id/lastreported/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/device/:id/lastreported/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceByIdInvalidLastRepTime}}/lastreported/{{updateByInvalidIdLastRepTime}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "{{updateDeviceServiceByIdInvalidLastRepTime}}",
                "lastreported",
                "{{updateByInvalidIdLastRepTime}}"
              ]
            },
            "description": "Update the last reported time of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "223 http://localhost:48081/api/v1/deviceservice/:id/lastconnected/{time}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/:id/lastconnected/{time} - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "   }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/{{updateDeviceServiceByIdInvalidLastConnTime}}/lastconnected/{{updateByInvalidIdLastConnTime}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "{{updateDeviceServiceByIdInvalidLastConnTime}}",
                "lastconnected",
                "{{updateByInvalidIdLastConnTime}}"
              ]
            },
            "description": "Update the last connected time of the device service by database generated identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "191 http://localhost:48081/api/v1/deviceservice/id/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/id/:id - DELETE",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "    tests[\"Record Deleted\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        }",
                  "    "
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/id/{{deleteDevcieServiceByInvalidId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "id",
                "{{deleteDevcieServiceByInvalidId}}"
              ]
            },
            "description": "Remove the DeviceService designated by database generated id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "194 http://localhost:48081/api/v1/deviceservice/addressablename/:addressablename",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/addressablename/:addressablename - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  "    ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "         tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/addressablename/{{getDevcieServiceByInvalideAddressable}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "addressablename",
                "{{getDevcieServiceByInvalideAddressable}}"
              ]
            },
            "description": "Find all device serices associated to the Addressable with the specified addressable name. List may be empty if no device services match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the name provided."
          },
          "response": []
        },
        {
          "name": "228 http://localhost:48081/api/v1/deviceservice/addressable/:addressableId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/addressable/:addressableId - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "         //Test body parameters",
                  "       }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/addressable/{{getDevcieServiceByInvalideAddressableID}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "addressable",
                "{{getDevcieServiceByInvalideAddressableID}}"
              ]
            },
            "description": "Find all device servicess associated to the Addressable with the specified addressable database generated identifier. List may be empty if no device service match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no Addressable match on the id provided."
          },
          "response": []
        },
        {
          "name": "236 http://localhost:48081/api/v1/deviceservice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"id\": \"57f20c3ee4b060e251f6774b\",\r\n  \"origin\":1471806386920,\r\n  \"name\":\"home thermostat deviceservice1\",\r\n  \"description\":\"manage homethermostats\",\r\n  \"labels\":[\r\n    \"hvac\",\"thermostat\"\r\n    ],\r\n  \"adminState\":\"UNLOCKED\",\r\n  \"operatingState\":\"ENABLED\",\r\n  \"addressable\":{\r\n    \"name\":\"hvac thermo address1\"\r\n    }\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice"
              ]
            },
            "description": "Update the DeviceServcie identified by the id or name stored in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        },
        {
          "name": "233 http://localhost:48081/api/v1/deviceservice",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice - POST",
                  " * Version: Alpha",
                  " * Services: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "",
                  "    tests[\"DeviceService Created\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        }"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"origin\":1471806386920,\r\n  \"name\":\"home thermostat deviceservice\",\r\n  \"description\":\"manage homethermostats\",\r\n  \"labels\":[\r\n    \"hvac\",\"thermostat\"\r\n    ],\r\n  \"adminState\":\"UNLOCKED\",\r\n  \"operatingState\":\"ENABLED\",\r\n  \"addressable\":{\r\n    \"name\":\"hvac thermo address5\"\r\n    }\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice"
              ]
            },
            "description": "Add a new DeviceService - name must be unique.  The Addressable must already exist and can be referenced by an included Addressable object containing the Addressable's id or name. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns DataValidationException (HTTP 404) if an associated addressable (by id or name) is not found."
          },
          "response": []
        },
        {
          "name": "359 http://localhost:48081/api/v1/deviceservice/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/name/:name - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/name/{{getDeviceServiceByNameNotExist}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "name",
                "{{getDeviceServiceByNameNotExist}}"
              ]
            },
            "description": "Return the DeviceService matching given name (service names should be unique). May be null if no services matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "360 http://localhost:48081/api/v1/deviceservice/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice/:id - GET",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "         }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice/{{getDeviceServiceByIdNotExist}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice",
                "{{getDeviceServiceByIdNotExist}}"
              ]
            },
            "description": "Fetch a specific device service by database generated id. May return null if no service with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "354 http://localhost:48081/api/v1/deviceservice ",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/deviceservice - PUT",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationTextPlainType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationTextPlainType);",
                  "        }",
                  "        }"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"origin\":1471806386920,\r\n  \"name\":\"home thermostat deviceserviceTest\",\r\n  \"description\":\"manage homethermostats\",\r\n  \"labels\":[\r\n    \"hvac\",\"thermostat\"\r\n    ],\r\n  \"adminState\":\"UNLOCKED\",\r\n  \"operatingState\":\"ENABLED\",\r\n  \"addressable\":{\r\n    \"name\":\"hvac thermo address1\"\r\n    }\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/deviceservice",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "deviceservice"
              ]
            },
            "description": "Update the DeviceServcie identified by the id or name stored in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if the device service cannot be found by the identifier provided."
          },
          "response": []
        }
      ]
    },
    {
      "name": "ping",
      "item": [
        {
          "name": "01 http://localhost:48081/api/v1/ping",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  " /**",
                  " * Test Case:  /api/v1/ping - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " * ",
                  " **/",
                  " ",
                  " tests[\"Ping Success\"] = responseCode.code === 200;",
                  " tests[\"Response time is less than 200ms\"] = responseTime < 200;",
                  " if(responseCode.code === 200){",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "        }",
                  "        if(responseBody.length!== 0){",
                  "            tests[\"Body is correct\"] = responseBody === \"pong\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/ping",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "ping"
              ]
            },
            "description": "ping"
          },
          "response": []
        }
      ],
      "description": "Folder for ping"
    },
    {
      "name": "provisionwatcher",
      "item": [
        {
          "name": "280 http://localhost:48081/api/v1/provisionwatcher/id/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher/id/:id - DEL",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    if(jsonData.length !== 0){",
                  "        tests[\"Body has True\"] = responseBody === \"true\";",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/id/{{provisionWatcherDelRequestId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "id",
                "{{provisionWatcherDelRequestId}}"
              ]
            },
            "description": "Remove the ProvisionWatcher designated by the database generated id for the ProvisionWatcher. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no provision watcher with the provided id is found."
          },
          "response": []
        },
        {
          "name": "283 http://localhost:48081/api/v1/provisionwatcher/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher/:id - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");",
                  "        //Test body parameters",
                  "        var actualProvisionWatcherData;",
                  "        //Validate the respose data with json schema.",
                  "        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {",
                  "            try{",
                  "                //Parse json response",
                  "                actualProvisionWatcherData = JSON.parse(responseBody);",
                  "            }catch(e) {",
                  "                console.log(\"Exception while parsing json response\");",
                  "            }",
                  "            ",
                  "            if(actualProvisionWatcherData.length !== 0) {",
                  "                tests[\"Is valid response schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherObjectSchema);",
                  "                console.log(\"Validation failed: \", tv4.error);",
                  "            } else {",
                  "                console.log(\"ProvisionWatcher is empty.\");",
                  "                tests[\"Is ProvisionWatcher empty\"] = actualProvisionWatcherData.length === 0;",
                  "            }",
                  "        }",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/{{provisionWatcherGetRequestId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "{{provisionWatcherGetRequestId}}"
              ]
            },
            "description": "Fetch a specific provision watcher by database generated id. May return null if no provision watcher matches on id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "288 http://localhost:48081/api/v1/provisionwatcher/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher/name/:name - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");",
                  "        //Test body parameters",
                  "        var actualProvisionWatcherData;",
                  "        //Validate the respose data with json schema.",
                  "        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {",
                  "            try{",
                  "                //Parse json response",
                  "                actualProvisionWatcherData = JSON.parse(responseBody);",
                  "            }catch(e) {",
                  "                console.log(\"Exception while parsing json response\");",
                  "            }",
                  "            ",
                  "            if(actualProvisionWatcherData.length !== 0) {",
                  "                tests[\"Is valid response schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherObjectSchema);",
                  "                console.log(\"Validation failed: \", tv4.error);",
                  "            } else {",
                  "                console.log(\"ProvisionWatcher is empty.\");",
                  "                tests[\"Is ProvisionWatcher empty\"] = actualProvisionWatcherData.length === 0;",
                  "            }",
                  "        }",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/name/{{provisionWatcherGetRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "name",
                "{{provisionWatcherGetRequestName}}"
              ]
            },
            "description": "Return ProvisionWatcher with matching name (name should be unique). May be null if none match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "285 http://localhost:48081/api/v1/provisionwatcher/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher/name/:name - DEL",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    if(jsonData.length !== 0){",
                  "        tests[\"Body has True\"] = responseBody === \"true\";",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/name/{{provisionWatcherDelRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "name",
                "{{provisionWatcherDelRequestName}}"
              ]
            },
            "description": "Remove the ProvisionWatcher designated by unique name identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no provision watcher with the provided name is found."
          },
          "response": []
        },
        {
          "name": "290 http://localhost:48081/api/v1/provisionwatcher/profile/:profileId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher/profile/:profileId - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");",
                  "        //Test body parameters",
                  "        var actualProvisionWatcherData;",
                  "        //Validate the respose data with json schema.",
                  "        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {",
                  "            try{",
                  "                //Parse json response",
                  "                actualProvisionWatcherData = JSON.parse(responseBody);",
                  "            }catch(e) {",
                  "                console.log(\"Exception while parsing json response\");",
                  "            }",
                  "            ",
                  "            if(actualProvisionWatcherData.length !== 0) {",
                  "                tests[\"Is valid response schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherSchema);",
                  "                console.log(\"Validation failed: \", tv4.error);",
                  "            } else {",
                  "                console.log(\"ProvisionWatcher is empty.\");",
                  "                tests[\"Is ProvisionWatcher empty\"] = actualProvisionWatcherData.length === 0;",
                  "            }",
                  "        }",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/profile/{{provisionWatcherGetByProfileRequestId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "profile",
                "{{provisionWatcherGetByProfileRequestId}}"
              ]
            },
            "description": "Find all provision watchers associated to the DeviceProfile with the specified profile database generated identifier. List may be empty if no provision watchers match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the id provided."
          },
          "response": []
        },
        {
          "name": "293 http://localhost:48081/api/v1/provisionwatcher/profilename/:profilename",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher/profilename/:profilename - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");",
                  "        //Test body parameters",
                  "        var actualProvisionWatcherData;",
                  "        //Validate the respose data with json schema.",
                  "        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {",
                  "            try{",
                  "                //Parse json response",
                  "                actualProvisionWatcherData = JSON.parse(responseBody);",
                  "            }catch(e) {",
                  "                console.log(\"Exception while parsing json response\");",
                  "            }",
                  "            ",
                  "            if(actualProvisionWatcherData.length !== 0) {",
                  "                tests[\"Is valid response schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherSchema);",
                  "                console.log(\"Validation failed: \", tv4.error);",
                  "            } else {",
                  "                console.log(\"ProvisionWatcher is empty.\");",
                  "                tests[\"Is ProvisionWatcher empty\"] = actualProvisionWatcherData.length === 0;",
                  "            }",
                  "        }",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/profilename/{{provisionWatcherGetByProfileRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "profilename",
                "{{provisionWatcherGetByProfileRequestName}}"
              ]
            },
            "description": "Find all provision watchers associated to the DeviceProfile with the specified profile name. List may be empty if no provision watcher match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the name provided."
          },
          "response": []
        },
        {
          "name": "296 http://localhost:48081/api/v1/provisionwatcher/service/:serviceId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher/provisionwatcher/service/:serviceId - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");",
                  "        //Test body parameters",
                  "        var actualProvisionWatcherData;",
                  "        //Validate the respose data with json schema.",
                  "        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {",
                  "            try{",
                  "                //Parse json response",
                  "                actualProvisionWatcherData = JSON.parse(responseBody);",
                  "            }catch(e) {",
                  "                console.log(\"Exception while parsing json response\");",
                  "            }",
                  "            ",
                  "            if(actualProvisionWatcherData.length !== 0) {",
                  "                tests[\"Is valid response schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherSchema);",
                  "                console.log(\"Validation failed: \", tv4.error);",
                  "            } else {",
                  "                console.log(\"ProvisionWatcher is empty.\");",
                  "                tests[\"Is ProvisionWatcher empty\"] = actualProvisionWatcherData.length === 0;",
                  "            }",
                  "        }",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/service/{{provisionWatcherGetByServiceRequestId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "service",
                "{{provisionWatcherGetByServiceRequestId}}"
              ]
            },
            "description": "Find the provision watchers associated to the DeviceService with the specified service database generated identifier. List may be empty if no provision watchers match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the id provided."
          },
          "response": []
        },
        {
          "name": "299 http://localhost:48081/api/v1/provisionwatcher/servicename/:servicename",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher/servicename/:servicename - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");",
                  "        //Test body parameters",
                  "        var actualProvisionWatcherData;",
                  "        //Validate the respose data with json schema.",
                  "        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {",
                  "            try{",
                  "                //Parse json response",
                  "                actualProvisionWatcherData = JSON.parse(responseBody);",
                  "            }catch(e) {",
                  "                console.log(\"Exception while parsing json response\");",
                  "            }",
                  "            ",
                  "            if(actualProvisionWatcherData.length !== 0) {",
                  "                tests[\"Is valid response schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherSchema);",
                  "                console.log(\"Validation failed: \", tv4.error);",
                  "            } else {",
                  "                console.log(\"ProvisionWatcher is empty.\");",
                  "                tests[\"Is ProvisionWatcher empty\"] = actualProvisionWatcherData.length === 0;",
                  "            }",
                  "        }",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/servicename/{{provisionWatcherGetByServiceRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "servicename",
                "{{provisionWatcherGetByServiceRequestName}}"
              ]
            },
            "description": "Find the provision watchers associated to the DeviceService with the specified service name. List may be none if no provision watcher match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the name provided."
          },
          "response": []
        },
        {
          "name": "302 http://localhost:48081/api/v1/provisionwatcher/identifier/:key/{value}",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher/identifier/:key/{value} - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");",
                  "        //Test body parameters",
                  "        var actualProvisionWatcherData;",
                  "        //Validate the respose data with json schema.",
                  "        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {",
                  "            try{",
                  "                //Parse json response",
                  "                actualProvisionWatcherData = JSON.parse(responseBody);",
                  "            }catch(e) {",
                  "                console.log(\"Exception while parsing json response\");",
                  "            }",
                  "            ",
                  "            if(actualProvisionWatcherData.length !== 0) {",
                  "                tests[\"Is valid response schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherSchema);",
                  "                console.log(\"Validation failed: \", tv4.error);",
                  "            } else {",
                  "                console.log(\"ProvisionWatcher is empty.\");",
                  "                tests[\"Is ProvisionWatcher empty\"] = actualProvisionWatcherData.length === 0;",
                  "            }",
                  "        }",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/identifier/{{identifierKey}}/{{identifierValue}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "identifier",
                "{{identifierKey}}",
                "{{identifierValue}}"
              ]
            },
            "description": "Find the provision watchers associated to the identifier key/value pair.  The identifier key/value pair identify a protocol and address of the protocol to watch for by the Device Service. List may be none if no provision watcher match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "310 http://localhost:48081/api/v1/provisionwatcher",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "   //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "     //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualProvisionWatcherData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualProvisionWatcherData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualProvisionWatcherData.length !== 0 ) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(actualProvisionWatcherData, data.provisionWatcherSchema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"actual provisionwatcher list and expected list length doesnt match\");",
                  "        tests[\"Is actual and expected provisionwatcher list matching\"] = actualProvisionWatcherData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher"
              ]
            },
            "description": "Return all provision watcher objects sorted by database generated id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit."
          },
          "response": []
        },
        {
          "name": "307 http://localhost:48081/api/v1/provisionwatcher",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher - PUT",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  " //Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");",
                  "",
                  "            //Validate the respose data.",
                  "            var jsonData = JSON.parse(responseBody);",
                  "            if(jsonData.length !== 0){",
                  "                tests[\"Body has True\"] = responseBody === \"true\";",
                  "            }",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"modbus watcher\", \"origin\":14718063870000}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher"
              ]
            },
            "description": "Update the ProvisionWatcher identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no provision watcher with the provided id is found."
          },
          "response": []
        },
        {
          "name": "304 http://localhost:48081/api/v1/provisionwatcher",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case: /provisionwatcher - POST",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for text/plain.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "    }",
                  "    ",
                  "    //Validate the body for Id",
                  "    tests[\"Does body contains Id\"] = responseBody.length === 24;",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \n   \"name\":\"bacnet2 watcher\",\n   \"origin\":1471806386919,\n   \"identifiers\":{  \n      \"MAC\":\"00-05-1B-A1-99-99\",\n      \"HTTP\":\"10.0.0.1\"\n   },\n   \"profile\":{  \n      \"name\":\"variable speed motor profile\"\n   },\n   \"service\":{  \n      \"name\":\"home variable speed motor device service\"\n   }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher"
              ]
            },
            "description": "Add a new ProvisionWatcher - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.  Returns DataValidationException (HTTP 409) if profile service are unknown"
          },
          "response": []
        }
      ],
      "description": "Folder for provisionwatcher"
    },
    {
      "name": "provisionwatcher_error_4xx",
      "item": [
        {
          "name": "281 http://localhost:48081/api/v1/provisionwatcher/id/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher/id/:id - 404 Error - DEL ",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/id/{{invalidProvisionWatcherId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "id",
                "{{invalidProvisionWatcherId}}"
              ]
            },
            "description": "Remove the ProvisionWatcher designated by the database generated id for the ProvisionWatcher. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no provision watcher with the provided id is found."
          },
          "response": []
        },
        {
          "name": "286 http://localhost:48081/api/v1/provisionwatcher/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher/name/:name - 404 Error - DEL ",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/name/{{invalidProvisionWatcherName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "name",
                "{{invalidProvisionWatcherName}}"
              ]
            },
            "description": "Remove the ProvisionWatcher designated by unique name identifier. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no provision watcher with the provided name is found."
          },
          "response": []
        },
        {
          "name": "292 http://localhost:48081/api/v1/provisionwatcher/profile/:profileId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  provisionwatcher/profile/{profileId} - 404 Error - GET ",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/profile/{{invalidProfileId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "profile",
                "{{invalidProfileId}}"
              ]
            },
            "description": "Find all provision watchers associated to the DeviceProfile with the specified profile database generated identifier. List may be empty if no provision watchers match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the id provided."
          },
          "response": []
        },
        {
          "name": "295 http://localhost:48081/api/v1/provisionwatcher/profilename/:profilename",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher/profilename/{profilename} - 404 Error - GET ",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/profilename/{{invalidProfileName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "profilename",
                "{{invalidProfileName}}"
              ]
            },
            "description": "Find all provision watchers associated to the DeviceProfile with the specified profile name. List may be empty if no provision watcher match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceProfile match on the name provided."
          },
          "response": []
        },
        {
          "name": "298 http://localhost:48081/api/v1/provisionwatcher/service/:serviceId",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher/provisionwatcher/service/:serviceId - 404 Error - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/service/{{invalidServiceId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "service",
                "{{invalidServiceId}}"
              ]
            },
            "description": "Find the provision watchers associated to the DeviceService with the specified service database generated identifier. List may be empty if no provision watchers match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the id provided."
          },
          "response": []
        },
        {
          "name": "301 http://localhost:48081/api/v1/provisionwatcher/servicename/:servicename",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher/servicename/:servicename - 404 ERROR - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher/servicename/{{invalidServiceName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher",
                "servicename",
                "{{invalidServiceName}}"
              ]
            },
            "description": "Find the provision watchers associated to the DeviceService with the specified service name. List may be none if no provision watcher match. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no DeviceService match on the name provided."
          },
          "response": []
        },
        {
          "name": "308 http://localhost:48081/api/v1/provisionwatcher",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher - 404 Error - PUT",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"invalid watcher\", \"origin\":14718063870000}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher"
              ]
            },
            "description": "Update the ProvisionWatcher identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns NotFoundException (HTTP 404) if no provision watcher with the provided id is found."
          },
          "response": []
        },
        {
          "name": "306 http://localhost:48081/api/v1/provisionwatcher",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /provisionwatcher - 409 Error - POST ",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 409\"] = responseCode.code === 409;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{  \n   \"name\":\"bacnet2 watcher\",\n   \"origin\":1471806386919,\n   \"identifiers\":{  \n      \"MAC\":\"00-05-1B-A1-99-99\",\n      \"HTTP\":\"10.0.0.1\"\n   },\n   \"profile\":{  \n      \"name\":\"variable speed motor not found\"\n   },\n   \"service\":{  \n      \"name\":\"home variable speed motor not found\"\n   }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/provisionwatcher",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "provisionwatcher"
              ]
            },
            "description": "Add a new ProvisionWatcher - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues.  Returns DataValidationException (HTTP 409) if profile service are unknown"
          },
          "response": []
        }
      ],
      "description": "Folder for provisionwatcher_error_4xx"
    },
    {
      "name": "schedule",
      "item": [
        {
          "name": "263 http://localhost:48081/api/v1/schedule/id/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /schedule/id/:id - DEL",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    if(jsonData.length !== 0){",
                  "        tests[\"Body has True\"] = responseBody === \"true\";",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/schedule/id/{{scheduleDelRequestId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "schedule",
                "id",
                "{{scheduleDelRequestId}}"
              ]
            },
            "description": "Remove the Schedule designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Schedule is found with the provided id."
          },
          "response": []
        },
        {
          "name": "265 http://localhost:48081/api/v1/schedule/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /schedule/id - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the status as 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify the response time to be less than 200ms",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Validate the respose data with json schema.",
                  "    var actualScheduleData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualScheduleData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualScheduleData !== null) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(actualScheduleData, data.scheduleSchema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Schedule is empty.\");",
                  "        tests[\"Is Schedule empty\"] = actualScheduleData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/schedule/57fe00fae4b060e2c8236439",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "schedule",
                "57fe00fae4b060e2c8236439"
              ]
            },
            "description": "Fetch a specific Schedule by database generated id. May return null if no schedule with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "269 http://localhost:48081/api/v1/schedule/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /schedule/name/:name - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        //Test body parameters",
                  "        var actualScheduleData;",
                  "        //Validate the respose data with json schema.",
                  "        if(responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType)) {",
                  "            try {",
                  "                //Parse json response",
                  "                actualScheduleData = JSON.parse(responseBody);",
                  "            } catch(e) {",
                  "                console.log(\"Exception while parsing json response\");",
                  "            }",
                  "            ",
                  "            if(actualScheduleData.length !== 0) {",
                  "                tests[\"Is valid response schema\"] = tv4.validate(actualScheduleData, data.scheduleSchema);",
                  "                console.log(\"Validation failed: \", tv4.error);",
                  "            } else {",
                  "                console.log(\"Scheule is empty.\");",
                  "                tests[\"Is schedule empty\"] = actualScheduleData.length === 0;",
                  "            }",
                  "        }",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/schedule/name/{{scheduleGetRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "schedule",
                "name",
                "{{scheduleGetRequestName}}"
              ]
            },
            "description": "Return Schedule matching given name (schedule names should be unique). May be null if no schedule matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "267 http://localhost:48081/api/v1/schedule/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /schedule/name/:name - DEL",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    if(jsonData.length !== 0){",
                  "        tests[\"Body has True\"] = responseBody === \"true\";",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/schedule/name/{{scheduleDelRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "schedule",
                "name",
                "{{scheduleDelRequestName}}"
              ]
            },
            "description": "Remove the Schedule designated by name. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no Schedule is found with the provided name."
          },
          "response": []
        },
        {
          "name": "277 http://localhost:48081/api/v1/schedule",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /schedule - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "   //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "     //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualScheduleData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualScheduleData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualScheduleData.length !== 0 ) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(actualScheduleData, data.scheduleObjectSchema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"actual schedule list and expected list length doesnt match\");",
                  "        tests[\"Is actual and expected schedule list matching\"] = actualScheduleData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/schedule",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "schedule"
              ]
            },
            "description": "Return all schedules sorted by id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit."
          },
          "response": []
        },
        {
          "name": "274 http://localhost:48081/api/v1/schedule",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /schedule - PUT",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "          //Validate the respose data.",
                  "            var jsonData = JSON.parse(responseBody);",
                  "            if(jsonData.length !== 0){",
                  "                tests[\"Body has True\"] = responseBody === \"true\";",
                  "      }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"id\":\"57f49350e4b060e2bff6c52d\",\"start\":\"1503360000\",\"end\":\"1503390000\",\"frequency\":\"60000\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/schedule",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "schedule"
              ]
            },
            "description": "Update the Schedule identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP // 409) if any the cron expression string is not properly formatted. NotFoundException (HTTP 404) if no schedule is found for the id."
          },
          "response": []
        },
        {
          "name": "271  http://localhost:48081/api/v1/schedule",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case: /schedule - POST",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for text/plain.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "    }",
                  "    ",
                  "    //Validate the body for Id",
                  "    tests[\"Does body contains Id\"] = responseBody.length === 24;",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"origin\":1471806386919,\"name\":\"at midnight4\",\"frequency\":\"2\", \"cron\":\"0 15 10 * * ?\", \"runOnce\":true} \r\n"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/schedule",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "schedule"
              ]
            },
            "description": "Add a new Schedule - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the cron expression string is not properly formatted."
          },
          "response": []
        }
      ],
      "description": "Folder for schedule"
    },
    {
      "name": "schedule_error_4xx",
      "item": [
        {
          "name": "276 http://localhost:48081/api/v1/schedule",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /schedule - PUT",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"id\":\"57bb49e6555e5218873e5a1b\",\"start\":\"1503360000\",\"end\":\"1503390000\",\"frequency\":\"60000\", \"cron\":\"0 0 13 * * :\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/schedule",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "schedule"
              ]
            },
            "description": "Update the Schedule identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP // 409) if any the cron expression string is not properly formatted. NotFoundException (HTTP 404) if no schedule is found for the id."
          },
          "response": []
        },
        {
          "name": "273 http://localhost:48081/api/v1/schedule",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case: /schedule - POST",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 409\"] = responseCode.code === 409;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"origin\":1471806386919,\"name\":\"daily noon\",\"cron\":\"0 0 12 * * :\"} \r\n"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/schedule",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "schedule"
              ]
            },
            "description": "Add a new Schedule - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the cron expression string is not properly formatted."
          },
          "response": []
        }
      ],
      "description": "Folder for schedule_error_4xx"
    },
    {
      "name": "scheduleevent",
      "item": [
        {
          "name": "240 http://localhost:48081/api/v1/scheduleevent/id/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /api/v1/scheduleevent/id/:id - DELETE",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "    tests[\"Record Deleted\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Request Object Deleted\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent/id/{{scheduleEventDelRequestId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent",
                "id",
                "{{scheduleEventDelRequestId}}"
              ]
            },
            "description": "Remove the ScheduleEvent designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no ScheduleEvent is found with the provided id. DataValidationException (HTTP 409) if an attempt to delete a schedule event still being referenced by device reports."
          },
          "response": []
        },
        {
          "name": "248 http://localhost:48081/api/v1/scheduleevent/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /scheduleevent/name/:name - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        //Test body parameters",
                  "        var actualScheduleEventData;",
                  "        //Validate the respose data with json schema.",
                  "        if(responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType)) {",
                  "            try {",
                  "                //Parse json response",
                  "                actualScheduleEventData = JSON.parse(responseBody);",
                  "            } catch(e) {",
                  "                console.log(\"Exception while parsing json response\");",
                  "            }",
                  "            ",
                  "            if(actualScheduleEventData.length !== 0) {",
                  "                tests[\"Is valid response schema\"] = tv4.validate(actualScheduleEventData, data.scheduleEventObjectSchema);",
                  "                console.log(\"Validation failed: \", tv4.error);",
                  "            } else {",
                  "                console.log(\"Scheule Event is empty.\");",
                  "                tests[\"Is schedule empty\"] = actualScheduleEventData.length === 0;",
                  "            }",
                  "        }",
                  "    }",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent/name/{{scheduleEventGetRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent",
                "name",
                "{{scheduleEventGetRequestName}}"
              ]
            },
            "description": "Return ScheduleEvents matching given name (schedule names should be unique). May be null if no schedule events matches on the name provided. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "244 http://localhost:48081/api/v1/scheduleevent/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /api/v1/scheduleevent/name/:name- DELETE",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "    tests[\"Record Deleted\"] = responseCode.code === 200;",
                  "    if(responseCode.code === 200){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "        }",
                  "        var jsonData = JSON.parse(responseBody);",
                  "        if(jsonData.length !== 0){",
                  "            tests[\"Request Object Deleted\"] = responseBody === \"true\";",
                  "        }",
                  "    }"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent/name/{{scheduleEventDelRequestName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent",
                "name",
                "{{scheduleEventDelRequestName}}"
              ]
            },
            "description": "Remove the ScheduleEvent designated by name. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no ScheduleEvent is found with the provided name. DataValidationException (HTTP 409) if an attempt to delete a schedule event still being referenced by device reports."
          },
          "response": []
        },
        {
          "name": "250 http://localhost:48081/api/v1/scheduleevent/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /scheduleevent/id - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the status as 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify the response time to be less than 200ms",
                  "tests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Validate the respose data with json schema.",
                  "    var actualScheduleEventData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualScheduleEventData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    if(actualScheduleEventData !== null) {",
                  "        //Test response schema",
                  "        tests[\"Is Valid Response Schema\"] = tv4.validate(actualScheduleEventData, data.scheduleEventObjectSchema);",
                  "        console.log(\"Validation failed: \", tv4.error);",
                  "    } else {",
                  "        console.log(\"Schedule is empty.\");",
                  "        tests[\"Is Schedule empty\"] = actualScheduleEventData.length === 0;",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent/{{scheduleEventGetRequestId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent",
                "{{scheduleEventGetRequestId}}"
              ]
            },
            "description": "Fetch a specific ScheduleEvent by database generated id. May return null if no schedule event with the id is found. Returns ServiceException (HTTP 503) for unknown or unanticipated issues."
          },
          "response": []
        },
        {
          "name": "260 http://localhost:48081/api/v1/scheduleevent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /sheduleevent - GET",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Verify the status as 200",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify the response time to be less than 200ms",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if(responseCode.code === 200) {",
                  "    //Verify the content type present in header",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);",
                  "    }",
                  "    ",
                  "    //Test body parameters",
                  "    var actualScheduleEventData;",
                  "    try{",
                  "        //Parse json response",
                  "        actualScheduleEventData = JSON.parse(responseBody);",
                  "    }catch(e) {",
                  "        console.log(\"Exception while parsing json response\");",
                  "    }",
                  "    ",
                  "    ",
                  "    //Test response schema",
                  "    tests[\"Is Valid Response Schema\"] = tv4.validate(actualScheduleEventData, data.scheduleEventSchema);",
                  "    console.log(\"Validation failed: \", tv4.error);",
                  "       ",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent"
              ]
            },
            "description": "Return all schedule events sorted by id. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. Returns LimitExceededException (HTTP 413) if the number returned exceeds the max limit."
          },
          "response": []
        },
        {
          "name": "256 http://localhost:48081/api/v1/scheduleevent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /scheduleevent - PUT",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for application/json.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");",
                  "",
                  "            //Validate the respose data.",
                  "            var jsonData = JSON.parse(responseBody);",
                  "            if(jsonData.length !== 0){",
                  "                tests[\"Body has True\"] = responseBody === \"true\";",
                  "            }",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"id\":\"57f72b79e4b060e27309e453\",\"action\":\"http://localhost:48089/settemp\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent"
              ]
            },
            "description": "Update the ScheduleEvent identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if an attempt to change the name is made when the schedule event is still being referenced by device reports. NotFoundException (HTTP 404) if no schedule is found for the identifier provided."
          },
          "response": []
        },
        {
          "name": "252 http://localhost:48081/api/v1/scheduleevent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case: /scheduleevent - POST",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Verify the http status code for 200.",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "if (responseCode.code === 200) {",
                  "    //Verify the existence of content-type in the header.",
                  "    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "    tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    ",
                  "    //Validate the content-type for text/plain.",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "    }",
                  "    ",
                  "    //Validate the body for Id",
                  "    tests[\"Does body contains Id\"] = responseBody.length === 24;",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"origin\":1471806386919,\r\n\"name\":\"variable speed motor collection\",\r\n\"action\":\"http://localhost:48089/getrpm\",\r\n\"actionParameters\":\"{\\\"devid\\\":\\\"57f35577e4b060e27b9d5f6f\\\"}\",\r\n\"schedule\":\"half-hourly\",\r\n\"addressable\":{\"name\": \"tachometer address\"}\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent"
              ]
            },
            "description": "Add a new ScheduleEvent - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if the event's associated schedule is not found (referenced by name). DataValidationException (HTTP 409) if the schedule was not provided."
          },
          "response": []
        }
      ],
      "description": "Folder for scheduleevent"
    },
    {
      "name": "scheduleevent_error_4xx",
      "item": [
        {
          "name": "242 http://localhost:48081/api/v1/scheduleevent/id/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /scheduleevent/id/:id - 404 Error - DEL",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent/id/{{invalidScheduleEventId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent",
                "id",
                "{{invalidScheduleEventId}}"
              ]
            },
            "description": "Remove the ScheduleEvent designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no ScheduleEvent is found with the provided id. DataValidationException (HTTP 409) if an attempt to delete a schedule event still being referenced by device reports."
          },
          "response": []
        },
        {
          "name": "243 http://localhost:48081/api/v1/scheduleevent/id/:id",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /scheduleevent/id/:id - 404 Error - DEL",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent/id/{{invalidScheduleEventId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent",
                "id",
                "{{invalidScheduleEventId}}"
              ]
            },
            "description": "Remove the ScheduleEvent designated by database generated id. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no ScheduleEvent is found with the provided id. DataValidationException (HTTP 409) if an attempt to delete a schedule event still being referenced by device reports."
          },
          "response": []
        },
        {
          "name": "246 http://localhost:48081/api/v1/scheduleevent/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /scheduleevent/name/:name - 404 Error - DEL",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  "",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent/name/{{invalidScheduleEventName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent",
                "name",
                "{{invalidScheduleEventName}}"
              ]
            },
            "description": "Remove the ScheduleEvent designated by name. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no ScheduleEvent is found with the provided name. DataValidationException (HTTP 409) if an attempt to delete a schedule event still being referenced by device reports."
          },
          "response": []
        },
        {
          "name": "247 http://localhost:48081/api/v1/scheduleevent/name/:name",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/**",
                  " * Test Case:  /api/v1/scheduleevent/name/:name - DELETE",
                  " * Version: Alpha",
                  " * Service: Metadata",
                  " * @Author: Tata Elxsi",
                  " *",
                  " **/",
                  " ",
                  "    tests[\"Failed to Dlete ScheduleEvent\"] = responseCode.code === 404;",
                  "    if(responseCode.code === 404){",
                  "        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "        tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "        if (contentTypeHeaderExists) {",
                  "            tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);",
                  "        }",
                  "        }"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent/name/{{invalidScheduleEventName}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent",
                "name",
                "{{invalidScheduleEventName}}"
              ]
            },
            "description": "Remove the ScheduleEvent designated by name. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if no ScheduleEvent is found with the provided name. DataValidationException (HTTP 409) if an attempt to delete a schedule event still being referenced by device reports."
          },
          "response": []
        },
        {
          "name": "258 http://localhost:48081/api/v1/scheduleevent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /scheduleevent - PUT",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 409\"] = responseCode.code === 409;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"id\":\"57f72b79e4b060e27309e453\",\"name\":\"namegettingchanges\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent"
              ]
            },
            "description": "Update the ScheduleEvent identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if an attempt to change the name is made when the schedule event is still being referenced by device reports. NotFoundException (HTTP 404) if no schedule is found for the identifier provided."
          },
          "response": []
        },
        {
          "name": "254 http://localhost:48081/api/v1/scheduleevent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case: /scheduleevent - POST",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Verify the http status code for 404.",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  "",
                  "var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
                  "tests[\"Has Content-Type\"] = contentTypeHeaderExists;",
                  "    if (contentTypeHeaderExists) {",
                  "        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");",
                  "    }",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"origin\":1471806386919,\r\n\"name\":\"temperature collection\",\r\n\"action\":\"http://localhost:48089/gettemp\",\r\n\"actionParameters\":\"{\\\"devid\\\":\\\"57f375abe4b060e2bff6c515\\\"}\",\r\n\"schedule\":\"unassociatedschedule\"\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent"
              ]
            },
            "description": "Add a new ScheduleEvent - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if the event's associated schedule is not found (referenced by name). DataValidationException (HTTP 409) if the schedule was not provided."
          },
          "response": []
        },
        {
          "name": "255 http://localhost:48081/api/v1/scheduleevent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case: /scheduleevent - POST",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Verify the http status code for 409.",
                  "tests[\"Status code is 409\"] = responseCode.code === 409;",
                  "//Verify if response time is less than 200ms.",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\"origin\":1471806386919,\r\n\"name\":\"variable speed motor collection\",\r\n\"action\":\"http://localhost:48089/getrpm\",\r\n\"actionParameters\":\"{\\\"devid\\\":\\\"57f375abe4b060e2bff6c515\\\"}\"\r\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent"
              ]
            },
            "description": "Add a new ScheduleEvent - name must be unique. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if the event's associated schedule is not found (referenced by name). DataValidationException (HTTP 409) if the schedule was not provided."
          },
          "response": []
        },
        {
          "name": "259 http://localhost:48081/api/v1/scheduleevent",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "/*",
                  " * Test Case:  /scheduleevent - PUT",
                  " * Version: Alpha",
                  " * @Author: Tata Elxsi",
                  " *",
                  " */",
                  " ",
                  "//Test Case for status : 404",
                  "tests[\"Status code is 404\"] = responseCode.code === 404;",
                  "//Test response time",
                  "tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"id\":\"57bb5837555e5218873e5a23\",\"name\":\"namegettingchanges\",\"action\":\"http://localhost:48089/settemp\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/scheduleevent",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "api",
                "v1",
                "scheduleevent"
              ]
            },
            "description": "Update the ScheduleEvent identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. Returns ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if an attempt to change the name is made when the schedule event is still being referenced by device reports. NotFoundException (HTTP 404) if no schedule is found for the identifier provided."
          },
          "response": []
        }
      ],
      "description": "Folder for scheduleevent_error_4xx"
    }
  ]
}