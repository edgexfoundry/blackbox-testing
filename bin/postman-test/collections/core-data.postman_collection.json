{
  "id": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
  "name": "core-data",
  "description": null,
  "order": [],
  "folders": [
    {
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 574796603,
      "id": "5357a1bf-d0ff-b411-3ecd-3ba070071d69",
      "name": "event",
      "description": "Folder for event",
      "order": [
        "8e07f708-7c82-4fd2-da7d-25ab2d96a4d1",
        "04581b28-9c62-0594-089e-e96d1d340490",
        "82161af8-bc0d-e130-072d-ea3909fb0ed2",
        "4ce883e8-32d8-0d1a-cb29-8538c5f4eb7e",
        "da990487-1826-c593-1dce-58df3205f499",
        "fd80304a-418a-f295-0c0d-fe53fcfa5563",
        "08232888-9cad-ab7c-c262-8149b8d8a061",
        "f64b34f5-ddc4-0617-227f-0601b6b6b6dd",
        "a288328f-0029-5587-aa0d-b71dcb3e7b04",
        "e75fd315-a1a4-01ed-6e1f-8f4757b19508",
        "2ba22d74-4bd9-f9bf-9eef-e9679ffba010",
        "d7b9f54b-2aab-c380-1060-cc63cfe71614",
        "ffce5a08-25d0-3825-484d-2e88425484e5",
        "caa55575-ee06-0216-2af0-13b374ba0957",
        "00da1829-97da-e251-8e94-f9db65538067"
      ],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "add1104b-b20c-cda3-1f05-eab97a065327",
      "name": "event_error_4xx",
      "description": "Folder for event",
      "order": [
        "1f799e18-86f8-fa0e-6b25-6cb137882a57",
        "0aa9d644-ac26-9746-5370-a3be6698d25c",
        "6463d2de-d27b-bc78-8c8f-0f5ba831666e",
        "8f01d601-61c5-1b86-927a-53feb370d13b",
        "3ab77e32-f5a3-40c1-dc82-5dac8492fc81",
        "e9e6aa4b-ee93-e403-0cec-5423bc98b075",
        "0428e9bc-d7ec-8fb5-792d-86df0f28984b",
        "b5ef10e8-afc7-30cc-3fb5-741ac362d87c"
      ],
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 574796603,
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "event_error_5xx",
      "description": "Folder for event",
      "order": [
        "224a0aa6-00c3-a8b8-cf45-1c10a7e6108c",
        "92593ccb-c97d-d26f-fd20-bda49a1bcdc6",
        "b979009a-9133-5614-9c8a-16fa667d3e08",
        "c71fbe0d-65dc-7161-22e8-e358571e5f2a",
        "f3a20cac-bcef-8c2e-03be-b635c9cdf636",
        "c6b8f6cc-0a53-6590-06b7-0893e3035fa5",
        "755a22fc-1091-cdee-94d2-96e3107be05d",
        "da7e93dd-3312-066a-cb99-53815f71ff87",
        "d0431516-4cc0-804d-4433-633677f7316d",
        "7698dffc-a95d-a177-bc13-abe49fc015aa",
        "2bd7adfb-6fe9-fbfb-06a3-b15da5c96329",
        "ff3aa233-ea21-cccd-4e7f-acea5e247b0a",
        "b4323b55-ee19-3510-6e61-024782e07ce0",
        "0c412c49-00bd-0b65-839a-ab4e13b8f831"
      ],
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 574796603,
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 574796606,
      "id": "9159ddf6-cbb0-e2b0-bfa9-cefbc6940489",
      "name": "ping",
      "description": "Folder for ping",
      "order": [
        "5ae5eacb-7e3b-9ff2-08b6-ae355b2b1e67",
        "3f179103-32a5-08cb-5729-ac0979d89a24"
      ]
    },
    {
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 574796604,
      "id": "77f03137-50a1-b8b8-c53e-e775a889208b",
      "name": "reading",
      "description": "Folder for reading",
      "order": [
        "ed7fc923-4060-2096-162a-0b0393636991",
        "2ada22b7-006c-bff5-7963-6f594fa3e8ac",
        "17d05b63-5d17-6306-4a30-1bdec1cd5bc0",
        "21d1c70c-d875-3708-10fd-89dadc58e3bc",
        "7f66e07b-39e6-0296-3062-96d2478be938",
        "99be43cd-5a62-b4c3-16a7-977d4bf1b13b",
        "5e3ea366-33c1-2fe2-6d59-5f6a19a1236e",
        "54516a8d-6dc8-f940-b7b3-257c35d2968c",
        "06f66b1f-833c-e940-dd9a-9457c459dd0d",
        "bf9aacfc-70fe-30bb-3170-eb887209b6aa",
        "186bf23b-3e11-93f2-cf0f-3b25c0dd5d3b"
      ]
    },
    {
      "id": "8094fd3c-5b27-1a6d-41ea-55d117f000bc",
      "name": "reading_error_4xx",
      "description": "Folder for reading",
      "order": [
        "064b635d-21b1-fb64-663c-9af195ae0f64",
        "2e2bb1f1-6841-c2e2-a5ca-ae69d4ba73e7",
        "045c15ca-99ff-eb90-c23d-6504b528e2fa",
        "9407c63d-04ef-af3c-b523-973f68e766de",
        "1941beb0-1692-d332-71b1-7a288c7706bd",
        "65f91bcd-1c24-f71e-6aa1-1b2a4562a395",
        "5b531183-716a-bc5d-7d29-3170008f650c",
        "64f867dd-2abd-27c9-1a20-04b2b7acf532",
        "7808c431-d413-8823-4b62-5590389d5900",
        "12abf366-7ef6-14aa-7ffa-5f1b62cf291c",
        "76f750a8-3d4c-9aef-188d-65fd0a36ba85",
        "fbe1f863-2181-546e-daea-48c1de1e7e3b"
      ],
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 574796604
    },
    {
      "id": "62d60316-72a5-61bf-599c-43ecd00f9321",
      "name": "reading_error_5xx",
      "description": "Folder for reading",
      "order": [
        "d5602cd0-5c14-14ec-9ebd-e8f7cfcd982d",
        "ccbefbc0-e4d3-49ec-8a5c-afde6b74143a",
        "5fb73785-537b-9020-c4b7-b848150e12b7",
        "b18de53c-18a0-93d1-b094-804258f0fa69",
        "350bf14b-3ed1-6630-19e8-adcdc336d504",
        "e993afe7-ff84-131c-2454-995a8aaa3b3c",
        "2e675ea4-8f3c-0dd1-3d36-15015d45f76d",
        "0ebe8f94-2da6-28d4-8fa7-6efd063bede3",
        "1cb079f0-0d04-d144-86cc-ed3af001a7b1",
        "d148a842-91ef-3cfc-446e-8c0b418ddf1d",
        "0e5c684f-6fe5-cf18-ab18-4d495a709163"
      ],
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 574796604
    },
    {
      "id": "2c188b44-7b59-7c8e-7af3-68aeb09747ae",
      "name": "valuedescriptor",
      "description": "Folder for valuedescriptor",
      "order": [
        "6669d0c4-6864-6c67-dafa-913e98e2a511",
        "bd5df95f-54ea-bd27-081e-e4ee747f078d",
        "eca3421d-9790-9210-4c92-faeb280a3554",
        "ed1c98b3-d025-b7e8-aef3-d1028afd2036",
        "c1710d6a-f4c4-c7e8-9906-9b9335435f97",
        "6b89c52a-51a1-4f6c-bedd-86cfbb7468ee",
        "5dd6f2d2-dc0c-17f5-85d0-65f77ef2d409",
        "b4ca2521-2beb-2b31-0123-1aec19b86478",
        "02a3cfae-d17d-6ad8-3272-f661718ee2cc"
      ],
      "owner": "1042075",
      "lastUpdatedBy": "1046529",
      "lastRevision": 574796605
    },
    {
      "id": "e22bfb44-cd70-2b40-4e05-f00c829e95ee",
      "name": "valuedescriptor_error_4xx",
      "description": "Folder for valuedescriptor",
      "order": [
        "665f37c0-90aa-b462-75e8-4b505cd0d618",
        "5e6130c3-5fc1-f858-e027-3f14d043e024",
        "0e77cae3-4384-5289-ff71-bf4280a2c63a",
        "58e50f1e-cb59-ba66-33c5-4fee7a8245d9",
        "e56abd39-6c31-b7bb-8a20-429ec98c875d",
        "efaf3cb0-f9db-1bd4-8a55-27063e99cb4e",
        "943abbba-9161-5d15-9514-b7475afada58",
        "148c7527-fb72-587d-edf7-51e5869913b6"
      ],
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 574796605
    },
    {
      "id": "194606ef-5ba6-c73c-1cfe-1ff47ad23b06",
      "name": "valuedescriptor_error_5xx",
      "description": "Folder for valuedescriptor",
      "order": [
        "a9949766-207b-c081-065d-5eec5328c54d",
        "9e7c2bbf-31ac-6bf1-5538-0bc230ce4fc0",
        "94d53810-9fd2-27a8-2628-60192b3d5ca6",
        "5d3e409c-84af-eef8-a310-b29e20c0c3a4",
        "69136f57-be4a-1e6d-1530-42ff89660042",
        "bb205fc9-51d9-9b98-81d4-ebe6648b76a0",
        "a6f062c2-a949-ce89-6370-92f26b5711cf",
        "a739b515-bb07-78d3-d01e-c221a96f5d1a"
      ],
      "owner": "1042075",
      "lastUpdatedBy": "1042075",
      "lastRevision": 574796605
    }
  ],
  "timestamp": 0,
  "owner": "1042075",
  "public": false,
  "published": false,
  "requests": [
    {
      "id": "00da1829-97da-e251-8e94-f9db65538067",
      "folder": "5357a1bf-d0ff-b411-3ecd-3ba070071d69",
      "name": "01 http://localhost:48080/api/v1/event",
      "dataMode": "raw",
      "data": [],
      "descriptionFormat": null,
      "description": "Add a new event (with its associated readings).",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /event - POST\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time \ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n    }\n    //Test body value\n    tests[\"Is Body Conatins Id\"] = responseBody.length === 24;\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "rawModeData": "{  \r\n   \"origin\":1471806386919,\r\n   \"device\":\"luxmeter\",\r\n   \"readings\":[  \r\n      {  \r\n         \"origin\":1471806386919,\r\n         \"name\":\"luminousIntensity\",\r\n         \"value\":\"38\"\r\n      }\r\n   ]\r\n}"
    },
    {
      "id": "02a3cfae-d17d-6ad8-3272-f661718ee2cc",
      "folder": "2c188b44-7b59-7c8e-7af3-68aeb09747ae",
      "name": "90 http://localhost:48080/api/v1/valuedescriptor/label/:label",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return ValueDescriptor objects with given label. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor/label/{{ValuedescriptorByLabel}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /valuedescriptor - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n    if(responseCode.code === 200){\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n         //Test body parameters\n        var actualValueDescriptor;\n        try{\n            //Parse json response\n            actualValueDescriptor = JSON.parse(responseBody);\n        }catch(e) {\n            console.log(\"Exception while parsing json response\");\n        }\n        \n        if(actualValueDescriptor.length !== 0) {\n         tests[\"Is Valid Response Schema\"] = tv4.validate(actualValueDescriptor, data.schema);\n            console.log(\"Validation failed: \", tv4.error);\n        } else {\n            //Shows message when event list is empty\n            console.log(\"Valuedescriptor List Empty\");\n            tests[\"Is ValueDescriptor list empty\"] = actualValueDescriptor.length === 0\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "0428e9bc-d7ec-8fb5-792d-86df0f28984b",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event/device/{{invalidDeviceName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event/id/:id - 404 Error - DEL \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\n//tests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475148273472,
      "name": "100 http://localhost:48080/api/v1/event/device/:deviceId",
      "description": "Delete all events (and their readings) associated to a device given the device's id (either database generated id or name). ServiceException (HTTP 503) for unknown or unanticipated issues.   NotFoundException (HTTP 404) if the meta data checks are on and no device is found for supplied id.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "04581b28-9c62-0594-089e-e96d1d340490",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/event",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /event - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//If request success with response code is 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test Response time\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var jsonData = JSON.parse(responseBody);\n    if(jsonData.length !== 0){\n            tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475042470064,
      "name": "04 http://localhost:48080/api/v1/event",
      "description": "Update the event data (not including updating the readings). NotFoundException (HTTP 404) if the event cannot be found by id. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": [],
      "rawModeData": "{\"id\":\"57ba04a1189b95b8afcdafd7\",\"pushed\":1471806399999}"
    },
    {
      "id": "045c15ca-99ff-eb90-c23d-6504b528e2fa",
      "folder": "8094fd3c-5b27-1a6d-41ea-55d117f000bc",
      "name": "35 http://localhost:48080/api/v1/reading",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\"origin\":1471806366619,\"name\":\"co21\",\"value\":\"12\"}",
      "descriptionFormat": "html",
      "description": "Add a new reading. ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the associated value descriptor is non-existent.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading",
      "preRequestScript": "",
      "tests": "//Expect 409 Status, if the associated value descriptor is non-existent\ntests[\"Status code is 409\"] = responseCode.code === 409;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;\n",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "06f66b1f-833c-e940-dd9a-9457c459dd0d",
      "folder": "77f03137-50a1-b8b8-c53e-e775a889208b",
      "name": "59 http://localhost:48080/api/v1/reading/label/:label/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return a list of readings with an associated value descriptor of the label specified. LimitExceededException (HTTP 413) if the number of readings exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/label/{{readingValueDescriptorLabel}}/{{limit}}",
      "preRequestScript": "",
      "tests": " /*\n * Test Case:  api/v1/reading/name/:name/{limit}- GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        \n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualReadingData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualReadingData.length !== 0) {\n                tests[\"Is record count is equal or less than limit\"] = actualReadingData.length <= data.limit;\n               \n                tests[\"Is valid response schema\"] = tv4.validate(actualReadingData, data.schema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"Reading is empty.\");\n                tests[\"Is Reading empty\"] = actualReadingData.length === 0;\n            }\n        }\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "08232888-9cad-ab7c-c262-8149b8d8a061",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event/device/{{deviceGetRequestName}}/{{limit}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event/device/:deviceId/{limit} - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        \n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualEventData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualEventData.length !== 0) {\n                tests[\"Is record count is equal or less than limit\"] = actualEventData.length <= data.limit;\n               \n                tests[\"Is valid response schema\"] = tv4.validate(actualEventData, data.schema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"Event is empty.\");\n                tests[\"Is Event empty\"] = actualEventData.length === 0;\n            }\n        }\n    }\n}\n\n\n\n\n\n\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1474880373218,
      "name": "94 http://localhost:48080/api/v1/event/device/:deviceId/{limit}",
      "description": "Return list of events with their associated readings for a given device, sort by event creation date. May be an empty list if none are associated to the device.  Note: does not yet handle device managers. LimitExceededException (HTTP 413) if the number of events exceeds the current max limit. ServcieException (HTTP 503) for unknown or unanticipated issues.  NotFoundException (HTTP 404) if the meta data checks are on and no device is found for supplied id.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "0aa9d644-ac26-9746-5370-a3be6698d25c",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/event",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /event - 409 Error - POST \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n//Test Case for status : 409\ntests[\"Status code is 409\"] = responseCode.code === 409;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1474895413837,
      "name": "02 http://localhost:48080/api/v1/event",
      "description": "Add a new event (with its associated readings). Prefers the event device is a device name but can also be a device id (database generated). DataValidationException (HTTP 409) if the a reading is associated to a non-existent value descriptor. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": [],
      "rawModeData": "{  \r\n   \"origin\":1471806386919,\r\n   \"device\":\"livingroomthermostat\",\r\n   \"readings\":[  \r\n      {  \r\n         \"origin\":1471806386919,\r\n         \"name\":\"hummidity\",\r\n         \"value\":\"38\"\r\n      }\r\n   ]\r\n}"
    },
    {
      "id": "0c412c49-00bd-0b65-839a-ab4e13b8f831",
      "folder": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "33 http://localhost:48080/api/v1/event/scrub",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove all pushed events and their associated readings.ServiceException (HTTP 503) for unknown or unanticipated issues.  Should only be used by the scrubber micro service",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event/scrub",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "0e5c684f-6fe5-cf18-ab18-4d495a709163",
      "folder": "62d60316-72a5-61bf-599c-43ecd00f9321",
      "name": "67 http://localhost:48080/api/v1/reading/:start/{end}/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return a list of readings between two timestamps - limited by the number specified in the limit parameter. LimitExceededException (HTTP 413) if the number of readings exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/{{start}}/{{end}}/{{limit}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "0e77cae3-4384-5289-ff71-bf4280a2c63a",
      "folder": "e22bfb44-cd70-2b40-4e05-f00c829e95ee",
      "name": "77 http://localhost:48080/api/v1/valuedescriptor/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the ValueDescriptor designated by database generated identifier. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the value descriptor is still referenced in Readings. NotFoundException (404) if the value descriptor cannot be located by the identifier.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor/id/{{ValuedescriptorDeleteInavlidId}}",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case:  /valuedescriptor/id/{id} - DELETE\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 404){\n        tests[\"Status code is 404\"] = responseCode.code === 404;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the value descriptor cannot be located by the identifier.\n  }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "0ebe8f94-2da6-28d4-8fa7-6efd063bede3",
      "folder": "62d60316-72a5-61bf-599c-43ecd00f9321",
      "name": "58 http://localhost:48080/api/v1/reading/uomlabel/:uomLabel/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return a list of readings with an associated value descriptor of the UoM label specified. LimitExceededException (HTTP 413) if the number of readings exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/uomlabel/{{readingValueDescriptorUom}}/{{limit}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "148c7527-fb72-587d-edf7-51e5869913b6",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/valuedescriptor",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": "    /**\n     * Test Case:  /valuedescriptor - POST\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    tests[\"Status code is 409\"] = responseCode.code === 409;\n    tests[\"Response time is less than 200ms\"] = responseTime < 200;\n    if(responseCode.code === 409){\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the a formatting string of the value descriptor is not a valid printf format\n }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "name": "104 http://localhost:48080/api/v1/valuedescriptor 409",
      "description": "Add a new ValueDescriptor whose name must be unique. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) try to add ValueDescriptor which already exists in database.",
      "folder": "e22bfb44-cd70-2b40-4e05-f00c829e95ee",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "descriptionFormat": null,
      "rawModeData": "{\r\n  \"name\":\"co2\",\r\n  \"min\":\"12\",\r\n  \"max\":\"15\",\r\n  \"type\":\"F\",\r\n  \"uomLabel\":\"degreecel\",\r\n  \"defaultValue\":\"0\",\r\n  \"formatting\":\"%s\",\r\n  \"labels\":[\"NHCO2\",\"hvac\"]\r\n}"
    },
    {
      "id": "17d05b63-5d17-6306-4a30-1bdec1cd5bc0",
      "folder": "77f03137-50a1-b8b8-c53e-e775a889208b",
      "name": "34 http://localhost:48080/api/v1/reading",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\"origin\":1471806366619,\"name\":\"co2\",\"value\":\"12\"}",
      "descriptionFormat": "html",
      "description": "Add a new reading. ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the associated value descriptor is non-existent.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /api/v1/reading - POST\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n    if(responseCode.code === 200){\n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        if(null !== responseBody){\n            tests[\"Response Object id\"] = responseBody.length === 24;\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "186bf23b-3e11-93f2-cf0f-3b25c0dd5d3b",
      "folder": "77f03137-50a1-b8b8-c53e-e775a889208b",
      "name": "65 http://localhost:48080/api/v1/reading/:start/{end}/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return a list of readings between two timestamps - limited by the number specified in the limit parameter. LimitExceededException (HTTP 413) if the number of readings exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/{{start}}/{{end}}/{{limit}}",
      "preRequestScript": "",
      "tests": " /*\n * Test Case:  api/v1/reading/name/:name/{limit}- GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        \n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualReadingData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualReadingData.length !== 0) {\n                tests[\"Is record count is equal or less than limit\"] = actualReadingData.length <= data.limit;\n               \n                tests[\"Is valid response schema\"] = tv4.validate(actualReadingData, data.schema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"Reading is empty.\");\n                tests[\"Is Reading empty\"] = actualReadingData.length === 0;\n            }\n        }\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "1cb079f0-0d04-d144-86cc-ed3af001a7b1",
      "folder": "62d60316-72a5-61bf-599c-43ecd00f9321",
      "name": "61 http://localhost:48080/api/v1/reading/label/:label/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return a list of readings with an associated value descriptor of the label specified. LimitExceededException (HTTP 413) if the number of readings exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/label/{{readingValueDescriptorLabel}}/{{limit}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "1f799e18-86f8-fa0e-6b25-6cb137882a57",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/event",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /event - 404 Error - PUT \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1474895548927,
      "name": "05 http://localhost:48080/api/v1/event",
      "description": "Update the event data (not including updating the readings). NotFoundException (HTTP 404) if the event cannot be found by id. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": [],
      "rawModeData": "{\"id\":\"57e866d4e4b0ca8e6d73a411\",\"pushed\":1471806399999}"
    },
    {
      "id": "21d1c70c-d875-3708-10fd-89dadc58e3bc",
      "folder": "77f03137-50a1-b8b8-c53e-e775a889208b",
      "name": "44 http://localhost:48080/api/v1/reading/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Retrieve a reading by its database generated id.  ServiceException (HTTP 503) for unknown or unanticipated issues",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/{{readingGetRequestId}}",
      "preRequestScript": "",
      "tests": "//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualEventData;\n    try{\n        //Parse json response\n        actualEventData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualEventData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualEventData, data.objectSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Reading is empty.\");\n        tests[\"Is Reading empty\"] = actualEventData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "224a0aa6-00c3-a8b8-cf45-1c10a7e6108c",
      "folder": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "09 http://localhost:48080/api/v1/event",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Fetch all events with their associated readings. LimitExceededException (HTTP 413) if the number of events exceeds the current max limit. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "2ada22b7-006c-bff5-7963-6f594fa3e8ac",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/reading",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /api/v1/reading - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */  \n  \n    //Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+ data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var jsonData = JSON.parse(responseBody);\n    if(jsonData.length !== 0){\n            tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475226174517,
      "name": "37 http://localhost:48080/api/v1/reading",
      "description": "Update the reading.  Reading object needs to contain the database generated id of the existing reading. NotFoundException (HTTP 404) if the reading cannot be found by id. ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException if the associated value descriptor is non-existent.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": [],
      "rawModeData": "{\n    \"id\": \"57e866d4e4b0ca8e6d73a4b9\",\n    \"created\": 1474848468971,\n    \"modified\": 1474848468971,\n    \"origin\": 1471806386918,\n    \"pushed\": 0,\n    \"name\": \"ohm\",\n    \"value\": \"6\"\n }"
    },
    {
      "id": "2ba22d74-4bd9-f9bf-9eef-e9679ffba010",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event/{{start}}/{{end}}/{{limit}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event/:start/{end}/{limit} - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        \n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualEventData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualEventData.length !== 0) {\n                tests[\"Is record count is equal or less than limit\"] = actualEventData.length <= data.limit;\n               \n                tests[\"Is valid response schema\"] = tv4.validate(actualEventData, data.schema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"Event is empty.\");\n                tests[\"Is Event empty\"] = actualEventData.length === 0;\n            }\n        }\n    }\n}\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1474885240298,
      "name": "24 http://localhost:48080/api/v1/event/:start/{end}/{limit}",
      "description": "Return all events between a given begin and end date/time (in the form of longs). LimitExceededException (HTTP 413) if the number of events exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "2bd7adfb-6fe9-fbfb-06a3-b15da5c96329",
      "folder": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "26 http://localhost:48080/api/v1/event/:start/{end}/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return all events between a given begin and end date/time (in the form of longs). LimitExceededException (HTTP 413) if the number of events exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event/{{start}}/{{end}}/{{invalidLimit}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "2e2bb1f1-6841-c2e2-a5ca-ae69d4ba73e7",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/reading",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "//Assert 404 status if the reading cannot be found by id\ntests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;\n\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475227296916,
      "name": "38 http://localhost:48080/api/v1/reading",
      "description": "Update the reading.  Reading object needs to contain the database generated id of the existing reading. NotFoundException (HTTP 404) if the reading cannot be found by id. ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException if the associated value descriptor is non-existent.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": [],
      "rawModeData": "{\n    \"id\": \"57e866d4e4b0ca8e6d73a412\",\n    \"created\": 1475227070170,\n    \"modified\": 1475227070170,\n    \"origin\": 1471806366619,\n    \"pushed\": 0,\n    \"name\": \"co2\",\n    \"value\": \"12\"\n}"
    },
    {
      "id": "2e675ea4-8f3c-0dd1-3d36-15015d45f76d",
      "folder": "62d60316-72a5-61bf-599c-43ecd00f9321",
      "name": "55 http://localhost:48080/api/v1/reading/name/:name/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return a list of readings that are associated to a ValueDescripter by name. LimitExceededException (HTTP 413) if the number of readings exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/name/{{readingValueDescriptorName}}/{{limit}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "350bf14b-3ed1-6630-19e8-adcdc336d504",
      "folder": "62d60316-72a5-61bf-599c-43ecd00f9321",
      "name": "48 http://localhost:48080/api/v1/reading/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Delete the reading from persistent storage. NotFoundException (HTTP 404) if the reading cannot be found by id. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/id/{{readingGetRequestId}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "3ab77e32-f5a3-40c1-dc82-5dac8492fc81",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event/id/{{invalidId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event/id/:id - 404 Error - DEL \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1474895604982,
      "name": "13 http://localhost:48080/api/v1/event/id/:id",
      "description": "Delete an event and all its readings given its database generated id. NotFoundException (HTTP 404) if the event cannot be found by id. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "3f179103-32a5-08cb-5729-ac0979d89a24",
      "folder": "9159ddf6-cbb0-e2b0-bfa9-cefbc6940489",
      "name": "93 http://localhost:48080/api/v1/ping",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Test service providing an indication that the service is available.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/ping",
      "preRequestScript": "",
      "tests": "",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "4ce883e8-32d8-0d1a-cb29-8538c5f4eb7e",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event/{{eventGetRequestId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event/id - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualEventData;\n    try{\n        //Parse json response\n        actualEventData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualEventData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualEventData, data.objectSchema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = actualEventData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475145282194,
      "name": "10 http://localhost:48080/api/v1/event/:id",
      "description": "Fetch a specific event by database specified id - returning null if none are found. Note: does not yet handle device managers. ServcieException (HTTP 503) for unknown or unanticipated issues",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "54516a8d-6dc8-f940-b7b3-257c35d2968c",
      "folder": "77f03137-50a1-b8b8-c53e-e775a889208b",
      "name": "56 http://localhost:48080/api/v1/reading/uomlabel/:uomLabel/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return a list of readings with an associated value descriptor of the UoM label specified. LimitExceededException (HTTP 413) if the number of readings exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/uomlabel/{{readingValueDescriptorUom}}/{{limit}}",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  api/v1/reading/uomlabel/:uomLabel/{limit}- GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        \n       //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        \n          //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualReadingData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualReadingData.length !== 0) {\n                tests[\"Is record count is equal or less than limit\"] = actualReadingData.length <= data.limit;\n               \n                tests[\"Is valid response schema\"] = tv4.validate(actualReadingData, data.schema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"Reading is empty.\");\n                tests[\"Is Reading empty\"] = actualReadingData.length === 0;\n            }\n        }\n    }\n}\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "58e50f1e-cb59-ba66-33c5-4fee7a8245d9",
      "folder": "e22bfb44-cd70-2b40-4e05-f00c829e95ee",
      "name": "83 http://localhost:48080/api/v1/valuedescriptor/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the ValueDescriptor designated by name. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the value descriptor is still referenced in Readings. NotFoundException (404) if the value descriptor cannot be located by the identifier.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor/name/{{ValuedescriptorByDeleteInvalidName}}",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case:  /valuedescriptor/name/{name} - DELETE\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    tests[\"Status code is 404\"] = responseCode.code === 404;\n    if(responseCode.code === 404){\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "5ae5eacb-7e3b-9ff2-08b6-ae355b2b1e67",
      "folder": "9159ddf6-cbb0-e2b0-bfa9-cefbc6940489",
      "name": "92 http://localhost:48080/api/v1/ping",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Test service providing an indication that the service is available.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/ping",
      "preRequestScript": "",
      "tests": " /**\n * Test Case:  /api/v1/ping - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n * \n **/\n \n tests[\"Ping Success\"] = responseCode.code === 200;\n tests[\"Response time is less than 200ms\"] = responseTime < 200;\n if(responseCode.code === 200){\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        if(responseBody.length!== 0){\n            tests[\"Body is correct\"] = responseBody === \"pong\";\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "5d3e409c-84af-eef8-a310-b29e20c0c3a4",
      "folder": "194606ef-5ba6-c73c-1cfe-1ff47ad23b06",
      "name": "81 http://localhost:48080/api/v1/valuedescriptor/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return ValueDescriptor object with given name. Could be null if no value descriptors found by the name (name is unique across all value descriptors).  ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor/name/TC",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case:  /api/v1/valuedescriptor/name/{name} - GET\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *  // unknown or unanticipated issues\n     **/ \n    \n    tests[\"Status code is 503\"] = responseCode.code === 503;\n    tests[\"Response time is less than 200ms\"] = responseTime < 200;\n    if(responseCode.code === 503){\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // unknown or unanticipated issues\n }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "5dd6f2d2-dc0c-17f5-85d0-65f77ef2d409",
      "folder": "2c188b44-7b59-7c8e-7af3-68aeb09747ae",
      "name": "86 http://localhost:48080/api/v1/valuedescriptor/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Fetch a specific ValueDescriptor by its database generated id.  ServcieException (HTTP 503) for unknown or unanticipated issues",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor/{{ValuedescriptorById}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/valuedescriptor - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n    if(responseCode.code === 200){\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }  \n        var actualValueDescriptorId;\n        try{\n            //Parse json response\n            actualValueDescriptorId = JSON.parse(responseBody);\n        }catch(e) {\n            console.log(\"Exception while parsing json response\");\n        }\n        \n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualValueDescriptorId, data.ObjectSchema);\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "5e3ea366-33c1-2fe2-6d59-5f6a19a1236e",
      "folder": "77f03137-50a1-b8b8-c53e-e775a889208b",
      "name": "53 http://localhost:48080/api/v1/reading/name/:name/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return a list of readings that are associated to a ValueDescripter by name. LimitExceededException (HTTP 413) if the number of readings exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/name/{{readingValueDescriptorName}}/{{limit}}",
      "preRequestScript": "",
      "tests": " /*\n * Test Case:  api/v1/reading/name/:name/{limit}- GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n       //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        \n          //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualReadingData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualReadingData.length !== 0) {\n                tests[\"Is record count is equal or less than limit\"] = actualReadingData.length <= data.limit;\n               \n                tests[\"Is valid response schema\"] = tv4.validate(actualReadingData, data.schema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"Reading is empty.\");\n                tests[\"Is Reading empty\"] = actualReadingData.length === 0;\n            }\n        }\n    }\n    \n}\n}\n",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "5e6130c3-5fc1-f858-e027-3f14d043e024",
      "folder": "e22bfb44-cd70-2b40-4e05-f00c829e95ee",
      "name": "69 http://localhost:48080/api/v1/valuedescriptor",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n  \"name\":\"co2\",\r\n  \"min\":\"12\",\r\n  \"max\":\"15\",\r\n  \"type\":\"F\",\r\n  \"uomLabel\":\"degreecel\",\r\n  \"defaultValue\":\"0\",\r\n  \"formatting\":\"%\",\r\n  \"labels\":[\"NHCO2\",\"hvac\"]\r\n}",
      "descriptionFormat": "html",
      "description": "Add a new ValueDescriptor whose name must be unique. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the a formatting string of the value descriptor is not a valid printf format.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case:  /valuedescriptor - POST\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 409){\n        tests[\"Status code is 409\"] = responseCode.code === 409;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the a formatting string of the value descriptor is not a valid printf format\n  }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "5fb73785-537b-9020-c4b7-b848150e12b7",
      "folder": "62d60316-72a5-61bf-599c-43ecd00f9321",
      "name": "36 http://localhost:48080/api/v1/reading",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\"origin\":1471806366619,\"name\":\"co2\",\"value\":\"12\"}",
      "descriptionFormat": "html",
      "description": "Add a new reading. ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the associated value descriptor is non-existent.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "6463d2de-d27b-bc78-8c8f-0f5ba831666e",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/event",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /event - 409 Error - POST \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n//Test Case for status : 409\ntests[\"Status code is 409\"] = responseCode.code === 409;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1474950039023,
      "name": "96 http://localhost:48080/api/v1/event",
      "description": "Add a new event (with its associated readings). Prefers the event device is a device name but can also be a device id (database generated). DataValidationException (HTTP 409) if the a reading is associated to a non-existent value descriptor. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": [],
      "rawModeData": "{  \r\n   \"origin\":1471806386919,\r\n   \"device\":\"57e8b705e4b060e251231c4f\",\r\n   \"readings\":[  \r\n      {  \r\n         \"origin\":1471806386919,\r\n         \"name\":\"hummidity\",\r\n         \"value\":\"38\"\r\n      }\r\n   ]\r\n}"
    },
    {
      "id": "665f37c0-90aa-b462-75e8-4b505cd0d618",
      "folder": "e22bfb44-cd70-2b40-4e05-f00c829e95ee",
      "name": "72 http://localhost:48080/api/v1/valuedescriptor",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\n  \"id\":\"57e5064be4b0f1b53f534103\",\n  \"min\":\"-200\",\n  \"max\":\"200\"\n}",
      "descriptionFormat": "html",
      "description": "Update the ValueDescriptor identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the a formatting string of the value descriptor is not a valid printf format. NotFoundException (404) if the value descriptor cannot be located by the identifier.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case:  /valuedescriptor - PUT\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 404){\n        tests[\"Status code is 404\"] = responseCode.code === 404;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "6669d0c4-6864-6c67-dafa-913e98e2a511",
      "folder": "2c188b44-7b59-7c8e-7af3-68aeb09747ae",
      "name": "73 http://localhost:48080/api/v1/valuedescriptor",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return all ValueDescriptor objects. LimitExceededException (HTTP 413) if the number of value descriptors exceeds the current max limit. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /valuedescriptor - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n    if(responseCode.code === 200){\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n         //Test body parameters\n        var actualValueDescriptor;\n        try{\n            //Parse json response\n            actualValueDescriptor = JSON.parse(responseBody);\n        }catch(e) {\n            console.log(\"Exception while parsing json response\");\n        }\n        \n        if(actualValueDescriptor.length !== 0) {\n         tests[\"Is Valid Response Schema\"] = tv4.validate(actualValueDescriptor, data.schema);\n            console.log(\"Validation failed: \", tv4.error);\n        } else {\n            //Shows message when event list is empty\n            console.log(\"Valuedescriptor List Empty\");\n            tests[\"Is ValueDescriptor list empty\"] = actualValueDescriptor.length === 0\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "69136f57-be4a-1e6d-1530-42ff89660042",
      "folder": "194606ef-5ba6-c73c-1cfe-1ff47ad23b06",
      "name": "85 http://localhost:48080/api/v1/valuedescriptor/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the ValueDescriptor designated by name. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the value descriptor is still referenced in Readings. NotFoundException (404) if the value descriptor cannot be located by the identifier.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {
        "name": "{{name}}"
      },
      "url": "{{baseUrl}}/api/v1/valuedescriptor/name/:name",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case:  /api/v1/valuedescriptor/name/{name} - DELETE\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *  // unknown or unanticipated issues\n     **/ \n    if(responseCode.code === 503){\n        tests[\"Status code is 503\"] = responseCode.code === 503;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // unknown or unanticipated issues\n }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "6b89c52a-51a1-4f6c-bedd-86cfbb7468ee",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/valuedescriptor/name/{{ValuedescriptorDeleteByName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/**\n * Test Case:  /api/v1/valuedescriptor/name/:name - DELETE\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n \n  tests[\"Status code is 200\"] = responseCode.code === 200;\n  tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n  if(responseCode.code === 200){\n          var contentTypeHeaderExists = postman.getResponseHeader(\"Content-Type\");\n          tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n          if (contentTypeHeaderExists) {\n              tests[\"Content-Type is application/json\"] = \n                   responseHeaders[\"Content-Type\"].has(\"application/json\");\n          }     \n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Record Deleted\"] = responseBody === \"true\";\n        }\n  }",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475217056889,
      "name": "82 http://localhost:48080/api/v1/valuedescriptor/name/:name",
      "description": "Remove the ValueDescriptor designated by name. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the value descriptor is still referenced in Readings. NotFoundException (404) if the value descriptor cannot be located by the identifier.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "755a22fc-1091-cdee-94d2-96e3107be05d",
      "folder": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "14 http://localhost:48080/api/v1/event/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Delete an event and all its readings given its database generated id. NotFoundException (HTTP 404) if the event cannot be found by id. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event/id/{{invalidId}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "7698dffc-a95d-a177-bc13-abe49fc015aa",
      "folder": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "101 http://localhost:48080/api/v1/event/device/:deviceId ",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Delete all events (and their readings) associated to a device given the device's id (either database generated id or name). ServiceException (HTTP 503) for unknown or unanticipated issues.   NotFoundException (HTTP 404) if the meta data checks are on and no device is found for supplied id.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event/device/{{invalidDeviceName}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "76f750a8-3d4c-9aef-188d-65fd0a36ba85",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/reading",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "//Expect 409 Status, if the associated value descriptor is non-existent\ntests[\"Status code is 409\"] = responseCode.code === 409;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475232369022,
      "name": "39 http://localhost:48080/api/v1/reading 409 Error Status",
      "description": "Update the reading.  Reading object needs to contain the database generated id of the existing reading. NotFoundException (HTTP 404) if the reading cannot be found by id. ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException if the associated value descriptor is non-existent.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "rawModeData": "{\n    \"id\": \"57e866d4e4b0ca8e6d73a4b1\",\n    \"created\": 1475227393375,\n    \"modified\": 1475227393375,\n    \"origin\": 1471806366619,\n    \"pushed\": 0,\n    \"name\": \"co2213\",\n    \"value\": \"12\"\n}"
    },
    {
      "id": "7f66e07b-39e6-0296-3062-96d2478be938",
      "folder": "77f03137-50a1-b8b8-c53e-e775a889208b",
      "name": "46 http://localhost:48080/api/v1/reading/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Delete the reading from persistent storage. NotFoundException (HTTP 404) if the reading cannot be found by id. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/id/{{readingDelRequestId}}",
      "preRequestScript": "",
      "tests": " /*\n * Test Case:  /api/v1/reading/id/:id - DELETE\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n  \n  tests[\"Status code is 200\"] = responseCode.code === 200;\n  if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Request Objec Deleted\"] = responseBody === \"true\";\n        }\n  }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "82161af8-bc0d-e130-072d-ea3909fb0ed2",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/event",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "POST",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /event - POST\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time \ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.TextPlainContentType] =  responseHeaders[\"Content-Type\"].has(data.TextPlainContentType);\n    }\n    //Test body value\n    tests[\"Is Body Conatins Id\"] = responseBody.length === 24;\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475212563505,
      "name": "95 http://localhost:48080/api/v1/event ",
      "description": "Add a new event (with its associated readings). Prefers the event device is a device name but can also be a device id (database generated). DataValidationException (HTTP 409) if the a reading is associated to a non-existent value descriptor. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": [],
      "rawModeData": "{  \r\n   \"origin\":1471806386919,\r\n   \"device\":\"57e8b705e4b060e251231c4f\",\r\n   \"readings\":[  \r\n      {  \r\n         \"origin\":1471806386919,\r\n         \"name\":\"luminousIntensity\",\r\n         \"value\":\"40\"\r\n      }\r\n   ]\r\n}"
    },
    {
      "id": "8e07f708-7c82-4fd2-da7d-25ab2d96a4d1",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualEventData;\n    try{\n        //Parse json response\n        actualEventData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualEventData.length !== 0 ) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualEventData, data.schema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event list and expected list length doesnt match\");\n        tests[\"Is actual and expected Event list matching\"] = actualEventData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475041766444,
      "name": "07 http://localhost:48080/api/v1/event",
      "description": "Fetch all events with their associated readings. LimitExceededException (HTTP 413) if the number of events exceeds the current max limit. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "8f01d601-61c5-1b86-927a-53feb370d13b",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/event/id/{{invalidId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /event/id/:id - 404 Error - PUT \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\ntests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475057737697,
      "name": "16 http://localhost:48080/api/v1/event/id/:id",
      "description": "Update the event to be pushed (out of EdgeX to an enterprise or cloud system) by setting the pushed timestamp to the current time. NotFoundException (HTTP 404) if the event cannot be found by id. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": [],
      "rawModeData": "{  \r\n   \"origin\":1471806386919,\r\n   \"device\":\"57e8b705e4b060e251231c4f\",\r\n   \"readings\":[  \r\n      {  \r\n         \"origin\":1471806386919,\r\n         \"name\":\"hummidity\",\r\n         \"value\":\"38\"\r\n      }\r\n   ]\r\n}"
    },
    {
      "id": "92593ccb-c97d-d26f-fd20-bda49a1bcdc6",
      "folder": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "06 http://localhost:48080/api/v1/event",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\"id\":\"57ea0153e4b0f1b5c5ab75b7\",\"pushed\":1471806399999}",
      "descriptionFormat": "html",
      "description": "Update the event data (not including updating the readings). NotFoundException (HTTP 404) if the event cannot be found by id. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "9407c63d-04ef-af3c-b523-973f68e766de",
      "folder": "8094fd3c-5b27-1a6d-41ea-55d117f000bc",
      "name": "47 http://localhost:48080/api/v1/reading/id/:id",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "",
      "descriptionFormat": "html",
      "description": "Delete the reading from persistent storage. NotFoundException (HTTP 404) if the reading cannot be found by id. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "Content-Type: application/json\n",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/id/{{invalidId}}",
      "preRequestScript": "",
      "tests": "//Assert 404 status if the reading cannot be found by id\ntests[\"Status code is 404\"] = responseCode.code === 404;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "943abbba-9161-5d15-9514-b7475afada58",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/valuedescriptor",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "    /**\n     * Test Case:  /valuedescriptor - PUT\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 409){\n        tests[\"Status code is 409\"] = responseCode.code === 409;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the a formatting string of the value descriptor is not a valid printf format\n }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "name": "103 http://localhost:48080/api/v1/valuedescriptor",
      "description": "Update the ValueDescriptor identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the a formatting string of the value descriptor is not a valid printf format. NotFoundException (404) if the value descriptor cannot be located by the identifier.",
      "folder": "e22bfb44-cd70-2b40-4e05-f00c829e95ee",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "descriptionFormat": null,
      "rawModeData": "{\r\n  \"name\":\"luminousIntensity\",\r\n  \"min\":\"-200\",\r\n  \"max\":\"200\",\r\n  \"type\":\"F\",\r\n  \"uomLabel\":\"degreecel23\",\r\n  \"defaultValue\":\"0\",\r\n  \"formatting\":\"%\",\r\n  \"labels\":[\"NHCO2\",\"hvac\"]\r\n}"
    },
    {
      "id": "94d53810-9fd2-27a8-2628-60192b3d5ca6",
      "folder": "194606ef-5ba6-c73c-1cfe-1ff47ad23b06",
      "name": "79 http://localhost:48080/api/v1/valuedescriptor/id/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove the ValueDescriptor designated by database generated identifier. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the value descriptor is still referenced in Readings. NotFoundException (404) if the value descriptor cannot be located by the identifier.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {
        "id": ""
      },
      "url": "{{baseUrl}}/api/v1/valuedescriptor/id/:id",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case:  /api/v1/valuedescriptor/id/{id} - DELETE\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *  // unknown or unanticipated issues\n     **/\n    if(responseCode.code === 503){\n        tests[\"Status code is 503\"] = responseCode.code === 503;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // unknown or unanticipated issues\n }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "99be43cd-5a62-b4c3-16a7-977d4bf1b13b",
      "folder": "77f03137-50a1-b8b8-c53e-e775a889208b",
      "name": "49 http://localhost:48080/api/v1/reading/device/:deviceId/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return list of all readings for a given device, sort by reading creation date. Note: does not yet handle device managers. LimitExceededException (HTTP 413) if the number of readings exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if meta checks are in place and if the device id or name does not match any existing devices.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/device/{{deviceGetRequestId}}/{{limit}}",
      "preRequestScript": "",
      "tests": " /*\n * Test Case:  api/v1/reading/device/:deviceId/{limit}- GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        \n          //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualReadingData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualReadingData.length !== 0) {\n                tests[\"Is record count is equal or less than limit\"] = actualReadingData.length <= data.limit;\n               \n                tests[\"Is valid response schema\"] = tv4.validate(actualReadingData, data.schema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"Reading is empty.\");\n                tests[\"Is Reading empty\"] = actualReadingData.length === 0;\n            }\n        }\n    }\n}\n\n\n\n\n\n",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "9e7c2bbf-31ac-6bf1-5538-0bc230ce4fc0",
      "folder": "194606ef-5ba6-c73c-1cfe-1ff47ad23b06",
      "name": "70 http://localhost:48080/api/v1/valuedescriptor",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n  \"name\":\"BP12\",\r\n  \"min\":\"12\",\r\n  \"max\":\"15\",\r\n  \"type\":\"F\",\r\n  \"uomLabel\":\"degreecel\",\r\n  \"defaultValue\":\"0\",\r\n  \"formatting\":\"%s\",\r\n  \"labels\":[\"NHCO2\",\"hvac\"]\r\n}",
      "descriptionFormat": "html",
      "description": "Add a new ValueDescriptor whose name must be unique. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the a formatting string of the value descriptor is not a valid printf format.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor",
      "preRequestScript": "",
      "tests": " /*\n * Test Case:  /api/v1/valuedescriptor - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *  // unknown or unanticipated issues\n */\n    if(responseCode.code === 503){\n        tests[\"Status code is 503\"] = responseCode.code === 503;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "a288328f-0029-5587-aa0d-b71dcb3e7b04",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event/device/{{deviceDelRequestId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event/device/:deviceId - DEL\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//If request success with response code is 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test Response time\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var jsonData = JSON.parse(responseBody);\n    tests[\"Is items deleted\"] = responseBody > 0;\n}\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1474884414373,
      "name": "21 http://localhost:48080/api/v1/event/device/:deviceId",
      "description": "Delete all events (and their readings) associated to a device given the device's id (either database generated id or name). ServiceException (HTTP 503) for unknown or unanticipated issues.   NotFoundException (HTTP 404) if the meta data checks are on and no device is found for supplied id.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "a6f062c2-a949-ce89-6370-92f26b5711cf",
      "folder": "194606ef-5ba6-c73c-1cfe-1ff47ad23b06",
      "name": "89 http://localhost:48080/api/v1/valuedescriptor/uomlabel/:uomLabel",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return ValueDescriptor objects with given UoM label. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {
        "uomLabel": "{{uomLabel}}"
      },
      "url": "{{baseUrl}}/api/v1/valuedescriptor/uomlabel/:uomLabel",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case:  /api/v1/valuedescriptor/uomlabel/{uomlabel} - GET\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     **/\n    if(responseCode.code === 503){\n        tests[\"Status code is 503\"] = responseCode.code === 503;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // unknown or unanticipated issues\n }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "a739b515-bb07-78d3-d01e-c221a96f5d1a",
      "folder": "194606ef-5ba6-c73c-1cfe-1ff47ad23b06",
      "name": "91 http://localhost:48080/api/v1/valuedescriptor/label/:label",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return ValueDescriptor objects with given label. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {
        "label": "{{label}}"
      },
      "url": "{{baseUrl}}/api/v1/valuedescriptor/label/:label",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case:  /api/v1/valuedescriptor/label/{label} - GET\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     **/\n    if(responseCode.code === 503){\n        tests[\"Status code is 503\"] = responseCode.code === 503;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n         // unknown or unanticipated issues\n }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "a9949766-207b-c081-065d-5eec5328c54d",
      "folder": "194606ef-5ba6-c73c-1cfe-1ff47ad23b06",
      "name": "75 http://localhost:48080/api/v1/valuedescriptor",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return all ValueDescriptor objects. LimitExceededException (HTTP 413) if the number of value descriptors exceeds the current max limit. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor",
      "preRequestScript": "",
      "tests": " /*\n * Test Case:  /api/v1/valuedescriptor - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *  // unknown or unanticipated issues\n */\n    if(responseCode.code === 503){\n        tests[\"Status code is 503\"] = responseCode.code === 503;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "b18de53c-18a0-93d1-b094-804258f0fa69",
      "folder": "62d60316-72a5-61bf-599c-43ecd00f9321",
      "name": "45 http://localhost:48080/api/v1/reading/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Retrieve a reading by its database generated id.  ServiceException (HTTP 503) for unknown or unanticipated issues",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/{{readingGetRequestId}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "b4323b55-ee19-3510-6e61-024782e07ce0",
      "folder": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "31 http://localhost:48080/api/v1/event/removeold/age/:age",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Remove all old events (and associated readings) based on delimiting age.  ServiceException (HTTP 503) for unknown or unanticipated issues.  Should only be used by the scrubber micro service",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event/removeold/age/{{age}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "b4ca2521-2beb-2b31-0123-1aec19b86478",
      "folder": "2c188b44-7b59-7c8e-7af3-68aeb09747ae",
      "name": "88 http://localhost:48080/api/v1/valuedescriptor/uomlabel/:uomLabel",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return ValueDescriptor objects with given UoM label. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor/uomlabel/{{ValuedescriptorByUmo}}",
      "preRequestScript": "",
      "tests": "/***\n * Test Case:  /api/v1/valuedescriptor - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n    if(responseCode.code === 200){\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n         //Test body parameters\n        var actualValueDescriptor;\n        try{\n            //Parse json response\n            actualValueDescriptor = JSON.parse(responseBody);\n        }catch(e) {\n            console.log(\"Exception while parsing json response\");\n        }\n        \n        if(actualValueDescriptor.length !== 0) {\n         tests[\"Is Valid Response Schema\"] = tv4.validate(actualValueDescriptor, data.schema);\n            console.log(\"Validation failed: \", tv4.error);\n        } else {\n            //Shows message when event list is empty\n            console.log(\"Valuedescriptor List Empty\");\n            tests[\"Is ValueDescriptor list empty\"] = actualValueDescriptor.length === 0\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "b5ef10e8-afc7-30cc-3fb5-741ac362d87c",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event/device/{{invalidId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event/id/:id - 404 Error - DEL \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\n//tests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475148282384,
      "name": "22 http://localhost:48080/api/v1/event/device/:deviceId",
      "description": "Delete all events (and their readings) associated to a device given the device's id (either database generated id or name). ServiceException (HTTP 503) for unknown or unanticipated issues.   NotFoundException (HTTP 404) if the meta data checks are on and no device is found for supplied id.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "b979009a-9133-5614-9c8a-16fa667d3e08",
      "folder": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "03 http://localhost:48080/api/v1/event",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{  \r\n   \"origin\":1471806386919,\r\n   \"device\":\"livingroomthermostat\",\r\n   \"readings\":[  \r\n      {  \r\n         \"origin\":1471806386919,\r\n         \"name\":\"temperature\",\r\n         \"value\":\"38\"\r\n      }\r\n   ]\r\n}",
      "descriptionFormat": "html",
      "description": "Add a new event (with its associated readings). Prefers the event device is a device name but can also be a device id (database generated). DataValidationException (HTTP 409) if the a reading is associated to a non-existent value descriptor. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "bb205fc9-51d9-9b98-81d4-ebe6648b76a0",
      "folder": "194606ef-5ba6-c73c-1cfe-1ff47ad23b06",
      "name": "87 http://localhost:48080/api/v1/valuedescriptor/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Fetch a specific ValueDescriptor by its database generated id.  ServcieException (HTTP 503) for unknown or unanticipated issues",
      "headers": "",
      "method": "GET",
      "pathVariables": {
        "id": "{{id}}"
      },
      "url": "{{baseUrl}}/api/v1/valuedescriptor/:id",
      "preRequestScript": "",
      "tests": "    /**\n     * Test Case:  /api/v1/valuedescriptor/id - GET\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     **/\n    if(responseCode.code === 503){\n        tests[\"Status code is 503\"] = responseCode.code === 503;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // unknown or unanticipated issues\n  }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "bd5df95f-54ea-bd27-081e-e4ee747f078d",
      "folder": "2c188b44-7b59-7c8e-7af3-68aeb09747ae",
      "name": "71 http://localhost:48080/api/v1/valuedescriptor",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\n  \"id\":\"57b9fbb2189b95b8afcdafd3\",\n  \"min\":\"-800\",\n  \"max\":\"200\"\n}",
      "descriptionFormat": "html",
      "description": "Update the ValueDescriptor identified by the id or name in the object provided. Id is used first, name is used second for identification purposes. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the a formatting string of the value descriptor is not a valid printf format. NotFoundException (404) if the value descriptor cannot be located by the identifier.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor",
      "preRequestScript": "",
      "tests": " /**\n * Test Case:  /valuedescriptor - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n\n  tests[\"Status code is 200\"] = responseCode.code === 200;\n  if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Body has True\"] = responseBody === \"true\";\n        }\n  }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "bf9aacfc-70fe-30bb-3170-eb887209b6aa",
      "folder": "77f03137-50a1-b8b8-c53e-e775a889208b",
      "name": "62 http://localhost:48080/api/v1/reading/type/:type/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return a list of readings with an associated value descriptor of the type (IoTType) specified. LimitExceededException (HTTP 413) if the number of readings exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/type/{{readingValueDescriptorType}}/{{limit}}",
      "preRequestScript": "",
      "tests": " /*\n * Test Case:  api/v1/reading/name/:name/{limit}- GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        \n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualReadingData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualReadingData.length !== 0) {\n                tests[\"Is record count is equal or less than limit\"] = actualReadingData.length <= data.limit;\n               \n                tests[\"Is valid response schema\"] = tv4.validate(actualReadingData, data.schema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"Reading is empty.\");\n                tests[\"Is Reading empty\"] = actualReadingData.length === 0;\n            }\n        }\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "c1710d6a-f4c4-c7e8-9906-9b9335435f97",
      "folder": "2c188b44-7b59-7c8e-7af3-68aeb09747ae",
      "name": "80 http://localhost:48080/api/v1/valuedescriptor/name/:name",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return ValueDescriptor object with given name. Could be null if no value descriptors found by the name (name is unique across all value descriptors).  ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor/name/{{ValuedescriptorByName}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  /api/v1/valuedescriptor/name/:name - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n    tests[\"Status code is 200\"] = responseCode.code === 200;\n    tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n    if(responseCode.code === 200){\n        if(responseBody.length === 0){\n            tests[\"Response body Empty\"] = responseBody === null;\n        } else{\n            var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n            \n            tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n            \n            if (contentTypeHeaderExists) {\n                tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n            }\n             //Test body parameters\n            var actualValueDescriptorName;\n            try{\n                //Parse json response\n                actualValueDescriptorName = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualValueDescriptorName.length !== 0) {\n             tests[\"Is Valid Response Schema\"] = tv4.validate(actualValueDescriptorName, data.ObjectSchema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                //Shows message when event list is empty\n                console.log(\"Valuedescriptor List Empty\");\n                tests[\"Is ValueDescriptor list empty\"] = actualValueDescriptorName.length === 0\n            }\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "c6b8f6cc-0a53-6590-06b7-0893e3035fa5",
      "folder": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "17 http://localhost:48080/api/v1/event/id/:id",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\"id\":\"Dummy_Id\",\"pushed\":1471806399999}",
      "descriptionFormat": "html",
      "description": "Update the event to be pushed (out of EdgeX to an enterprise or cloud system) by setting the pushed timestamp to the current time. NotFoundException (HTTP 404) if the event cannot be found by id. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event/id/{{invalidId}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "c71fbe0d-65dc-7161-22e8-e358571e5f2a",
      "folder": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "97 http://localhost:48080/api/v1/event",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{  \r\n   \"origin\":1471806386919,\r\n   \"device\":\"livingroomthermostat\",\r\n   \"readings\":[  \r\n      {  \r\n         \"origin\":1471806386919,\r\n         \"name\":\"temperature\",\r\n         \"value\":\"38\"\r\n      }\r\n   ]\r\n}",
      "descriptionFormat": "html",
      "description": "Add a new event (with its associated readings). Prefers the event device is a device name but can also be a device id (database generated). DataValidationException (HTTP 409) if the a reading is associated to a non-existent value descriptor. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "caa55575-ee06-0216-2af0-13b374ba0957",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event/scrub",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event/scrub - DEL\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//If request success with response code is 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test Response time\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var jsonData = JSON.parse(responseBody);\n    tests[\"Is items deleted\"] = responseBody > 0;\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1474891875992,
      "name": "32 http://localhost:48080/api/v1/event/scrub",
      "description": "Remove all pushed events and their associated readings.ServiceException (HTTP 503) for unknown or unanticipated issues.  Should only be used by the scrubber micro service",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "ccbefbc0-e4d3-49ec-8a5c-afde6b74143a",
      "folder": "62d60316-72a5-61bf-599c-43ecd00f9321",
      "name": "40 http://localhost:48080/api/v1/reading",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "  {\n    \"id\": \"57e745efe4b0ca8e6d7116d7\",\n    \"created\": 1474774511737,\n    \"modified\": 1474774511737,\n    \"origin\": 1471806386919,\n    \"pushed\": 0,\n    \"name\": \"luminousIntensity\",\n    \"value\": \"38\"\n  }",
      "descriptionFormat": "html",
      "description": "Update the reading.  Reading object needs to contain the database generated id of the existing reading. NotFoundException (HTTP 404) if the reading cannot be found by id. ServiceException (HTTP 503) for unknown or unanticipated issues. DataValidationException if the associated value descriptor is non-existent.",
      "headers": "Content-Type: application/json\n",
      "method": "PUT",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "d0431516-4cc0-804d-4433-633677f7316d",
      "folder": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "23 http://localhost:48080/api/v1/event/device/:deviceId",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Delete all events (and their readings) associated to a device given the device's id (either database generated id or name). ServiceException (HTTP 503) for unknown or unanticipated issues.   NotFoundException (HTTP 404) if the meta data checks are on and no device is found for supplied id.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event/device/{{invalidDeviceName}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "d148a842-91ef-3cfc-446e-8c0b418ddf1d",
      "folder": "62d60316-72a5-61bf-599c-43ecd00f9321",
      "name": "64 http://localhost:48080/api/v1/reading/type/:type/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return a list of readings with an associated value descriptor of the type (IoTType) specified. LimitExceededException (HTTP 413) if the number of readings exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/type/{{readingValueDescriptorType}}/{{limit}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "d5602cd0-5c14-14ec-9ebd-e8f7cfcd982d",
      "folder": "62d60316-72a5-61bf-599c-43ecd00f9321",
      "name": "43 http://localhost:48080/api/v1/reading",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return list of all readings. Sorts by reading id. LimitExceededException (HTTP 413) if the number of readings exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "d7b9f54b-2aab-c380-1060-cc63cfe71614",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event/device/{{deviceGetRequestName}}/valuedescriptor/{{valuedescriptor}}/{{limit}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event/id - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n    //Test body parameters\n    var actualEventData;\n    try{\n        //Parse json response\n        actualEventData = JSON.parse(responseBody);\n    }catch(e) {\n        console.log(\"Exception while parsing json response\");\n    }\n    if(actualEventData !== null) {\n        //Test response schema\n        tests[\"Is Valid Response Schema\"] = tv4.validate(actualEventData, data.schema);\n        console.log(\"Validation failed: \", tv4.error);\n    } else {\n        console.log(\"Event is empty.\");\n        tests[\"Is Event empty\"] = actualEventData.length === 0;\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475148236772,
      "name": "27 http://localhost:48080/api/v1/event/device/:deviceId/valuedescriptor/{valuedescriptor}/{limit} ",
      "description": "Return all readings associated to the device via the event, and filtered by those readings associated to the provided value descriptor.  LimitExceededException (HTTP 413) if the number of events (associated to the device) exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "da7e93dd-3312-066a-cb99-53815f71ff87",
      "folder": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "20 http://localhost:48080/api/v1/event/device/:deviceId/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return list of events with their associated readings for a given device, sort by event creation date. May be an empty list if none are associated to the device.  Note: does not yet handle device managers. LimitExceededException (HTTP 413) if the number of events exceeds the current max limit. ServcieException (HTTP 503) for unknown or unanticipated issues.  NotFoundException (HTTP 404) if the meta data checks are on and no device is found for supplied id.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event/device/{{invalidId}}/{{limit}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "da990487-1826-c593-1dce-58df3205f499",
      "headers": "Content-Type: application/json\n",
      "url": "{{baseUrl}}/api/v1/event/id/{{eventPutRequestId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "PUT",
      "data": [],
      "dataMode": "raw",
      "tests": "/*\n * Test Case:  /event/id - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//If request success with response code is 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test Response time\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var jsonData = JSON.parse(responseBody);\n    if(jsonData.length !== 0){\n        tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1474950440380,
      "name": "15 http://localhost:48080/api/v1/event/id/:id",
      "description": "Update the event to be pushed (out of EdgeX to an enterprise or cloud system) by setting the pushed timestamp to the current time. NotFoundException (HTTP 404) if the event cannot be found by id. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": [],
      "rawModeData": "{\"pushed\":1471806399999}"
    },
    {
      "id": "e56abd39-6c31-b7bb-8a20-429ec98c875d",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/valuedescriptor/id/{{ValuedescriptorDeleteReferReadingId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "    /**\n     * Test Case:  /valuedescriptor/id/{id} - DELETE\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    tests[\"Status code is 409\"] = responseCode.code === 409;\n    if(responseCode.code === 409){\n        tests[\"Status code is 409\"] = responseCode.code === 409;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the value descriptor is still referenced in Readings\n }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "name": "78 http://localhost:48080/api/v1/valuedescriptor/id/:id 409",
      "description": "Remove the ValueDescriptor designated by database generated identifier. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the value descriptor is still referenced in Readings. NotFoundException (404) if the value descriptor cannot be located by the identifier.",
      "folder": "e22bfb44-cd70-2b40-4e05-f00c829e95ee",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "rawModeData": null,
      "descriptionFormat": null
    },
    {
      "id": "e75fd315-a1a4-01ed-6e1f-8f4757b19508",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event/device/{{deviceDelRequestName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event/device/:deviceId - DEL\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//If request success with response code is 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test Response time\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var jsonData = JSON.parse(responseBody);\n    tests[\"Is items deleted\"] = responseBody > 0;\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1474884394810,
      "name": "99 http://localhost:48080/api/v1/event/device/:deviceId",
      "description": "Delete all events (and their readings) associated to a device given the device's id (either database generated id or name). ServiceException (HTTP 503) for unknown or unanticipated issues.   NotFoundException (HTTP 404) if the meta data checks are on and no device is found for supplied id.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "e993afe7-ff84-131c-2454-995a8aaa3b3c",
      "folder": "62d60316-72a5-61bf-599c-43ecd00f9321",
      "name": "52 http://localhost:48080/api/v1/reading/device/:deviceId/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return list of all readings for a given device, sort by reading creation date. Note: does not yet handle device managers. LimitExceededException (HTTP 413) if the number of readings exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues. NotFoundException (HTTP 404) if meta checks are in place and if the device id or name does not match any existing devices.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading/device/{{deviceGetRequestId}}/{{limit}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "e9e6aa4b-ee93-e403-0cec-5423bc98b075",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event/device/{{invalidId}}/{{limit}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event/device/:deviceId/{limit} - 404 Error - GET \n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n \n//Test Case for status : 404\n//tests[\"Status code is 404\"] = responseCode.code === 404;\n//Test response time\ntests[\"Response time is less than \"+data.responseTime] = responseTime < data.responseTime;",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1475148261572,
      "name": "18 http://localhost:48080/api/v1/event/device/:deviceId/{limit}",
      "description": "Return list of events with their associated readings for a given device, sort by event creation date. May be an empty list if none are associated to the device.  Note: does not yet handle device managers. LimitExceededException (HTTP 413) if the number of events exceeds the current max limit. ServcieException (HTTP 503) for unknown or unanticipated issues.  NotFoundException (HTTP 404) if the meta data checks are on and no device is found for supplied id.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "eca3421d-9790-9210-4c92-faeb280a3554",
      "folder": "2c188b44-7b59-7c8e-7af3-68aeb09747ae",
      "name": "68 http://localhost:48080/api/v1/valuedescriptor",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "{\r\n  \"name\":\"NHCO5\",\r\n  \"min\":\"-40\",\r\n  \"max\":\"140\",\r\n  \"type\":\"F\",\r\n  \"uomLabel\":\"degreecel\",\r\n  \"defaultValue\":\"0\",\r\n  \"formatting\":\"%s\",\r\n  \"labels\":[\"temp\",\"hvac\"]\r\n}",
      "descriptionFormat": "html",
      "description": "Add a new ValueDescriptor whose name must be unique. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the a formatting string of the value descriptor is not a valid printf format.",
      "headers": "Content-Type: application/json\n",
      "method": "POST",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  api/v1/valuedescriptor - POST\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n    if(responseCode.code === 200){\n        tests[\"Status code is 200\"] = responseCode.code === 200;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        if(null !== responseBody){\n            tests[\"Response Object id\"] = responseBody.length === 24;\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "ed1c98b3-d025-b7e8-aef3-d1028afd2036",
      "folder": "2c188b44-7b59-7c8e-7af3-68aeb09747ae",
      "name": "76 http://localhost:48080/api/v1/valuedescriptor/id/:id",
      "dataMode": "raw",
      "data": [],
      "rawModeData": "",
      "descriptionFormat": "html",
      "description": "Remove the ValueDescriptor designated by database generated identifier. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the value descriptor is still referenced in Readings. NotFoundException (404) if the value descriptor cannot be located by the identifier.",
      "headers": "",
      "method": "DELETE",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/valuedescriptor/id/{{ValuedescriptorDeleteById}}",
      "preRequestScript": "",
      "tests": "/**\n * Test Case:  api/v1/valuedescriptor/id/:id - DELETE\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n **/\n  \n  tests[\"Status code is 200\"] = responseCode.code === 200;\n  if(responseCode.code === 200){\n        tests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n            tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n        }\n        var jsonData = JSON.parse(responseBody);\n        if(jsonData.length !== 0){\n            tests[\"Request Objec Deleted\"] = responseBody === \"true\";\n        }\n  }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "ed7fc923-4060-2096-162a-0b0393636991",
      "folder": "77f03137-50a1-b8b8-c53e-e775a889208b",
      "name": "41 http://localhost:48080/api/v1/reading",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return list of all readings. Sorts by reading id. LimitExceededException (HTTP 413) if the number of readings exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/reading",
      "preRequestScript": "",
      "tests": "/*\n * Test Case:  /api/v1/reading - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */  \n  \n    //Test Case for status : 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test response time\ntests[\"Response time is less than \"+ data.responseTime] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test content type should present in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    \n         //Test body parameters\n        var actualReadingData;\n        try{\n            //Parse json response\n            actualReadingData = JSON.parse(responseBody);\n        }catch(e) {\n            console.log(\"Exception while parsing json response\");\n        }\n        \n        if(actualReadingData.length !== 0) {\n         tests[\"Is Valid Response Schema\"] = tv4.validate(actualReadingData, data.schema);\n            console.log(\"Validation failed: \", tv4.error);\n        } else {\n            //Shows message when event list is empty\n            console.log(\"Reading List Empty\");\n            tests[\"Is Reading list empty\"] = actualReadingData.length === 0\n        }\n    }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "efaf3cb0-f9db-1bd4-8a55-27063e99cb4e",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/valuedescriptor/name/{{ValuedescriptorDeleteReferReadingName}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "    /**\n     * Test Case:  /valuedescriptor/name/{name} - DELETE\n     * Version: Alpha\n     * @Author: Tata Elxsi\n     *\n     **/\n    if(responseCode.code === 409){\n        tests[\"Status code is 409\"] = responseCode.code === 409;\n        tests[\"Response time is less than 200ms\"] = responseTime < 200;\n        var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n        tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n        if (contentTypeHeaderExists) {\n        tests[\"Content-Type is text/plain\"] =  responseHeaders[\"Content-Type\"].has(\"text/plain\");\n        }\n        // the value descriptor is still referenced in Readings\n  }",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "name": "84 http://localhost:48080/api/v1/valuedescriptor/name/:name 409",
      "description": "Remove the ValueDescriptor designated by name. ServcieException (HTTP 503) for unknown or unanticipated issues. DataValidationException (HTTP 409) if the value descriptor is still referenced in Readings. NotFoundException (404) if the value descriptor cannot be located by the identifier.",
      "folder": "e22bfb44-cd70-2b40-4e05-f00c829e95ee",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "rawModeData": null,
      "descriptionFormat": null
    },
    {
      "id": "f3a20cac-bcef-8c2e-03be-b635c9cdf636",
      "folder": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "11 http://localhost:48080/api/v1/event/:id",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Fetch a specific event by database specified id - returning null if none are found. Note: does not yet handle device managers. ServcieException (HTTP 503) for unknown or unanticipated issues",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event/{{invalidId}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "f64b34f5-ddc4-0617-227f-0601b6b6b6dd",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event/device/{{deviceGetRequestId}}/{{limit}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "GET",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event/device/:deviceId/{limit} - GET\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//Verify the http status code for 200.\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Verify if response time is less than 200ms.\ntests[\"Response time is less than \"+data.responseTime] = responseTime < 200;\n\nif (responseCode.code === 200) {\n    //Verify the existence of content-type in the header.\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    //Validate the content-type for application/json.\n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is application/json\"] =  responseHeaders[\"Content-Type\"].has(\"application/json\");\n        \n        //Validate the respose data with json schema.\n        if(responseHeaders[\"Content-Type\"].has(\"application/json\")) {\n            try{\n                //Parse json response\n                actualEventData = JSON.parse(responseBody);\n            }catch(e) {\n                console.log(\"Exception while parsing json response\");\n            }\n            \n            if(actualEventData.length !== 0) {\n                tests[\"Is record count is equal or less than limit\"] = actualEventData.length <= data.limit;\n               \n                tests[\"Is valid response schema\"] = tv4.validate(actualEventData, data.schema);\n                console.log(\"Validation failed: \", tv4.error);\n            } else {\n                console.log(\"Event is empty.\");\n                tests[\"Is Event empty\"] = actualEventData.length === 0;\n            }\n        }\n    }\n}\n\n\n\n\n\n\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1474881489910,
      "name": "98 http://localhost:48080/api/v1/event/device/:deviceId/{limit}",
      "description": "Return list of events with their associated readings for a given device, sort by event creation date. May be an empty list if none are associated to the device.  Note: does not yet handle device managers. LimitExceededException (HTTP 413) if the number of events exceeds the current max limit. ServcieException (HTTP 503) for unknown or unanticipated issues.  NotFoundException (HTTP 404) if the meta data checks are on and no device is found for supplied id.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "fd80304a-418a-f295-0c0d-fe53fcfa5563",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event/id/{{eventDelRequestId}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event/id - PUT\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//If request success with response code is 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test Response time\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var jsonData = JSON.parse(responseBody);\n    if(jsonData.length !== 0){\n        tests[\"Body has True\"] = responseBody === \"true\";\n    }\n}",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1474871241819,
      "name": "12 http://localhost:48080/api/v1/event/id/:id",
      "description": "Delete an event and all its readings given its database generated id. NotFoundException (HTTP 404) if the event cannot be found by id. ServcieException (HTTP 503) for unknown or unanticipated issues.",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    },
    {
      "id": "ff3aa233-ea21-cccd-4e7f-acea5e247b0a",
      "folder": "53868ee5-1b60-2a90-b168-b6652e344486",
      "name": "29 http://localhost:48080/api/v1/event/device/:deviceId/valuedescriptor/{valuedescriptor}/{limit}",
      "dataMode": "params",
      "data": [],
      "rawModeData": null,
      "descriptionFormat": "html",
      "description": "Return all readings associated to the device via the event, and filtered by those readings associated to the provided value descriptor.  LimitExceededException (HTTP 413) if the number of events (associated to the device) exceeds the current max limit. ServiceException (HTTP 503) for unknown or unanticipated issues.",
      "headers": "",
      "method": "GET",
      "pathVariables": {},
      "url": "{{baseUrl}}/api/v1/event/device/{{deviceGetRequestId}}/valuedescriptor/{{valuedescriptor}}/{{invalidLimit}}",
      "preRequestScript": "",
      "tests": "//Expect 503 status for unknown or unanticipated issues.\ntests[\"Status code is 503\"] = responseCode.code === 503;\ntests[\"Response time is less than 200ms\"] = responseTime < 200;",
      "currentHelper": "normal",
      "helperAttributes": "{}",
      "responses": [],
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6"
    },
    {
      "id": "ffce5a08-25d0-3825-484d-2e88425484e5",
      "headers": "",
      "url": "{{baseUrl}}/api/v1/event/removeold/age/{{age}}",
      "preRequestScript": "",
      "pathVariables": {},
      "method": "DELETE",
      "data": [],
      "dataMode": "params",
      "tests": "/*\n * Test Case:  /event/removeold/age/:age - DEL\n * Version: Alpha\n * @Author: Tata Elxsi\n *\n */\n\n//If request success with response code is 200\ntests[\"Status code is 200\"] = responseCode.code === 200;\n//Test Response time\ntests[\"Response time is less than \"+data.responseTime+\"ms\"] = responseTime < data.responseTime;\n\nif(responseCode.code === 200) {\n    //Test Content type in header\n    var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");\n    tests[\"Has Content-Type\"] = contentTypeHeaderExists;\n    \n    if (contentTypeHeaderExists) {\n        tests[\"Content-Type is \"+data.ApplicationJsonContentType] =  responseHeaders[\"Content-Type\"].has(data.ApplicationJsonContentType);\n    }\n    var jsonData = JSON.parse(responseBody);\n    tests[\"Is items deleted\"] = responseBody > 0;\n}\n",
      "currentHelper": "normal",
      "helperAttributes": {},
      "time": 1474891513724,
      "name": "30 http://localhost:48080/api/v1/event/removeold/age/:age",
      "description": "Remove all old events (and associated readings) based on delimiting age.  ServiceException (HTTP 503) for unknown or unanticipated issues.  Should only be used by the scrubber micro service",
      "collectionId": "73b9500b-8690-47e5-a76b-45c1ecfd15e6",
      "responses": []
    }
  ]
}