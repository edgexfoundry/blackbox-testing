{
	"info": {
		"_postman_id": "9d85a31c-09ab-4e78-9e0d-f9ba3258b1c6",
		"name": "support-logging",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "logs",
			"item": [
				{
					"name": "Create a logEntry",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74f85dc3-21ff-496c-b0bf-6e29e51ff613",
								"exec": [
									"/**",
									" * Test Case:  api/v1/logs",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									" ",
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"logLevel\": \"WARN\",\n  \"originService\": \"service1\",\n  \"message\": \"Hello, Logging Service!\"\n}\n"
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs"
							]
						},
						"description": "Create a new LogEntry. Return 202 Accepted to clients with timestamp being accepted."
					},
					"response": []
				},
				{
					"name": "Query logs with limited returned records",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65c96875-c86f-4800-bcd0-4446efb11da1",
								"type": "text/javascript",
								"exec": [
									" /*",
									" * Test Case:  api/v1/logs/{limit}",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" */",
									" ",
									"var schema = pm.globals.get(\"schemas\").LogEntryArray;",
									"var jsonData = pm.response.json();",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Is valid response schema\", function () {",
									"     var result = tv4.validate(jsonData, schema);",
									"     if(!result){",
									"         console.log(tv4.error);",
									"     }",
									"     pm.expect(result).to.be.true;",
									"});",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c270ce1e-dece-4346-a77f-5bd1049347a0",
								"type": "text/javascript",
								"exec": [
									"if(!data.limit){",
									"    pm.environment.set(\"limit\", \"10\");",
									"}else{",
									"    pm.environment.set(\"limit\", data.limit); ",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs/{{limit}}",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs",
								"{{limit}}"
							]
						},
						"description": "List a collection of LogEntry - limited in size by the limit parameter. HTTP status code 413 if the number of events exceeds the current max limit. HTTP status code 500 for unknown or unanticipated issues."
					},
					"response": []
				},
				{
					"name": "Query logs by creation timestamp between start date and end date with limited returned records",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe95aad7-5323-4476-8e14-0a100845c06d",
								"type": "text/javascript",
								"exec": [
									" /*",
									" * Test Case:  api/v1/logs/{start}/{end}/{limit}- GET",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" */",
									"",
									"var schema = pm.globals.get(\"schemas\").LogEntryArray;",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Is valid response schema\", function () {",
									"     var result = tv4.validate(jsonData, schema);",
									"     if(!result){",
									"         console.log(tv4.error);",
									"     }",
									"     pm.expect(result).to.be.true;",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d0630f3b-ac2b-43c3-830a-b5475ca16cf3",
								"type": "text/javascript",
								"exec": [
									"if(!data.loggingLabel){",
									"    pm.environment.set(\"start\", \"0\");",
									"    pm.environment.set(\"end\", \"10000000000000\");",
									"    pm.environment.set(\"limit\", \"10\");",
									"}else{",
									"    pm.environment.set(\"start\", data.start);",
									"    pm.environment.set(\"end\", data.end);",
									"    pm.environment.set(\"limit\", data.limit); ",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs/{{start}}/{{end}}/{{limit}}",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs",
								"{{start}}",
								"{{end}}",
								"{{limit}}"
							]
						},
						"description": "list a collection of LogEntry created between the specified start and end dates - limited in size by the limit parameter. HTTP status code 413 if the number of events exceeds the current max limit. HTTP status code 500 for unknown or unanticipated issues."
					},
					"response": []
				},
				{
					"name": "Query logs by matched originServices  ,which creation timestamp between start date and end date with limited returned records",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac0d3362-a12b-4c5c-955e-6f4eadc744cb",
								"type": "text/javascript",
								"exec": [
									" /*",
									" * Test Case:  api/v1/logs/originServices/{originServices}/{start}/{end}/{limit}- GET",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" */",
									" ",
									"var schema = pm.globals.get(\"schemas\").LogEntryArray;",
									"var jsonData = pm.response.json();",
									"",
									"var expectLoggingService = pm.environment.get(\"loggingService\");",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Is valid response schema\", function () {",
									"     var result = tv4.validate(jsonData, schema);",
									"     if(!result){",
									"         console.log(tv4.error);",
									"     }",
									"     pm.expect(result).to.be.true;",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(jsonData.length>0).to.be.true;",
									"    jsonData.forEach(function(data) {",
									"      pm.expect(data.originService.includes(expectLoggingService)).to.be.true; ",
									"    });",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "10db3e02-41e0-4f0d-8836-9b0aebc13c29",
								"type": "text/javascript",
								"exec": [
									"// handle iteration data",
									"if(!data.loggingLabel){",
									"    pm.environment.set(\"loggingService\", \"testService\");",
									"    pm.environment.set(\"start\", \"0\");",
									"    pm.environment.set(\"end\", \"10000000000000\");",
									"    pm.environment.set(\"limit\", \"10\");",
									"}else{",
									"    pm.environment.set(\"loggingService\", data.loggingService);",
									"    pm.environment.set(\"start\", data.start);",
									"    pm.environment.set(\"end\", data.end);",
									"    pm.environment.set(\"limit\", data.limit); ",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs/originServices/{{loggingService}}/{{start}}/{{end}}/{{limit}}",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs",
								"originServices",
								"{{loggingService}}",
								"{{start}}",
								"{{end}}",
								"{{limit}}"
							]
						},
						"description": "list a collection of LogEntry matching any of the specified originServices and being created between the specified start and end dates - limited in size by the limit parameter. HTTP status code 413 if the number of events exceeds the current max limit. HTTP status code 500 for unknown or unanticipated issues."
					},
					"response": []
				},
				{
					"name": "Query logs by matched log message keywords  ,which creation timestamp between start date and end date with limited returned records",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d3eda1d2-d742-43b4-8bb3-7768465bfe2e",
								"type": "text/javascript",
								"exec": [
									" /*",
									" * Test Case:  api/v1/logs/keywords/{keywords}/{start}/{end}/{limit}- GET",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" */",
									" ",
									"var schema = pm.globals.get(\"schemas\").LogEntryArray;",
									"var jsonData = pm.response.json();",
									"",
									"var expectLoggingKeyword = pm.environment.get(\"loggingKeyword\");",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Is valid response schema\", function () {",
									"     var result = tv4.validate(jsonData, schema);",
									"     if(!result){",
									"         console.log(tv4.error);",
									"     }",
									"     pm.expect(result).to.be.true;",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(jsonData.length>0).to.be.true;",
									"    jsonData.forEach(function(data) {",
									"      pm.expect(data.message.includes(expectLoggingKeyword)).to.be.true; ",
									"    });",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "396d66ee-59cb-4791-aadf-0eeecbfc2a73",
								"type": "text/javascript",
								"exec": [
									"// handle iteration data",
									"if(!data.loggingLabel){",
									"    pm.environment.set(\"loggingKeyword\", \"Hello\");",
									"    pm.environment.set(\"start\", \"0\");",
									"    pm.environment.set(\"end\", \"2145916800000\");",
									"    pm.environment.set(\"limit\", \"10\");",
									"}else{",
									"    pm.environment.set(\"loggingKeyword\", data.loggingKeyword);",
									"    pm.environment.set(\"start\", data.start);",
									"    pm.environment.set(\"end\", data.end);",
									"    pm.environment.set(\"limit\", data.limit); ",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs/keywords/{{loggingKeyword}}/{{start}}/{{end}}/{{limit}}",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs",
								"keywords",
								"{{loggingKeyword}}",
								"{{start}}",
								"{{end}}",
								"{{limit}}"
							]
						},
						"description": "list a collection of LogEntry whose message containing any of the specified keywords and being created between the specified start and end dates - limited in size by the limit parameter. HTTP status code 413 if the number of events exceeds the current max limit. HTTP status code 500 for unknown or unanticipated issues.."
					},
					"response": []
				},
				{
					"name": "Query logs by matched logLevels  ,which creation timestamp between start date and end date with limited returned records",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41f40781-c9a8-45a5-873c-50ccf8db5fcb",
								"type": "text/javascript",
								"exec": [
									" /*",
									" * Test Case:  api/v1/logs/logLevels/{logLevels}/{start}/{end}/{limit}- GET",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" */",
									" ",
									"var schema = pm.globals.get(\"schemas\").LogEntryArray;",
									"var jsonData = pm.response.json();",
									"",
									"var expectLoggingLevel = pm.environment.get(\"loggingLevel\");",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Is valid response schema\", function () {",
									"     var result = tv4.validate(jsonData, schema);",
									"     if(!result){",
									"         console.log(tv4.error);",
									"     }",
									"     pm.expect(result).to.be.true;",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(jsonData.length>0).to.be.true;",
									"    jsonData.forEach(function(data) {",
									"      pm.expect(data.logLevel.includes(expectLoggingLevel)).to.be.true; ",
									"    });",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "75dcd025-957c-4491-894b-bbf1d9d0ca13",
								"type": "text/javascript",
								"exec": [
									"// handle iteration data",
									"if(!data.loggingLabel){",
									"    pm.environment.set(\"loggingLevel\", \"WARN\");",
									"    pm.environment.set(\"start\", \"0\");",
									"    pm.environment.set(\"end\", \"2145916800000\");",
									"    pm.environment.set(\"limit\", \"10\");",
									"}else{",
									"    pm.environment.set(\"loggingLevel\", data.loggingLevel);",
									"    pm.environment.set(\"start\", data.start);",
									"    pm.environment.set(\"end\", data.end);",
									"    pm.environment.set(\"limit\", data.limit); ",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs/logLevels/{{loggingLevel}}/{{start}}/{{end}}/{{limit}}",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs",
								"logLevels",
								"{{loggingLevel}}",
								"{{start}}",
								"{{end}}",
								"{{limit}}"
							]
						},
						"description": "list a collection of LogEntry matching any of the specified logLevels and being created between the specified start and end dates - limited in size by the limit parameter. HTTP status code 413 if the number of events exceeds the current max limit. HTTP status code 500 for unknown or unanticipated issues."
					},
					"response": []
				},
				{
					"name": "Query logs by matched logLevels  and originServices ,which creation timestamp between start date and end date with limited returned records",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cef4f249-f4a1-443f-b9c1-6054fce7a7d8",
								"type": "text/javascript",
								"exec": [
									" /*",
									" * Test Case:  api/v1/logs/logLevels/{logLevels}/originServices/{originServices}/{start}/{end}/{limit}- GET",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" */",
									" ",
									"var schema = pm.globals.get(\"schemas\").LogEntryArray;",
									"var jsonData = pm.response.json();",
									"",
									"var expectLoggingLevel = pm.environment.get(\"loggingLevel\");",
									"var expectLoggingService = pm.environment.get(\"loggingService\");",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Is valid response schema\", function () {",
									"     var result = tv4.validate(jsonData, schema);",
									"     if(!result){",
									"         console.log(tv4.error);",
									"     }",
									"     pm.expect(result).to.be.true;",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(jsonData.length>0).to.be.true;",
									"    jsonData.forEach(function(data) {",
									"      pm.expect(data.logLevel.includes(expectLoggingLevel) || data.originService.includes(expectLoggingService)).to.be.true; ",
									"    });",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d07a9363-269d-4658-8a3c-64d4f9ba3854",
								"type": "text/javascript",
								"exec": [
									"// handle iteration data",
									"if(!data.loggingLabel){",
									"    pm.environment.set(\"loggingLevel\", \"WARN\");",
									"    pm.environment.set(\"loggingService\", \"testService\");",
									"    pm.environment.set(\"start\", \"0\");",
									"    pm.environment.set(\"end\", \"2145916800000\");",
									"    pm.environment.set(\"limit\", \"10\");",
									"}else{",
									"    pm.environment.set(\"loggingLevel\", data.loggingLevel);",
									"    pm.environment.set(\"loggingService\", data.loggingService);",
									"    pm.environment.set(\"start\", data.start);",
									"    pm.environment.set(\"end\", data.end);",
									"    pm.environment.set(\"limit\", data.limit); ",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs/logLevels/{{loggingLevel}}/originServices/{{loggingService}}/{{start}}/{{end}}/{{limit}}",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs",
								"logLevels",
								"{{loggingLevel}}",
								"originServices",
								"{{loggingService}}",
								"{{start}}",
								"{{end}}",
								"{{limit}}"
							]
						},
						"description": "list a collection of LogEntry matching any of the specified logLevels, originServices, and also being created between the specified start and end dates - limited in size by the limit parameter. HTTP status code 413 if the number of events exceeds the current max limit. HTTP status code 500 for unknown or unanticipated issues."
					},
					"response": []
				},
				{
					"name": "LogEntry collection's size should not exceed the configured ReadMaxLimit.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8675b656-ddf7-4522-a28a-d17ecc252653",
								"exec": [
									" /*",
									" * Test Case:  aapi/v1/logs/{{overLimit}} - GET",
									" * Version: Alpha",
									" */",
									" ",
									"var schema = pm.globals.get(\"schemas\").LogEntryArray;",
									"var jsonData = pm.response.json();",
									"var readMaxLimit = pm.environment.get(\"readMaxLimit\");",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Is valid response schema\", function () {",
									"     var result = tv4.validate(jsonData, schema);",
									"     if(!result){",
									"         console.log(tv4.error);",
									"     }",
									"     pm.expect(result).to.be.true;",
									"});",
									"",
									"pm.test(\"Please check the MaxResultCount value on service configuration. If the value is greater than 100, this case will fail. You could run or refer to bin/updateMaxResultCount.sh before this test. \", function () {",
									"     pm.expect(jsonData.length<=readMaxLimit).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bdf4e7d6-260c-4041-bd44-c84cbf106498",
								"exec": [
									"// handle iteration data",
									"if(!data.loggingLabel){",
									"    //Test assumes the default limit is 100 ",
									"    pm.environment.set(\"overLimit\", \"101\");",
									"    pm.environment.set(\"readMaxLimit\", \"100\");",
									"}else{",
									"    pm.environment.set(\"overLimit\", data.overLimit);",
									"    pm.environment.set(\"readMaxLimit\", data.readMaxLimit);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs/{{overLimit}}",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs",
								"{{overLimit}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete logs by logLevels ,which creation timestamp between start date and end date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2e52a9f-94f4-42c5-b72a-7eb1d35ccb27",
								"exec": [
									" /**",
									" * Test Case:  /api/v1/logs/logLevels/{logLevels}/{start}/{end} - DELETE",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" * ",
									" **/",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is text/plain\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(pm.response.text().length>0).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "43254381-a2c7-4633-9d5b-ec4f74f650be",
								"exec": [
									"var baseUrl = pm.environment.get(\"supportLoggingUrl\");",
									"var data = {",
									"  \"logLevel\": \"ERROR\",",
									"  \"originService\": \"service1\",",
									"  \"message\": \"Hello, Logging Service!\"",
									"};",
									"var request = {",
									"  url: baseUrl+'/api/v1/logs',",
									"  method: 'POST',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(data)",
									"  }",
									"};",
									"",
									"pm.sendRequest(request, function (err, res) {",
									"    pm.environment.set(\"loggingLevelDel\", \"ERROR\");",
									"    pm.environment.set(\"start\", \"0\");",
									"    pm.environment.set(\"end\", new Date().getTime());",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs/logLevels/{{loggingLevelDel}}/{{start}}/{{end}}",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs",
								"logLevels",
								"{{loggingLevelDel}}",
								"{{start}}",
								"{{end}}"
							]
						},
						"description": "Delete a collection of LogEntry matching any of the specified logLevels and being created between the specified start and end dates. HTTP status code 200 count of the number of LogEntry being deleted. HTTP status code 500 for unknown or unanticipated issues."
					},
					"response": []
				},
				{
					"name": "Delete logs by originServices ,which creation timestamp between start date and end date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f7b65e6-e71e-4b30-9869-f79f02860f02",
								"exec": [
									" /**",
									" * Test Case:  /api/v1/logs/originServices/{originServices}/{start}/{end} - DELETE",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" * ",
									" **/",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is text/plain\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(pm.response.text().length>0).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "029be17b-9ca9-4863-ac08-56a74eb52354",
								"exec": [
									"var baseUrl = pm.environment.get(\"supportLoggingUrl\");",
									"var data = {",
									"  \"logLevel\": \"ERROR\",",
									"  \"originService\": \"service1\",",
									"  \"message\": \"Hello, Logging Service!\"",
									"};",
									"var request = {",
									"  url: baseUrl+'/api/v1/logs',",
									"  method: 'POST',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(data)",
									"  }",
									"};",
									"",
									"pm.sendRequest(request, function (err, res) {",
									"    pm.environment.set(\"loggingServiceDel1\", \"service1\");",
									"    pm.environment.set(\"start\", \"0\");",
									"    pm.environment.set(\"end\", new Date().getTime());",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs/originServices/{{loggingServiceDel1}}/{{start}}/{{end}}",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs",
								"originServices",
								"{{loggingServiceDel1}}",
								"{{start}}",
								"{{end}}"
							]
						},
						"description": "Delete a collection of LogEntry matching any of the specified originServices and being created between the specified start and end dates. HTTP status code 200 count of the number of LogEntry being deleted. HTTP status code 500 for unknown or unanticipated issues."
					},
					"response": []
				},
				{
					"name": "Delete logs by keywords ,which creation timestamp between start date and end date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eccbb1ea-8f30-401d-bbd4-db0dd8c826e1",
								"exec": [
									" /**",
									" * Test Case:  /api/v1/logs/keywords/{keywords}/{start}/{end} - DELETE",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" * ",
									" **/",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is text/plain\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(pm.response.text().length>0).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5e848539-419e-4210-93c1-92fe4fe8b18f",
								"exec": [
									"var baseUrl = pm.environment.get(\"supportLoggingUrl\");",
									"var data = {",
									"  \"logLevel\": \"ERROR\",",
									"  \"originService\": \"service1\",",
									"  \"message\": \"Hello, Logging Service! ,KeyWordTest\"",
									"};",
									"var request = {",
									"  url: baseUrl+'/api/v1/logs',",
									"  method: 'POST',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(data)",
									"  }",
									"};",
									"",
									"pm.sendRequest(request, function (err, res) {",
									"    pm.environment.set(\"loggingKeywordDel\", \"KeyWordTest\");",
									"    pm.environment.set(\"start\", \"0\");",
									"    pm.environment.set(\"end\", new Date().getTime());",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs/keywords/{{loggingKeywordDel}}/{{start}}/{{end}}",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs",
								"keywords",
								"{{loggingKeywordDel}}",
								"{{start}}",
								"{{end}}"
							]
						},
						"description": "Delete a collection of LogEntry whose message containing any of the specified keywords and being created between the specified start and end dates. HTTP status code 200 count of the number of LogEntry being deleted. HTTP status code 500 for unknown or unanticipated issues."
					},
					"response": []
				},
				{
					"name": "Delete logs by logLevels and originServices ,which creation timestamp between start date and end date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa25c392-cecc-4c00-a77b-24d87636c4f9",
								"exec": [
									" /**",
									" * Test Case:  /api/v1/logs/logLevels/{logLevels}/originServices/{originServices}/{start}/{end} - DELETE",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" * ",
									" **/",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is text/plain\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(pm.response.text().length>0).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "46a52b4f-df33-48ce-b40c-c503c55fa1ea",
								"exec": [
									"var baseUrl = pm.environment.get(\"supportLoggingUrl\");",
									"var data = {",
									"  \"logLevel\": \"ERROR\",",
									"  \"originService\": \"service1\",",
									"  \"message\": \"Hello, Logging Service!\"",
									"};",
									"var request = {",
									"  url: baseUrl+'/api/v1/logs',",
									"  method: 'POST',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(data)",
									"  }",
									"};",
									"",
									"pm.sendRequest(request, function (err, res) {",
									"    pm.environment.set(\"loggingLevelDel\", \"ERROR\");",
									"    pm.environment.set(\"loggingServiceDel4\", \"service1\");",
									"    pm.environment.set(\"start\", \"0\");",
									"    pm.environment.set(\"end\", new Date().getTime());",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs/logLevels/{{loggingLevelDel}}/originServices/{{loggingServiceDel4}}/{{start}}/{{end}}",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs",
								"logLevels",
								"{{loggingLevelDel}}",
								"originServices",
								"{{loggingServiceDel4}}",
								"{{start}}",
								"{{end}}"
							]
						},
						"description": "Delete a collection of LogEntry matching any of the specified logLevels, originServices, and also being created between the specified start and end dates. HTTP status code 200 count of the number of LogEntry being deleted. HTTP status code 500 for unknown or unanticipated issues."
					},
					"response": []
				},
				{
					"name": "Delete logs by creation timestamp between start date and end date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1cfc7d9b-c7df-4a67-97a6-ad06df13c07c",
								"exec": [
									" /**",
									" * Test Case:  /api/v1/logs/{start}/{end} - DELETE",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" * ",
									" **/",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is text/plain\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(pm.response.text().length>0).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "561dd395-aaab-4655-8444-5b48884c538a",
								"exec": [
									"var baseUrl = pm.environment.get(\"supportLoggingUrl\");",
									"var data = {",
									"  \"logLevel\": \"ERROR\",",
									"  \"originService\": \"service1\",",
									"  \"message\": \"Hello, Logging Service!\"",
									"};",
									"var request = {",
									"  url: baseUrl+'/api/v1/logs',",
									"  method: 'POST',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(data)",
									"  }",
									"};",
									"",
									"pm.sendRequest(request, function (err, res) {",
									"    pm.environment.set(\"start\", \"0\");",
									"    pm.environment.set(\"end\", new Date().getTime());",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs/{{start}}/{{end}}",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs",
								"{{start}}",
								"{{end}}"
							]
						},
						"description": "Delete all log entries between two dates specified by start and end. HTTP status code 200 count of the number of LogEntry being deleted. HTTP status code 500 for unknown or unanticipated issues."
					},
					"response": []
				},
				{
					"name": "Delete logs by age",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e7841f2-239d-11e9-ab14-d663bd873d93",
								"exec": [
									" /**",
									" * Test Case:  /api/v1/logs/removeold/age/{age} - DELETE",
									" * @Author: Joan Duran",
									" * ",
									" **/",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is text/plain\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(pm.response.text().length>0).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e7844c2-239d-11e9-ab14-d663bd873d93",
								"exec": [
									"var baseUrl = pm.environment.get(\"supportLoggingUrl\");",
									"var data = {",
									"  \"logLevel\": \"ERROR\",",
									"  \"originService\": \"service1\",",
									"  \"message\": \"Hello, Logging Service!\"",
									"};",
									"var request = {",
									"  url: baseUrl+'/api/v1/logs',",
									"  method: 'POST',",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify(data)",
									"  }",
									"};",
									"",
									"pm.sendRequest(request, function (err, res) {",
									"    pm.environment.set(\"age\", \"86400000\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs/removeold/age/{{age}}",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs",
								"removeold",
								"age",
								"{{age}}"
							]
						},
						"description": "Delete all log entries older than the specified time. HTTP status code 200 count of the number of LogEntry being deleted. HTTP status code 500 for unknown or unanticipated issues."
					},
					"response": []
				}
			]
		},
		{
			"name": "logs_error_4xx",
			"item": [
				{
					"name": "Fail to create logEntry by an inexistent log level",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fe53065f-b72e-4747-98ee-6e9124a80d55",
								"exec": [
									"/**",
									" * Test Case:  api/v1/logs",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									" ",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"logLevel\": \"XXX\",\n  \"originService\": \"service1\",\n  \"message\": \"Hello, Logging Service!\"\n}\n"
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/logs",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"logs"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b2798633-3a47-430f-b7e8-7920edde1717",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "259021ad-3a7f-4a3c-b81b-b7d02ff5df41",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "ping",
			"item": [
				{
					"name": "Test service providing an indication that the service is available.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7217e96e-48ef-4965-aa01-efa8c9b4b470",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"pong\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{supportLoggingUrl}}/api/v1/ping",
							"host": [
								"{{supportLoggingUrl}}"
							],
							"path": [
								"api",
								"v1",
								"ping"
							]
						},
						"description": "Test service providing an indicatioon that the service is avaliable."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b153eb91-e64b-4652-a900-114f99399738",
				"type": "text/javascript",
				"exec": [
					"var schemas = {} ; ",
					"",
					"schemas.LogEntry = {",
					"        \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
					"        \"title\": \"LogEntry Schema\",",
					"        \"type\": \"object\",",
					"        \"properties\": {",
					"          \"originService\": {",
					"            \"type\": \"string\"",
					"          },",
					"          \"message\": {",
					"            \"type\": \"string\"",
					"          },",
					"          \"logLevel\": {",
					"            \"enum\": [\"TRACE\",\"DEBUG\",\"INFO\",\"WARN\",\"ERROR\"]",
					"          },",
					"          \"created\": {",
					"            \"description\": \"The creation timestamp\",",
					"            \"type\": \"integer\",",
					"            \"minimum\": 0",
					"          }",
					"        },",
					"        \"required\": [\"originService\",\"message\",\"logLevel\"]",
					"      };",
					"      ",
					"schemas.LogEntryArray = {",
					"        \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
					"        \"title\": \"The Array of Notification\",",
					"        \"type\": \"array\",",
					"        \"items\": {",
					"          \"$ref\": \"#/definitions/Notification\"",
					"        },",
					"        \"definitions\": {",
					"          \"Notification\": schemas.LogEntry",
					"        }",
					"      };",
					"    ",
					"pm.globals.set(\"schemas\", schemas);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5dd92d26-9209-4265-a61c-9f892f569987",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
