{
	"info": {
		"_postman_id": "9c47a743-44b1-40a8-be8b-23195a2ae6a5",
		"name": "export-client",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "registration",
			"item": [
				{
					"name": "Create a registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "683d513e-a052-4e1f-8530-780c5fd06c05",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration - POST",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is text/plain\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"text/plain\");",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(pm.response.text().length === 36 ).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"origin\":1471806386919,\n\t\"name\":\"OSIClient\",\n\t\"addressable\":\n\t{\t\n\t\t\"origin\":1471806386919,\n\t\t\"name\":\"OSIMQTTBroker\",\n\t\t\"protocol\":\"TCP\",\n\t\t\"address\":\"m10.cloudmqtt.com\",\n\t\t\"port\":15421,\n\t\t\"publisher\":\"EdgeXExportPublisher\",\n\t\t\"user\":\"hukfgtoh\",\n\t\t\"password\":\"uP6hJLYW6Ji4\",\n\t\t\"topic\":\"EdgeXDataTopic\"\n\t},\n\t\"format\":\"JSON\",\n\t\"filter\":\n\t{\n\t\t\"deviceIdentifiers\":[\"livingroomthermosat\", \"hallwaythermostat\"],\n\t\t\"valueDescriptorIdentifiers\":[\"temperature\", \"humidity\"]\n\t\t\n\t},\n\t\t\"encryption\":\n\t\t{\n\t\t\t\"encryptionAlgorithm\":\"AES\",\n\t\t\t\"encryptionKey\":\"123\",\n\t\t\t\"initializingVector\":\"123\"\n\t\t},\n\t\t\"compression\":\"GZIP\",\n\t\t\"enable\":true, \n\t\t\"destination\": \"REST_ENDPOINT\"\n}"
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration"
							]
						},
						"description": "Add a new client export registration. Name must be unique across the database. Return ServiceException (HTTP 503) for unknown or unanticipated issues."
					},
					"response": []
				},
				{
					"name": "Modify a registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0233f73-59c2-4ea0-82a3-caaf14f99271",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration - PUT",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(pm.response.text() === 'true' ).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"OSIClient\",\n\t\"format\":\"JSON\",\n\t\"addressable\":\n\t{\t\n\t\t\"name\":\"OSIMQTTBroker\"\n\t},\n\t\"enable\": false,\n\t\"compression\":\"GZIP\",\n\t\"destination\": \"REST_ENDPOINT\"\n}"
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration"
							]
						},
						"description": "Update a client export registration. Name & id are not updated as they are identifiers. Return NotFoundException (HTTP 404) if the existing export registration cannot be found by id or name. Return ServiceException (HTTP 503) for unknown or unanticipated issues."
					},
					"response": []
				},
				{
					"name": "Query a registration by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "023c4d17-a2f1-4c18-b2c6-8121221b0edb",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration/name - GET",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"var schema = pm.globals.get(\"schemas\").registration;",
									"var jsonData = pm.response.json();",
									"",
									"var expectRegistration = pm.environment.get(\"getName\");",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Is valid response schema\", function () {",
									"     var result = tv4.validate(jsonData, schema);",
									"     if(!result){",
									"         console.log(tv4.error);",
									"     }",
									"     pm.expect(result).to.be.true;",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(jsonData.name===expectRegistration).to.be.true; ",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3659413e-88db-4bfd-a658-add93a8a2b27",
								"type": "text/javascript",
								"exec": [
									"if(!data.loggingLabel){",
									"    pm.environment.set(\"getName\", \"OSIClient\");",
									"}else{",
									"    pm.environment.set(\"getName\", data.getName);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration/name/{{getName}}",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration",
								"name",
								"{{getName}}"
							]
						},
						"description": "Fetch a client export registration by unique name. Response will be null if no export registration matches on name. Return ServiceException (HTTP 503) for unknown or unanticipated issues"
					},
					"response": []
				},
				{
					"name": "Query a registration by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd27c513-464f-4576-81a5-d17921984635",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration/id - GET",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"var schema = pm.globals.get(\"schemas\").registration;",
									"var jsonData = pm.response.json();",
									"",
									"var expectRegistrationId = pm.environment.get(\"regID\");",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Is valid response schema\", function () {",
									"     var result = tv4.validate(jsonData, schema);",
									"     if(!result){",
									"         console.log(tv4.error);",
									"     }",
									"     pm.expect(result).to.be.true;",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(jsonData.id===expectRegistrationId).to.be.true; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "67686c79-2d26-463c-a38e-dc42fd876bc4",
								"exec": [
									"var baseUrl = pm.environment.get(\"exportClientUrl\");",
									"",
									"pm.sendRequest(baseUrl+\"/api/v1/registration/name/TestClient\", function (err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.environment.set(\"regID\", res.json().id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration/{{regID}}",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration",
								"{{regID}}"
							]
						},
						"description": "Fetch a client export registration by id. Response will be null if no export registration matches on id. Return ServiceException (HTTP 503) for unknown or unanticipated issues."
					},
					"response": []
				},
				{
					"name": "Query all registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24836363-c978-4fb7-9265-634203f591ab",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration - GET",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									" ",
									"var schema = pm.globals.get(\"schemas\").registrationArray;",
									"var jsonData = pm.response.json();",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Is valid response schema\", function () {",
									"     var result = tv4.validate(jsonData, schema);",
									"     if(!result){",
									"         console.log(tv4.error);",
									"     }",
									"     pm.expect(result).to.be.true;",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration"
							]
						},
						"description": "Fetch all client export registrations. Return ServiceException (HTTP 503) for unknown or unanticipated issues. No limits are exercised on this query at this time. May need to add this in the future if the number of clients is huge."
					},
					"response": []
				},
				{
					"name": "Query all supported algorithm property values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d59f43a-dd65-4ecf-9b77-27811f39af8e",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration/reference/algorithms - GET",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration/reference/algorithms",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration",
								"reference",
								"algorithms"
							]
						},
						"description": "Fetch all supported values for the specified Export Client registration property type. Types are algorithms, compressions, formats, and destinations. Return ServiceException (HTTP 503) for unknown type specifications."
					},
					"response": []
				},
				{
					"name": "Query all supported compression property values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3bd0626a-905e-4583-bc07-c530c43bc121",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration/reference/compressions - GET",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration/reference/compressions",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration",
								"reference",
								"compressions"
							]
						},
						"description": "Fetch all supported values for the specified Export Client registration property type. Types are algorithms, compressions, formats, and destinations. Return ServiceException (HTTP 503) for unknown type specifications."
					},
					"response": []
				},
				{
					"name": "Query all supported format property values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef4b8936-a7ad-43ee-afd3-f14a467e32f3",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration/reference/formats - GET",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration/reference/formats",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration",
								"reference",
								"formats"
							]
						},
						"description": "Fetch all supported values for the specified Export Client registration property type. Types are algorithms, compressions, formats, and destinations. Return ServiceException (HTTP 503) for unknown type specifications."
					},
					"response": []
				},
				{
					"name": "Query all supported destination property values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93621cd9-fbca-49f8-980d-ae34d0618df6",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration/reference/destinations - GET",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Content-Type is application/json\", function(){",
									"    var contentType = postman.getResponseHeader(\"Content-Type\");",
									"    pm.expect(contentType).to.include(\"application/json\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration/reference/destinations",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration",
								"reference",
								"destinations"
							]
						},
						"description": "Fetch all supported values for the specified Export Client registration property type. Types are algorithms, compressions, formats, and destinations. Return ServiceException (HTTP 503) for unknown type specifications."
					},
					"response": []
				},
				{
					"name": "Delete a registration by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0066d782-d4cc-4ee9-9154-caf04fda1bce",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration/id/id - DELETE",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(pm.response.text() === 'true' ).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0ff0d2c6-abb7-4cc7-b917-a3b2bc94c514",
								"exec": [
									"var baseUrl = pm.environment.get(\"exportClientUrl\");",
									"",
									"pm.sendRequest(baseUrl+\"/api/v1/registration/name/TestClient2\", function (err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        pm.environment.set(\"regDeleteID\", res.json().id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration/id/{{regDeleteID}}",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration",
								"id",
								"{{regDeleteID}}"
							]
						},
						"description": "Delete a client export registration by database id. Return NotFoundException (HTTP 404) if the existing export registration cannot be found by id. Return ServiceException (HTTP 503) for unknown or unanticipated issues."
					},
					"response": []
				},
				{
					"name": "Delete a registration by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9565f19-0801-4e0c-8b47-14241a244031",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration/name - DELETE",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(pm.response.text() === 'true' ).to.be.true;",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8cfe0d53-f476-4774-adfb-40c4a193604d",
								"type": "text/javascript",
								"exec": [
									"if(!data.loggingLabel){",
									"    pm.environment.set(\"deleteName\", \"OSIClient3\");",
									"}else{",
									"    pm.environment.set(\"deleteName\", data.deleteName);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration/name/{{deleteName}}",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration",
								"name",
								"{{deleteName}}"
							]
						},
						"description": "Delete a client export registration by name. Return NotFoundException (HTTP 404) if the existing export registration cannot be found by name. Return ServiceException (HTTP 503) for unknown or unanticipated issues."
					},
					"response": []
				}
			]
		},
		{
			"name": "registration_error_4xx",
			"item": [
				{
					"name": "Fail to create a registration by empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0592ed8-c18d-4338-b076-b241a5d5b343",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration - POST - 400",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"origin\":1471806386919,\n\t\"name\":\"\",\n\t\"addressable\":\n\t{\t\n\t\t\"origin\":1471806386919,\n\t\t\"name\":\"OSIMQTTBroker\",\n\t\t\"protocol\":\"TCP\",\n\t\t\"address\":\"m10.cloudmqtt.com\",\n\t\t\"port\":15421,\n\t\t\"publisher\":\"EdgeXExportPublisher\",\n\t\t\"user\":\"hukfgtoh\",\n\t\t\"password\":\"uP6hJLYW6Ji4\",\n\t\t\"topic\":\"EdgeXDataTopic\"\n\t},\n\t\"format\":\"JSON\",\n\t\"filter\":\n\t{\n\t\t\"deviceIdentifiers\":[\"livingroomthermosat\", \"hallwaythermostat\"],\n\t\t\"valueDescriptorIdentifiers\":[\"temperature\", \"humidity\"]\n\t\t\n\t},\n\t\t\"encryption\":\n\t\t{\n\t\t\t\"encryptionAlgorithm\":\"AES\",\n\t\t\t\"encryptionKey\":\"123\",\n\t\t\t\"initializingVector\":\"123\"\n\t\t},\n\t\t\"compression\":\"GZIP\",\n\t\t\"enable\":true, \n\t\t\"destination\": \"REST_ENDPOINT\"\n}"
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration"
							]
						},
						"description": "Add a new client export registration. Name must be unique across the database. Return ServiceException (HTTP 503) for unknown or unanticipated issues. This entry does not provide a name, thus returns a 400 error code."
					},
					"response": []
				},
				{
					"name": "Fail to modify registration by inexistent name field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "510f7316-2b2b-467a-9c65-283aac327ae8",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration - PUT - 400",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"names\":\"OSIClient\",\n\t\"enable\": false\n}"
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration"
							]
						},
						"description": "Update a client export registration. Name & id are not updated as they are identifiers. Return NotFoundException (HTTP 404) if the existing export registration cannot be found by id or name. Return ServiceException (HTTP 503) for unknown or unanticipated issues. Passes JSON containing no id or name identifier."
					},
					"response": []
				},
				{
					"name": "Fail to modify registration by inexistent name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1158a8e4-ae1e-4037-9f99-53eb881deacc",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration - PUT - 404",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\":\"OSIClientNotThere\",\n\t\"format\":\"JSON\",\n\t\"addressable\":\n\t{\t\n\t\t\"name\":\"OSIMQTTBroker\"\n\t},\n\t\"enable\": false,\n\t\"compression\":\"GZIP\",\n\t\"destination\": \"REST_ENDPOINT\"\n}"
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration"
							]
						},
						"description": "Update a client export registration. Name & id are not updated as they are identifiers. Return NotFoundException (HTTP 404) if the existing export registration cannot be found by id or name. Return ServiceException (HTTP 503) for unknown or unanticipated issues. Passes JSON containing an name that does not exsist."
					},
					"response": []
				},
				{
					"name": "Fail to query registration by inexistent name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c509e893-6ab6-4a5e-b4ad-c3997ec5fdc9",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration/name - GET - 404",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b174d310-b3c3-4398-9aee-2f9738ec67c9",
								"type": "text/javascript",
								"exec": [
									"if(!data.loggingLabel){",
									"    pm.environment.set(\"nameNotFound\", \"OSIClientNotThere\");",
									"}else{",
									"    pm.environment.set(\"nameNotFound\", data.nameNotFound);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration/name/{{nameNotFound}}",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration",
								"name",
								"{{nameNotFound}}"
							]
						},
						"description": "Fetch a client export registration by unique name. Response will be null if no export registration matches on name. Return ServiceException (HTTP 503) for unknown or unanticipated issues. Searches for a name that has not registration assocated with it."
					},
					"response": []
				},
				{
					"name": "Fail to query registration by inexistent ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8014665a-aed1-4e9e-a1b5-f8d0dd16fbd0",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration/id - GET - 404",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7b2c1412-fa90-4e92-bff1-3d1d9f859911",
								"type": "text/javascript",
								"exec": [
									"if(!data.loggingLabel){",
									"    pm.environment.set(\"regIDNotFound\", \"thisregisnotthere\");",
									"}else{",
									"    pm.environment.set(\"regIDNotFound\", data.regIDNotFound);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration/{{regIDNotFound}}",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration",
								"{{regIDNotFound}}"
							]
						},
						"description": "Fetch a client export registration by id. Response will be null if no export registration matches on id. Return ServiceException (HTTP 503) for unknown or unanticipated issues. We attempt to get a registration via an id that doesn't exsist."
					},
					"response": []
				},
				{
					"name": "Fail to query property values by invalid property type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca69de04-181d-4c4a-823f-9c0816ee737c",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration/reference/algorithms - GET - 400",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration/reference/invalid",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration",
								"reference",
								"invalid"
							]
						},
						"description": "Fetch all supported values for the specified Export Client registration property type. Types are algorithms, compressions, formats, and destinations. Return ServiceException (HTTP 503) for unknown type specifications."
					},
					"response": []
				},
				{
					"name": "Fail to delete registration by inexistent id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81430a21-0c98-4980-8364-a3c625312c3d",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration/id/id - DELETE - 404",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "33ec4f00-b33f-411a-a87e-588125ebc2f6",
								"type": "text/javascript",
								"exec": [
									"if(!data.loggingLabel){",
									"    pm.environment.set(\"nameNotFound\", \"OSIClientNotThere\");",
									"}else{",
									"    pm.environment.set(\"nameNotFound\", data.nameNotFound);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration/name/{{nameNotFound}}",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration",
								"name",
								"{{nameNotFound}}"
							]
						},
						"description": "Delete a client export registration by database id. Return NotFoundException (HTTP 404) if the existing export registration cannot be found by id. Return ServiceException (HTTP 503) for unknown or unanticipated issues. Attempts to delete an entry with an id that does not exsist."
					},
					"response": []
				},
				{
					"name": "Fail to delete registration by inexistent id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de83487f-f543-4dc5-9c25-85dda6f8287e",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Test Case:  api/v1/registration/id/id - DELETE - 404",
									" * Version: Alpha",
									" * @Author: Tom Fleming",
									" *",
									" **/",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "446af669-41f6-43d6-aa5a-f1acb1d9f0f4",
								"type": "text/javascript",
								"exec": [
									"if(!data.loggingLabel){",
									"    pm.environment.set(\"regIDNotFound\", \"thisregisnotthere\");",
									"}else{",
									"    pm.environment.set(\"regIDNotFound\", data.regIDNotFound);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/registration/id/{{regIDNotFound}}",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"registration",
								"id",
								"{{regIDNotFound}}"
							]
						},
						"description": "Delete a client export registration by database id. Return NotFoundException (HTTP 404) if the existing export registration cannot be found by id. Return ServiceException (HTTP 503) for unknown or unanticipated issues. Attempts to delete an entry with an id that does not exsist."
					},
					"response": []
				}
			]
		},
		{
			"name": "ping",
			"item": [
				{
					"name": "Test service providing an indication that the service is available.",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a31e29a-5204-406c-8eb5-a047d8a641b5",
								"type": "text/javascript",
								"exec": [
									" /**",
									" * Test Case:  /ping - GET",
									" * Version: Alpha",
									" * @Author: Tata Elxsi",
									" * ",
									" **/",
									" ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than \"+data.responseTime+\"ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(data.responseTime);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response body is correct\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"pong\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{exportClientUrl}}/api/v1/ping",
							"host": [
								"{{exportClientUrl}}"
							],
							"path": [
								"api",
								"v1",
								"ping"
							]
						},
						"description": "Test service providing an indicatioon that the service is avaliable."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "18db43d9-8a4e-4a65-a9af-f4c9d6bb9017",
				"type": "text/javascript",
				"exec": [
					"var schemas = {} ; ",
					"",
					"schemas.registration = {",
					"      \"type\":\"object\",",
					"      \"$schema\":\"http://json-schema.org/draft-03/schema#\",",
					"      \"description\":\"Defines the registration details on the part of north side export clients\",",
					"      \"title\":\"ExportRegistration\",",
					"      \"properties\":{",
					"        \"id\":{",
					"          \"type\":\"string\",",
					"          \"required\":false,",
					"          \"title\":\"id\"",
					"        },",
					"        \"created\":{",
					"          \"type\":\"integer\",",
					"          \"required\":false,",
					"          \"title\":\"created\"",
					"        },",
					"        \"modified\":{",
					"          \"type\":\"integer\",",
					"          \"required\":false,",
					"          \"title\":\"modified\"",
					"        },",
					"        \"origin\":{",
					"          \"type\":\"integer\",",
					"          \"required\":false,",
					"          \"title\":\"origin\"",
					"        },",
					"        \"name\":{",
					"          \"type\":\"string\",",
					"          \"required\":true,",
					"          \"title\":\"name\"",
					"        },",
					"        \"addressable\":{",
					"          \"type\":\"object\",",
					"          \"properties\":{",
					"            \"id\":{",
					"              \"type\":[\"string\",\"null\"],",
					"              \"required\":false,",
					"              \"title\":\"id\"",
					"            },",
					"            \"created\":{",
					"              \"type\":\"integer\",",
					"              \"required\":false,",
					"              \"title\":\"created\"",
					"            },",
					"            \"modified\":{",
					"              \"type\":\"integer\",",
					"              \"required\":false,",
					"              \"title\":\"modified\"",
					"            },",
					"            \"origin\":{",
					"              \"type\":\"integer\",",
					"              \"required\":false,",
					"              \"title\":\"origin\"",
					"            },",
					"            \"name\":{",
					"              \"type\":\"string\",",
					"              \"required\":false,",
					"              \"title\":\"name\"",
					"            },",
					"            \"protocol\":{",
					"              \"type\":\"string\",",
					"              \"required\":false,",
					"              \"title\":\"protocol\"",
					"            },",
					"            \"address\":{",
					"              \"type\":[\"string\",\"null\"],",
					"              \"required\":false,",
					"              \"title\":\"address\"",
					"            },",
					"            \"port\":{",
					"              \"type\":\"integer\",",
					"              \"required\":false,",
					"              \"title\":\"port\"",
					"            },",
					"            \"path\":{",
					"              \"type\":[\"string\",\"null\"],",
					"              \"required\":false,",
					"              \"title\":\"path\"",
					"            },",
					"            \"publisher\":{",
					"              \"type\":[\"string\",\"null\"],",
					"              \"required\":false,",
					"              \"title\":\"publisher\"",
					"            },",
					"            \"user\":{",
					"              \"type\":[\"string\",\"null\"],",
					"              \"required\":false,",
					"              \"title\":\"user\"",
					"            },",
					"            \"password\":{",
					"              \"type\":[\"string\",\"null\"],",
					"              \"required\":false,",
					"              \"title\":\"password\"",
					"            },",
					"            \"topic\":{",
					"              \"type\":[\"string\",\"null\"],",
					"              \"required\":false,",
					"              \"title\":\"topic\"",
					"            }",
					"          }",
					"        },",
					"        \"format\":{",
					"          \"type\":\"string\",",
					"          \"required\":false,",
					"          \"title\":\"format\"",
					"        },",
					"        \"filter\":{",
					"          \"type\":\"object\",",
					"          \"properties\":{",
					"            \"deviceIdentifiers\":{",
					"              \"type\":\"array\",",
					"              \"required\":false,",
					"              \"title\":\"deviceIdentifiers\",",
					"              \"items\":{",
					"                \"type\":\"string\",",
					"                \"title\":\"deviceIdentifiers\"",
					"              },",
					"              \"uniqueItems\":false",
					"            },",
					"            \"valueDescriptorIdentifiers\":{",
					"              \"type\":\"array\",",
					"              \"required\":false,",
					"              \"title\":\"valueDescriptorIdentifiers\",",
					"              \"items\":{",
					"                \"type\":\"string\",",
					"                \"title\":\"valueDescriptorIdentifiers\"",
					"              },",
					"              \"uniqueItems\":false",
					"            }",
					"          }",
					"        },",
					"        \"encryption\":{",
					"          \"type\":\"object\",",
					"          \"properties\":{",
					"            \"encryptionAlgorithm\":{",
					"              \"type\":\"string\",",
					"              \"required\":false,",
					"              \"title\":\"encryptionAlgorithm\"",
					"            },",
					"            \"encryptionKey\":{",
					"              \"type\":\"string\",",
					"              \"required\":false,",
					"              \"title\":\"encryptionKey\"",
					"            },",
					"            \"initializingVector\":{",
					"              \"type\":\"string\",",
					"              \"required\":false,",
					"              \"title\":\"initializingVector\"",
					"            }",
					"          }",
					"        },",
					"        \"compression\":{",
					"          \"type\":\"string\",",
					"          \"required\":false,",
					"          \"title\":\"compression\"",
					"        },",
					"        \"enable\":{",
					"          \"type\":\"boolean\",",
					"          \"required\":false,",
					"          \"title\":\"enable\"",
					"        }",
					"      }",
					"    };",
					"      ",
					"schemas.registrationArray = {",
					"        \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
					"        \"title\": \"The Array of Registration\",",
					"        \"type\": \"array\",",
					"        \"items\": {",
					"          \"$ref\": \"#/definitions/Registration\"",
					"        },",
					"        \"definitions\": {",
					"          \"Registration\": schemas.registration",
					"        }",
					"      };",
					"    ",
					"pm.globals.set(\"schemas\", schemas);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "77761ca0-cb23-4f44-9618-2b3ad616ba16",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}